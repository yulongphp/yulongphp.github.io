<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mryy的博客</title>
  
  <subtitle>生活不仅只是敲代码，还有...调bug...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yulongphp.github.io/"/>
  <updated>2019-06-06T10:31:20.089Z</updated>
  <id>http://yulongphp.github.io/</id>
  
  <author>
    <name>yulong yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php 部分语法的AST、栈、符号表、和指令集</title>
    <link href="http://yulongphp.github.io/2019/01/01/php%E9%83%A8%E5%88%86%E8%AF%AD%E6%B3%95%E7%9A%84AST%E6%A0%88%E7%AC%A6%E5%8F%B7%E8%A1%A8%E5%92%8C%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://yulongphp.github.io/2019/01/01/php部分语法的AST栈符号表和指令集/</id>
    <published>2019-01-01T04:56:19.000Z</published>
    <updated>2019-06-06T10:31:20.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="break-语法的AST、栈、符号表和指令集"><a href="#break-语法的AST、栈、符号表和指令集" class="headerlink" title="break 语法的AST、栈、符号表和指令集"></a>break 语法的AST、栈、符号表和指令集</h2><h4 id="先写一个测试脚本-break-php"><a href="#先写一个测试脚本-break-php" class="headerlink" title="先写一个测试脚本 break.php"></a>先写一个测试脚本 break.php</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="gdb调试过程："><a href="#gdb调试过程：" class="headerlink" title="gdb调试过程："></a>gdb调试过程：</h4><p><img src="/images/break_gdb_ast.png" alt=""></p><h4 id="抽象语法树："><a href="#抽象语法树：" class="headerlink" title="抽象语法树："></a>抽象语法树：</h4><p><img src="/images/break_ast.png" alt=""></p><h4 id="栈、符号表和常量"><a href="#栈、符号表和常量" class="headerlink" title="栈、符号表和常量"></a>栈、符号表和常量</h4><p><img src="/images/break_stack.png" alt=""></p><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/break_order.png" alt=""></p><h2 id="实战-文件的引入实现"><a href="#实战-文件的引入实现" class="headerlink" title="实战 文件的引入实现"></a>实战 文件的引入实现</h2><ul><li>include语法</li><li>require语法</li><li>include_once语法</li><li>require_once语法</li></ul><h4 id="先编写两个文件-1-php"><a href="#先编写两个文件-1-php" class="headerlink" title="先编写两个文件 1.php"></a>先编写两个文件 1.php</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">1</span>;</span></span><br></pre></td></tr></table></figure><p>2.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"1.php"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">2</span>;</span></span><br></pre></td></tr></table></figure><h4 id="include-gdb"><a href="#include-gdb" class="headerlink" title="include gdb"></a>include gdb</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0</span>x7f85f8: file Zend/zend_language_scanner.l, line <span class="number">578</span>.</span><br><span class="line">(gdb) r <span class="number">2</span>.php</span><br><span class="line">Starting program: /usr/local/bin/php71 <span class="number">2</span>.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib64/libthread_db.so.1"</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, zend_compile (<span class="attr">type=2)</span> at Zend/zend_language_scanner.l:<span class="number">578</span></span><br><span class="line"><span class="number">578</span>zend_op_array *<span class="attr">op_array</span> = NULL;</span><br><span class="line">(gdb)</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">579</span>zend_bool <span class="attr">original_in_compilation</span> = CG(in_compilation);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">581</span>CG(in_compilation) = <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">582</span>CG(ast) = NULL;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">583</span>CG(ast_arena) = zend_arena_create(<span class="number">1024</span> * <span class="number">32</span>);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">585</span><span class="keyword">if</span> (!zendparse()) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">586</span>int <span class="attr">last_lineno</span> = CG(zend_lineno);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">589</span>zend_op_array *<span class="attr">original_active_op_array</span> = CG(active_op_array);</span><br><span class="line">(gdb) p compiler_globals.ast</span><br><span class="line">$<span class="number">1</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a018</span><br><span class="line">(gdb) p *compiler_globals.ast</span><br><span class="line">$<span class="number">2</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list)compiler_globals.ast</span><br><span class="line">Structure has no component named operator*.</span><br><span class="line">(gdb) p *(zend_ast_list*)compiler_globals.ast</span><br><span class="line">$<span class="number">3</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">children</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a060&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">4</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a060</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">5</span> = &#123;<span class="attr">kind</span> = <span class="number">269</span>, <span class="attr">attr</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a048&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">6</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a048</span><br><span class="line">(gdb) p *$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">7</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e5eac0&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">8</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318873792</span>, <span class="attr">dval</span> = <span class="number">6.9533474343345501</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">str</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ww</span> = &#123;</span><br><span class="line">        <span class="attr">w1</span> = <span class="number">4125485760</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">type_flags</span> = <span class="number">20</span> '\<span class="number">024</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;,</span><br><span class="line">      <span class="attr">type_info</span> = <span class="number">5126</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>,</span><br><span class="line">      <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">9</span> = (zend_string *) <span class="number">0</span>x7ffff5e5eac0</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">10</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">1</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">6</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">0</span>, <span class="attr">len</span> = <span class="number">5</span>, <span class="attr">val</span> = <span class="string">"1"</span>&#125;</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str.val@<span class="number">5</span></span><br><span class="line">$<span class="number">11</span> = <span class="string">"1.php"</span></span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">12</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a098</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">13</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x1&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list*)$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">14</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">children</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a088&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">15</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a088</span><br><span class="line">(gdb) p *$<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">16</span> = &#123;<span class="attr">kind</span> = <span class="number">282</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a070&#125;&#125;</span><br><span class="line">(gdb) p *$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">17</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">18</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2,</span><br><span class="line">      <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2, <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>',</span><br><span class="line">        <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">3</span>, <span class="attr">cache_slot</span> = <span class="number">3</span>, <span class="attr">lineno</span> = <span class="number">3</span>,</span><br><span class="line">      <span class="attr">num_args</span> = <span class="number">3</span>, <span class="attr">fe_pos</span> = <span class="number">3</span>, <span class="attr">fe_iter_idx</span> = <span class="number">3</span>, <span class="attr">access_flags</span> = <span class="number">3</span>, <span class="attr">property_guard</span> = <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="include-AST"><a href="#include-AST" class="headerlink" title="include AST"></a>include AST</h4><p><img src="/images/include_ast.png" alt=""></p><h4 id="栈-符号表-和常量"><a href="#栈-符号表-和常量" class="headerlink" title="栈 符号表 和常量"></a>栈 符号表 和常量</h4><p><img src="/images/include_stack.png" alt=""></p><h4 id="指令集-1"><a href="#指令集-1" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/include_order.png" alt=""></p><h2 id="条件判断语法实现"><a href="#条件判断语法实现" class="headerlink" title="条件判断语法实现"></a>条件判断语法实现</h2><h4 id="先编写文件-condition-php"><a href="#先编写文件-condition-php" class="headerlink" title="先编写文件 condition.php"></a>先编写文件 <code>condition.php</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = <span class="string">"php7"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($a == <span class="string">"php5"</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP5 is good.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">elseif</span>($a == <span class="string">'php7'</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP7 is better.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Hoho~ PHP is the best language!\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="AST-语法树"><a href="#AST-语法树" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/if_ast.png" alt=""></p><h4 id="栈-符号表-常量"><a href="#栈-符号表-常量" class="headerlink" title="栈 符号表 常量"></a>栈 符号表 常量</h4><p><img src="/images/if_stack.png" alt=""></p><h4 id="指令集-2"><a href="#指令集-2" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/if_order_1.png" alt=""><br><img src="/images/if_order_2.png" alt=""></p><h2 id="实战：循环语法实现"><a href="#实战：循环语法实现" class="headerlink" title="实战：循环语法实现"></a>实战：循环语法实现</h2><ul><li>foreach 语法</li><li>while 语法</li><li>for 语法</li><li>do while 语法</li></ul><h4 id="先编写文件-foreach-php"><a href="#先编写文件-foreach-php" class="headerlink" title="先编写文件 foreach.php"></a>先编写文件 <code>foreach.php</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = [<span class="number">1</span>, <span class="number">2</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $k =&gt; $v)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $v;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="AST-语法树-1"><a href="#AST-语法树-1" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/foreach_ast.png" alt=""></p><h4 id="栈-符号表-和-常量"><a href="#栈-符号表-和-常量" class="headerlink" title="栈 符号表 和 常量"></a>栈 符号表 和 常量</h4><p><img src="/images/foreach_stack.png" alt=""></p><h4 id="指令集-3"><a href="#指令集-3" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/foreach_order_1.png" alt=""><br><img src="/images/foreach_order_2.png" alt=""></p><h4 id="执行过程gdb"><a href="#执行过程gdb" class="headerlink" title="执行过程gdb"></a>执行过程gdb</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl PHP]<span class="comment"># gdb php71</span></span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux <span class="number">7.6</span>.<span class="number">1</span>-<span class="number">114</span>.el7</span><br><span class="line">Copyright (C) <span class="number">2013</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> <span class="literal">or</span> later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change <span class="literal">and</span> redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line"><span class="literal">and</span> <span class="string">"show warranty"</span> for details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-redhat-linux-gnu"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class="line">Reading symbols from /usr/local/php/php-<span class="number">7.1</span>.<span class="number">0</span>/bin/php...done.</span><br><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0</span>x7f85f8: file Zend/zend_language_scanner.l, line <span class="number">578</span>.</span><br><span class="line">(gdb) b zend_execute</span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0</span>x8aea82: file /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h, line <span class="number">461</span>.</span><br><span class="line">(gdb) b execute_ex</span><br><span class="line">Breakpoint <span class="number">3</span> at <span class="number">0</span>x8aea15: file /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h, line <span class="number">411</span>.</span><br><span class="line">(gdb) r foreach.php</span><br><span class="line">Starting program: /usr/local/bin/php71 foreach.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib64/libthread_db.so.1"</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, zend_compile (<span class="attr">type=2)</span> at Zend/zend_language_scanner.l:<span class="number">578</span></span><br><span class="line"><span class="number">578</span>zend_op_array *<span class="attr">op_array</span> = NULL;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">2</span>, zend_execute (<span class="attr">op_array=0x7ffff5e83000,</span> <span class="attr">return_value=0x0)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">461</span></span><br><span class="line"><span class="number">461</span><span class="keyword">if</span> (EG(exception) != NULL) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">466</span>(zend_function*)op_array, <span class="number">0</span>, zend_get_called_scope(EG(current_execute_data)), zend_get_this_object(EG(current_execute_data)));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">465</span><span class="attr">execute_data</span> = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE,</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">466</span>(zend_function*)op_array, <span class="number">0</span>, zend_get_called_scope(EG(current_execute_data)), zend_get_this_object(EG(current_execute_data)));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">465</span><span class="attr">execute_data</span> = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE,</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">467</span><span class="keyword">if</span> (EG(current_execute_data)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">470</span>execute_data-&gt;<span class="attr">symbol_table</span> = &amp;EG(symbol_table);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">472</span>EX(prev_execute_data) = EG(current_execute_data);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">473</span>i_init_execute_data(execute_data, op_array, return_value);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">474</span>zend_execute_ex(execute_data);</span><br><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">3</span>, execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">411</span></span><br><span class="line"><span class="number">411</span>const zend_op *<span class="attr">orig_opline</span> = opline;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">414</span>zend_execute_data *<span class="attr">orig_execute_data</span> = execute_data;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">415</span><span class="attr">execute_data</span> = ex;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">421</span>LOAD_OPLINE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">422</span>ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">39440</span></span><br><span class="line"><span class="number">39440</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39441</span><span class="attr">value</span> = EX_CONSTANT(opline-&gt;op2);</span><br><span class="line">(gdb) p opline-&gt;op2</span><br><span class="line">$<span class="number">1</span> = &#123;<span class="attr">constant</span> = <span class="number">0</span>, <span class="attr">var</span> = <span class="number">0</span>, <span class="attr">num</span> = <span class="number">0</span>, <span class="attr">opline_num</span> = <span class="number">0</span>, <span class="attr">jmp_offset</span> = <span class="number">0</span>&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39442</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">2</span> = (zval *) <span class="number">0</span>x7ffff5e649c0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">3</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">4294967295</span>,</span><br><span class="line">    <span class="attr">cache_slot</span> = <span class="number">4294967295</span>, <span class="attr">lineno</span> = <span class="number">4294967295</span>, <span class="attr">num_args</span> = <span class="number">4294967295</span>, <span class="attr">fe_pos</span> = <span class="number">4294967295</span>, <span class="attr">fe_iter_idx</span> = <span class="number">4294967295</span>,</span><br><span class="line">    <span class="attr">access_flags</span> = <span class="number">4294967295</span>, <span class="attr">property_guard</span> = <span class="number">4294967295</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">3</span>.value.arr</span><br><span class="line">$<span class="number">4</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">3</span>.value.arr</span><br><span class="line">$<span class="number">5</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">1</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.arData[<span class="number">0</span>]</span><br><span class="line">$<span class="number">6</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">0</span>, <span class="attr">key</span> = <span class="number">0</span>x0&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.arData[<span class="number">1</span>]</span><br><span class="line">$<span class="number">7</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">1</span>, <span class="attr">key</span> = <span class="number">0</span>x0&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39450</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_CONST);</span><br><span class="line">(gdb) p opline-&gt;op1.var</span><br><span class="line">$<span class="number">8</span> = <span class="number">80</span></span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">9</span> = (zval *) <span class="number">0</span>x7ffff5e14080</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39458</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb) p *variable_ptr</span><br><span class="line">$<span class="number">10</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39459</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_RESET_R_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">35503</span></span><br><span class="line"><span class="number">35503</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35505</span><span class="attr">array_ptr</span> = _get_zval_ptr_cv_deref_BP_VAR_R(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p opline-&gt;op1.var</span><br><span class="line">$<span class="number">11</span> = <span class="number">80</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35506</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array_ptr) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb) p array_ptr</span><br><span class="line">$<span class="number">12</span> = (zval *) <span class="number">0</span>x7ffff5e14080</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35507</span><span class="attr">result</span> = EX_VAR(opline-&gt;result.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35508</span>ZVAL_COPY_VALUE(result, array_ptr);</span><br><span class="line">(gdb) p result</span><br><span class="line">$<span class="number">13</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35509</span><span class="keyword">if</span> (IS_CV != IS_TMP_VAR &amp;&amp; Z_OPT_REFCOUNTED_P(result)) &#123;</span><br><span class="line">(gdb) p *result</span><br><span class="line">$<span class="number">14</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">15</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">16</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">2</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35510</span>Z_ADDREF_P(array_ptr);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35512</span>Z_FE_POS_P(result) = <span class="number">0</span>;</span><br><span class="line">(gdb) p *$<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">17</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">3</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) p *result</span><br><span class="line">$<span class="number">18</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35514</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35606</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">19</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb) p fe_ht</span><br><span class="line">$<span class="number">20</span> = (HashTable *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">21</span> = <span class="number">0</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16719</span><span class="attr">value</span> = &amp;p-&gt;val;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16720</span><span class="attr">value_type</span> = Z_TYPE_INFO_P(value);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">22</span> = (zval *) <span class="number">0</span>x7ffff5e5fa08</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">23</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16721</span><span class="keyword">if</span> (<span class="attr">value_type</span> == IS_UNDEF) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16725</span>&#125; <span class="keyword">else</span> <span class="keyword">if</span> (UNEXPECTED(<span class="attr">value_type</span> == IS_INDIRECT)) &#123;</span><br><span class="line">(gdb) p value_type</span><br><span class="line">$<span class="number">24</span> = <span class="number">4</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16734</span>break;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16736</span>Z_FE_POS_P(array) = pos + <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16737</span><span class="keyword">if</span> (opline-&gt;result_type &amp; (IS_TMP_VAR|IS_CV)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16738</span><span class="keyword">if</span> (!p-&gt;key) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16739</span>ZVAL_LONG(EX_VAR(opline-&gt;result.var), p-&gt;h);</span><br><span class="line">(gdb) p opline-&gt;result.var</span><br><span class="line">$<span class="number">25</span> = <span class="number">160</span></span><br><span class="line">(gdb) p ((zval*)(((char*)(execute_data)) + ((int)(opline-&gt;result.var))))</span><br><span class="line">$<span class="number">26</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16856</span><span class="keyword">if</span> (EXPECTED(opline-&gt;<span class="attr">op2_type</span> == IS_CV)) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16857</span>zval *<span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op2.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16858</span>zend_assign_to_variable(variable_ptr, value, IS_CV);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">27</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">28</span> = (zval *) <span class="number">0</span>x7ffff5e5fa08</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">29</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16868</span>ZEND_VM_NEXT_OPCODE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_TMP_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">40733</span></span><br><span class="line"><span class="number">40733</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40734</span><span class="attr">value</span> = _get_zval_ptr_tmp(opline-&gt;op2.var, execute_data, &amp;free_op2);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40735</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">30</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">31</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">0</span>, <span class="attr">dval</span> = <span class="number">0</span>, <span class="attr">counted</span> = <span class="number">0</span>x0, <span class="attr">str</span> = <span class="number">0</span>x0, <span class="attr">arr</span> = <span class="number">0</span>x0, <span class="attr">obj</span> = <span class="number">0</span>x0, <span class="attr">res</span> = <span class="number">0</span>x0, <span class="attr">ref</span> = <span class="number">0</span>x0, <span class="attr">ast</span> = <span class="number">0</span>x0, <span class="attr">zv</span> = <span class="number">0</span>x0,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x0, <span class="attr">ce</span> = <span class="number">0</span>x0, <span class="attr">func</span> = <span class="number">0</span>x0, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">0</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40743</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_TMP_VAR);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">32</span> = (zval *) <span class="number">0</span>x7ffff5e140a0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40751</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40752</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ECHO_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">34640</span></span><br><span class="line"><span class="number">34640</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34641</span><span class="attr">z</span> = _get_zval_ptr_cv_undef(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34643</span><span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line">$<span class="number">33</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34650</span>zend_string *<span class="attr">str</span> = _zval_get_string_func(z);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34652</span><span class="keyword">if</span> (ZSTR_LEN(str) != <span class="number">0</span>) &#123;</span><br><span class="line">(gdb) p *z</span><br><span class="line">$<span class="number">34</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34653</span>zend_write(ZSTR_VAL(str), ZSTR_LEN(str));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">134657</span>zend_string_release(str);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34660</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34661</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_JMP_SPEC_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">607</span></span><br><span class="line"><span class="number">607</span>ZEND_VM_SET_OPCODE(OP_JMP_ADDR(opline, opline-&gt;op1));</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)(opline-&gt;op1).jmp_offset))</span><br><span class="line">$<span class="number">35</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">608</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">609</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">36</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">37</span> = <span class="number">1</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16719</span><span class="attr">value</span> = &amp;p-&gt;val;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16720</span><span class="attr">value_type</span> = Z_TYPE_INFO_P(value);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16721</span><span class="keyword">if</span> (<span class="attr">value_type</span> == IS_UNDEF) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16725</span>&#125; <span class="keyword">else</span> <span class="keyword">if</span> (UNEXPECTED(<span class="attr">value_type</span> == IS_INDIRECT)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16734</span>break;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16736</span>Z_FE_POS_P(array) = pos + <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16737</span><span class="keyword">if</span> (opline-&gt;result_type &amp; (IS_TMP_VAR|IS_CV)) &#123;</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">38</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) p *array</span><br><span class="line">$<span class="number">39</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>, <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16738</span><span class="keyword">if</span> (!p-&gt;key) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16739</span>ZVAL_LONG(EX_VAR(opline-&gt;result.var), p-&gt;h);</span><br><span class="line">(gdb) p p-&gt;h</span><br><span class="line">$<span class="number">40</span> = <span class="number">1</span></span><br><span class="line">(gdb) p opline-&gt;result.var</span><br><span class="line">$<span class="number">41</span> = <span class="number">160</span></span><br><span class="line">(gdb) p ((zval*)(((char*)(execute_data)) + ((int)(opline-&gt;result.var))))</span><br><span class="line">$<span class="number">42</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16856</span><span class="keyword">if</span> (EXPECTED(opline-&gt;<span class="attr">op2_type</span> == IS_CV)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16857</span>zval *<span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op2.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16858</span>zend_assign_to_variable(variable_ptr, value, IS_CV);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">43</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p *variable_ptr</span><br><span class="line">$<span class="number">44</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16868</span>ZEND_VM_NEXT_OPCODE();</span><br><span class="line">(gdb) p *(zval*)<span class="number">0</span>x7ffff5e14090</span><br><span class="line">$<span class="number">45</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_TMP_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">40733</span></span><br><span class="line"><span class="number">40733</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40734</span><span class="attr">value</span> = _get_zval_ptr_tmp(opline-&gt;op2.var, execute_data, &amp;free_op2);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40735</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">46</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">47</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40743</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_TMP_VAR);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">48</span> = (zval *) <span class="number">0</span>x7ffff5e140a0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40751</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40752</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ECHO_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">34640</span></span><br><span class="line"><span class="number">34640</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34641</span><span class="attr">z</span> = _get_zval_ptr_cv_undef(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34643</span><span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line">$<span class="number">49</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p *z</span><br><span class="line">$<span class="number">50</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34650</span>zend_string *<span class="attr">str</span> = _zval_get_string_func(z);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34652</span><span class="keyword">if</span> (ZSTR_LEN(str) != <span class="number">0</span>) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34653</span>zend_write(ZSTR_VAL(str), ZSTR_LEN(str));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">234657</span>zend_string_release(str);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34660</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34661</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_JMP_SPEC_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">607</span></span><br><span class="line"><span class="number">607</span>ZEND_VM_SET_OPCODE(OP_JMP_ADDR(opline, opline-&gt;op1));</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)(opline-&gt;op1).jmp_offset))</span><br><span class="line">$<span class="number">51</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">608</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">609</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">52</span> = <span class="number">2</span></span><br><span class="line">(gdb) p p</span><br><span class="line">$<span class="number">53</span> = (Bucket *) <span class="number">0</span>x7ffff5e64980</span><br><span class="line">(gdb) p *p</span><br><span class="line">$<span class="number">54</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318898176</span>, <span class="attr">dval</span> = <span class="number">6.9533474355392798</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e64a00,</span><br><span class="line">      <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e64a00,</span><br><span class="line">      <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125510144</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">0</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">1</span>, <span class="attr">key</span> = <span class="number">0</span>x32&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">55</span> = <span class="number">2</span></span><br><span class="line">(gdb) p fe_ht-&gt;nNumUsed</span><br><span class="line">$<span class="number">56</span> = <span class="number">2</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16717</span>goto fe_fetch_r_exit;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16852</span>ZEND_VM_SET_RELATIVE_OPCODE(opline, opline-&gt;extended_value);</span><br><span class="line">(gdb) p opline</span><br><span class="line">$<span class="number">57</span> = (const zend_op * volatile) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) p *opline</span><br><span class="line">$<span class="number">58</span> = &#123;<span class="attr">handler</span> = <span class="number">0</span>x8d27fe &lt;ZEND_FE_FETCH_R_SPEC_VAR_HANDLER&gt;, <span class="attr">op1</span> = &#123;<span class="attr">constant</span> = <span class="number">144</span>, <span class="attr">var</span> = <span class="number">144</span>, <span class="attr">num</span> = <span class="number">144</span>, <span class="attr">opline_num</span> = <span class="number">144</span>,</span><br><span class="line">    <span class="attr">jmp_offset</span> = <span class="number">144</span>&#125;, <span class="attr">op2</span> = &#123;<span class="attr">constant</span> = <span class="number">96</span>, <span class="attr">var</span> = <span class="number">96</span>, <span class="attr">num</span> = <span class="number">96</span>, <span class="attr">opline_num</span> = <span class="number">96</span>, <span class="attr">jmp_offset</span> = <span class="number">96</span>&#125;, <span class="attr">result</span> = &#123;<span class="attr">constant</span> = <span class="number">160</span>, <span class="attr">var</span> = <span class="number">160</span>,</span><br><span class="line">    <span class="attr">num</span> = <span class="number">160</span>, <span class="attr">opline_num</span> = <span class="number">160</span>, <span class="attr">jmp_offset</span> = <span class="number">160</span>&#125;, <span class="attr">extended_value</span> = <span class="number">128</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">opcode</span> = <span class="number">78</span> 'N', <span class="attr">op1_type</span> = <span class="number">4</span> '\<span class="number">004</span>',</span><br><span class="line">  <span class="attr">op2_type</span> = <span class="number">16</span> '\<span class="number">020</span>', <span class="attr">result_type</span> = <span class="number">2</span> '\<span class="number">002</span>'&#125;</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)opline-&gt;extended_value))</span><br><span class="line">$<span class="number">59</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fd40</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)<span class="number">128</span>))</span><br><span class="line">$<span class="number">60</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fd40</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16853</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FREE_SPEC_TMPVAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">51425</span></span><br><span class="line"><span class="number">51425</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51426</span><span class="attr">var</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">51427</span><span class="keyword">if</span> (Z_TYPE_P(var) != IS_ARRAY &amp;&amp; Z_FE_ITER_P(var) != (uint32_t)-<span class="number">1</span>) &#123;</span><br><span class="line">(gdb) p var</span><br><span class="line">$<span class="number">61</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51430</span>zval_ptr_dtor_nogc(var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">51431</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb) p var</span><br><span class="line">$<span class="number">62</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) p *var</span><br><span class="line">$<span class="number">63</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>, <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">63</span>.value.arr</span><br><span class="line">$<span class="number">64</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">63</span>.value.arr</span><br><span class="line">$<span class="number">65</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">2</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51432</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_RETURN_SPEC_CONST_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">2858</span></span><br><span class="line"><span class="number">2858</span><span class="attr">retval_ptr</span> = EX_CONSTANT(opline-&gt;op1);</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;break-语法的AST、栈、符号表和指令集&quot;&gt;&lt;a href=&quot;#break-语法的AST、栈、符号表和指令集&quot; class=&quot;headerlink&quot; title=&quot;break 语法的AST、栈、符号表和指令集&quot;&gt;&lt;/a&gt;break 语法的AST、栈、符号表和指
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 代码的编译与执行</title>
    <link href="http://yulongphp.github.io/2018/12/30/php%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E6%89%A7%E8%A1%8C/"/>
    <id>http://yulongphp.github.io/2018/12/30/php代码的编译和执行/</id>
    <published>2018-12-30T04:56:19.000Z</published>
    <updated>2019-06-06T09:14:24.562Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解释型语言也需要编译吗？"><a href="#解释型语言也需要编译吗？" class="headerlink" title="解释型语言也需要编译吗？"></a>解释型语言也需要编译吗？</h3><p><img src="/images/language.png" alt=""></p><p>词法分析（正则表达式分割 找出token）</p><h3 id="词法分析入门-NFA-不确定有穷自动机"><a href="#词法分析入门-NFA-不确定有穷自动机" class="headerlink" title="词法分析入门-NFA(不确定有穷自动机)"></a>词法分析入门-NFA(不确定有穷自动机)</h3><p><img src="/images/word_nfa.png" alt=""></p><p>0, 1, 2  状态机中间状态(一个圈)<br>3        状态机最终状态(两个圈)</p><p>箭头和字母表示： 每个状态遇到不同的输入迁移到另一个状态</p><p>致命缺陷：状态0为不确定状态 可能会一直停在状态0<br>例如: abb 其实是满足正则表达式的  由于状态0处是不确定的 可能会出现如下情况<br>    0 遇到a 迁移到0 -&gt; 0遇到b 迁移到0 -&gt; 0遇到b 迁移到0  导致一直停留在0状态</p><h3 id="词法分析入门-DFA-确定有穷自动机"><a href="#词法分析入门-DFA-确定有穷自动机" class="headerlink" title="词法分析入门-DFA(确定有穷自动机)"></a>词法分析入门-DFA(确定有穷自动机)</h3><p><img src="/images/word_dfa.png" alt=""></p><p>对于PHP语言来说 要切分开所有token 可以想像需要大量正则表达式 而且正则表达式比较复杂<br>我们需要手动去编写DFA吗？<br>不需要, 有些工具比较完善的帮我们解决了这些事情 ： re2c</p><h3 id="使用re2c做词法分析"><a href="#使用re2c做词法分析" class="headerlink" title="使用re2c做词法分析"></a>使用re2c做词法分析</h3><p>安装re2c<br>官网 re2c.org<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/skvadrik/re2c/releases/download/<span class="number">1.1</span>.<span class="number">1</span>/re2c-<span class="number">1.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf re2c-<span class="number">1.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> re2c-<span class="number">1.1</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure></p><h3 id="实例：识别输入数字进制"><a href="#实例：识别输入数字进制" class="headerlink" title="实例：识别输入数字进制"></a>实例：识别输入数字进制</h3><p>编写文件 integer.l<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">enum</span> num_t &#123; <span class="type">ERR</span>, <span class="type">BIN</span>, <span class="type">OCT</span>, <span class="type">DEC</span>, <span class="type">HEX</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> num_t lex(<span class="keyword">const</span> <span class="built_in">char</span> *<span class="type">YYCURSOR</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">char</span> *<span class="type">YYMARKER</span>;</span><br><span class="line">    /*!re2c</span><br><span class="line">        re2c:define:<span class="type">YYCTYPE</span> = <span class="built_in">char</span>;</span><br><span class="line">        re2c:yyfill:enable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span> = <span class="string">"\x00"</span>;</span><br><span class="line">        bin = '<span class="number">0</span>b'[<span class="number">01</span>]+;</span><br><span class="line">        oct = <span class="string">"0"</span>[<span class="number">0</span>-<span class="number">7</span>]*;</span><br><span class="line">        dec = [<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*;</span><br><span class="line">        hex = '<span class="number">0</span>x'[<span class="number">0</span>-<span class="number">9</span>a-fA-F]+;</span><br><span class="line">        *       &#123; <span class="keyword">return</span> <span class="type">ERR</span>; &#125;</span><br><span class="line">        bin <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">BIN</span>; &#125;</span><br><span class="line">        oct <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">OCT</span>; &#125;</span><br><span class="line">        dec <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">DEC</span>; &#125;</span><br><span class="line">        hex <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">HEX</span>; &#125;</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, <span class="built_in">char</span> ** argv)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        switch (lex(argv[i])) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">ERR</span>: printf(<span class="string">"error\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">BIN</span>: printf(<span class="string">"binary\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">OCT</span>: printf(<span class="string">"octal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">DEC</span>: printf(<span class="string">"decimal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">HEX</span>: printf(<span class="string">"hexadecimal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转化为 <code>.c</code> 文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@yyl RE2C]</span># <span class="selector-tag">re2c</span> <span class="selector-tag">integer</span><span class="selector-class">.l</span> <span class="selector-tag">-o</span> <span class="selector-tag">integer</span><span class="selector-class">.c</span></span><br></pre></td></tr></table></figure></p><p>编译为可执行文件：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># g++ integer.c -o integer</span></span><br></pre></td></tr></table></figure></p><p>测试结果:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 0b10</span></span><br><span class="line"><span class="built_in">binary</span></span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 1024</span></span><br><span class="line">decimal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 0x100a</span></span><br><span class="line">hexadecimal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 07</span></span><br><span class="line">octal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer abc</span></span><br><span class="line">error</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta">#</span></span><br></pre></td></tr></table></figure></p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>a = b + c * 2<br><img src="/images/word_tree.png" alt=""></p><h4 id="巴科斯范式"><a href="#巴科斯范式" class="headerlink" title="巴科斯范式"></a>巴科斯范式</h4><p><img src="/images/word_bksfs.png" alt=""></p><h4 id="使用bison做语法分析"><a href="#使用bison做语法分析" class="headerlink" title="使用bison做语法分析"></a>使用bison做语法分析</h4><p>官网：<a href="http://ftp.gnu.org/gnu/bison/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/bison/</a></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//ftp.gnu.org/gnu/bison/bison-3.4.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -zxvf bison-<span class="number">3.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">cd bison-<span class="number">3.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p><code>./configure</code> 途中出现报错信息：<code>checking for GNU M4 that supports accurate traces... configure: error: no acceptable m4 could be found in $PATH.</code></p><p><code>yum install -y m4</code> 安装m4 问题解决。</p><p>继续：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></p><p>安装完毕！</p><h3 id="实战-：-计算器"><a href="#实战-：-计算器" class="headerlink" title="实战 ： 计算器"></a>实战 ： 计算器</h3><p>编写文件 <code>calc.y</code> 内容如下：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line"><span class="comment">/* BISON Declarations */</span></span><br><span class="line">%token NUM</span><br><span class="line">%left <span class="string">'-'</span> <span class="string">'+'</span></span><br><span class="line">%left <span class="string">'*'</span> <span class="string">'/'</span></span><br><span class="line">%left NEG     <span class="comment">/* negation--unary minus */</span></span><br><span class="line">%right <span class="string">'^'</span>    <span class="comment">/* exponentiation        */</span></span><br><span class="line"><span class="comment">/* Grammar follows */</span></span><br><span class="line">%%</span><br><span class="line">input:     <span class="comment">/*  empty string */</span></span><br><span class="line">                | input line</span><br><span class="line">;</span><br><span class="line">line:      <span class="string">'\n'</span></span><br><span class="line">            | <span class="keyword">exp</span>  <span class="string">'\n'</span>   &#123; printf (<span class="string">"\t%.10g\n"</span>, $1); &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">exp</span>:       NUM                &#123; $$ = $1;           &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'+'</span> <span class="keyword">exp</span>         &#123; $$ = $1 + $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'-'</span> <span class="keyword">exp</span>         &#123; $$ = $1 - $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'*'</span> <span class="keyword">exp</span>         &#123; $$ = $1 * $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'/'</span> <span class="keyword">exp</span>         &#123; $$ = $1 / $3;      &#125;</span><br><span class="line">        | <span class="string">'-'</span> <span class="keyword">exp</span>  %prec NEG  &#123; $$ = -$2;          &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'^'</span> <span class="keyword">exp</span>         &#123; $$ = <span class="keyword">pow</span> ($1, $3); &#125;</span><br><span class="line">        | <span class="string">'('</span> <span class="keyword">exp</span> <span class="string">')'</span>         &#123; $$ = $2;           &#125;</span><br><span class="line">;</span><br><span class="line">%%</span><br><span class="line">yylex ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="comment">/* skip white space */</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar ()) == <span class="string">' '</span> || c == <span class="string">'\t'</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">/* process numbers  */</span></span><br><span class="line">    <span class="keyword">if</span> (c== <span class="string">'.'</span> || isdigit (c))</span><br><span class="line">    &#123;</span><br><span class="line">        ungetc (c, stdin);</span><br><span class="line">        scanf (<span class="string">"%lf"</span>, &amp;yylval);</span><br><span class="line">        <span class="keyword">return</span> NUM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* return end-of-file */</span></span><br><span class="line">    <span class="keyword">if</span> (c == EOF)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* return single chars */</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">yyerror (s) <span class="comment">/* Called by yyparse on error */</span></span><br><span class="line">    char *s;</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"%s\n"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line">main ()</span><br><span class="line">&#123;</span><br><span class="line">    yyparse ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转换为 <code>.c</code> 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@yyl BASION]</span># <span class="selector-tag">bison</span> <span class="selector-tag">-d</span> <span class="selector-tag">calc</span><span class="selector-class">.y</span> <span class="selector-tag">-o</span> <span class="selector-tag">calc</span><span class="selector-class">.c</span></span><br></pre></td></tr></table></figure><p>编译为可执行文件：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> BASION]<span class="meta"># gcc -lm calc.c -o calc</span></span><br></pre></td></tr></table></figure></p><h3 id="php7中的词法分析和语法分析"><a href="#php7中的词法分析和语法分析" class="headerlink" title="php7中的词法分析和语法分析"></a>php7中的词法分析和语法分析</h3><p>Zend/zend_language_scanner.l<br>Zend/zens_language_parser.y</p><h3 id="AST-相关数据结构"><a href="#AST-相关数据结构" class="headerlink" title="AST 相关数据结构"></a>AST 相关数据结构</h3><p>_zend_ast<br>_zend_ast_list<br>_zend_ast_zval<br>_zend_ast_decl</p><p>zendParse-&gt;zendlex-&gt;switch(yyn)</p><h3 id="生成的AST"><a href="#生成的AST" class="headerlink" title="生成的AST"></a>生成的AST</h3><p>$a = 1 AST 语法树</p><p><img src="/images/ast_graph.png" alt=""></p><h3 id="Opcode相关的数据结构"><a href="#Opcode相关的数据结构" class="headerlink" title="Opcode相关的数据结构"></a>Opcode相关的数据结构</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">struct _zend_op &#123;</span><br><span class="line">const void *handler<span class="comment">;</span></span><br><span class="line">znode_op op1<span class="comment">;</span></span><br><span class="line">znode_op op2<span class="comment">;</span></span><br><span class="line">znode_op result<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">zend_uchar opcode<span class="comment">;</span></span><br><span class="line">zend_uchar op1_type<span class="comment">;</span></span><br><span class="line">zend_uchar op2_type<span class="comment">;</span></span><br><span class="line">zend_uchar result_type<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct _zend_op_array&#123;</span><br><span class="line">    ...</span><br><span class="line">    uint32_t last<span class="comment">;</span></span><br><span class="line">zend_op *opcodes<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int last_var<span class="comment">;</span></span><br><span class="line">uint32_t T<span class="comment">;</span></span><br><span class="line">zend_string **vars<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct _zend_execute_data &#123;</span><br><span class="line">    const zend_op       *opline<span class="comment">;           /* executed opline                */</span></span><br><span class="line">zend_execute_data   *call<span class="comment">;             /* current call                   */</span></span><br><span class="line">...</span><br><span class="line">zend_array          *symbol_table<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line">struct _zend_vm_stack &#123;</span><br><span class="line">zval *top<span class="comment">;</span></span><br><span class="line">zval *end<span class="comment">;</span></span><br><span class="line">zend_vm_stack prev<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="zend虚拟机基础"><a href="#zend虚拟机基础" class="headerlink" title="zend虚拟机基础"></a>zend虚拟机基础</h3><p><img src="/images/zend.png" alt=""></p><h3 id="break-语法的AST、栈、符号表和指令集"><a href="#break-语法的AST、栈、符号表和指令集" class="headerlink" title="break 语法的AST、栈、符号表和指令集"></a>break 语法的AST、栈、符号表和指令集</h3><p>先写一个测试脚本 break.php<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="gdb调试过程："><a href="#gdb调试过程：" class="headerlink" title="gdb调试过程："></a>gdb调试过程：</h4><p><img src="/images/break_gdb_ast.png" alt=""></p><h4 id="抽象语法树："><a href="#抽象语法树：" class="headerlink" title="抽象语法树："></a>抽象语法树：</h4><p><img src="/images/break_ast.png" alt=""></p><h4 id="栈、符号表和常量"><a href="#栈、符号表和常量" class="headerlink" title="栈、符号表和常量"></a>栈、符号表和常量</h4><p><img src="/images/break_stack.png" alt=""></p><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/break_order.png" alt=""></p><h3 id="实战-文件的引入实现"><a href="#实战-文件的引入实现" class="headerlink" title="实战 文件的引入实现"></a>实战 文件的引入实现</h3><ul><li>include语法</li><li>require语法</li><li>include_once语法</li><li>require_once语法</li></ul><p>先编写两个文件 1.php<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">1</span>;</span></span><br></pre></td></tr></table></figure></p><p>2.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"1.php"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">2</span>;</span></span><br></pre></td></tr></table></figure><h4 id="include-gdb"><a href="#include-gdb" class="headerlink" title="include gdb"></a>include gdb</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0</span>x7f85f8: file Zend/zend_language_scanner.l, line <span class="number">578</span>.</span><br><span class="line">(gdb) r <span class="number">2</span>.php</span><br><span class="line">Starting program: /usr/local/bin/php71 <span class="number">2</span>.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib64/libthread_db.so.1"</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, zend_compile (<span class="attr">type=2)</span> at Zend/zend_language_scanner.l:<span class="number">578</span></span><br><span class="line"><span class="number">578</span>zend_op_array *<span class="attr">op_array</span> = NULL;</span><br><span class="line">(gdb)</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">579</span>zend_bool <span class="attr">original_in_compilation</span> = CG(in_compilation);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">581</span>CG(in_compilation) = <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">582</span>CG(ast) = NULL;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">583</span>CG(ast_arena) = zend_arena_create(<span class="number">1024</span> * <span class="number">32</span>);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">585</span><span class="keyword">if</span> (!zendparse()) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">586</span>int <span class="attr">last_lineno</span> = CG(zend_lineno);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">589</span>zend_op_array *<span class="attr">original_active_op_array</span> = CG(active_op_array);</span><br><span class="line">(gdb) p compiler_globals.ast</span><br><span class="line">$<span class="number">1</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a018</span><br><span class="line">(gdb) p *compiler_globals.ast</span><br><span class="line">$<span class="number">2</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list)compiler_globals.ast</span><br><span class="line">Structure has no component named operator*.</span><br><span class="line">(gdb) p *(zend_ast_list*)compiler_globals.ast</span><br><span class="line">$<span class="number">3</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">children</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a060&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">4</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a060</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">5</span> = &#123;<span class="attr">kind</span> = <span class="number">269</span>, <span class="attr">attr</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a048&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">6</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a048</span><br><span class="line">(gdb) p *$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">7</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e5eac0&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">8</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318873792</span>, <span class="attr">dval</span> = <span class="number">6.9533474343345501</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">str</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ww</span> = &#123;</span><br><span class="line">        <span class="attr">w1</span> = <span class="number">4125485760</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">type_flags</span> = <span class="number">20</span> '\<span class="number">024</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;,</span><br><span class="line">      <span class="attr">type_info</span> = <span class="number">5126</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>,</span><br><span class="line">      <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">9</span> = (zend_string *) <span class="number">0</span>x7ffff5e5eac0</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">10</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">1</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">6</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">0</span>, <span class="attr">len</span> = <span class="number">5</span>, <span class="attr">val</span> = <span class="string">"1"</span>&#125;</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str.val@<span class="number">5</span></span><br><span class="line">$<span class="number">11</span> = <span class="string">"1.php"</span></span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">12</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a098</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">13</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x1&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list*)$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">14</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">children</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a088&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">15</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a088</span><br><span class="line">(gdb) p *$<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">16</span> = &#123;<span class="attr">kind</span> = <span class="number">282</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a070&#125;&#125;</span><br><span class="line">(gdb) p *$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">17</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">18</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2,</span><br><span class="line">      <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2, <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>',</span><br><span class="line">        <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">3</span>, <span class="attr">cache_slot</span> = <span class="number">3</span>, <span class="attr">lineno</span> = <span class="number">3</span>,</span><br><span class="line">      <span class="attr">num_args</span> = <span class="number">3</span>, <span class="attr">fe_pos</span> = <span class="number">3</span>, <span class="attr">fe_iter_idx</span> = <span class="number">3</span>, <span class="attr">access_flags</span> = <span class="number">3</span>, <span class="attr">property_guard</span> = <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="include-AST"><a href="#include-AST" class="headerlink" title="include AST"></a>include AST</h4><p><img src="/images/include_ast.png" alt=""></p><h4 id="栈-符号表-和常量"><a href="#栈-符号表-和常量" class="headerlink" title="栈 符号表 和常量"></a>栈 符号表 和常量</h4><p><img src="/images/include_stack.png" alt=""></p><h4 id="指令集-1"><a href="#指令集-1" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/include_order.png" alt=""></p><h3 id="条件判断语法实现"><a href="#条件判断语法实现" class="headerlink" title="条件判断语法实现"></a>条件判断语法实现</h3><p>先编写文件 <code>condition.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = <span class="string">"php7"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($a == <span class="string">"php5"</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP5 is good.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">elseif</span>($a == <span class="string">'php7'</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP7 is better.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Hoho~ PHP is the best language!\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="AST-语法树"><a href="#AST-语法树" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/if_ast.png" alt=""></p><h4 id="栈-符号表-常量"><a href="#栈-符号表-常量" class="headerlink" title="栈 符号表 常量"></a>栈 符号表 常量</h4><p><img src="/images/if_stack.png" alt=""></p><h4 id="指令集-2"><a href="#指令集-2" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/if_order_1.png" alt=""><br><img src="/images/if_order_2.png" alt=""></p><h3 id="实战：循环语法实现"><a href="#实战：循环语法实现" class="headerlink" title="实战：循环语法实现"></a>实战：循环语法实现</h3><ul><li>foreach 语法</li><li>while 语法</li><li>for 语法</li><li>do while 语法</li></ul><p>先编写文件 <code>foreach.php</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = [<span class="number">1</span>, <span class="number">2</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $k =&gt; $v)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $v;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="AST-语法树-1"><a href="#AST-语法树-1" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/foreach_ast.png" alt=""></p><h4 id="栈-符号表-和-常量"><a href="#栈-符号表-和-常量" class="headerlink" title="栈 符号表 和 常量"></a>栈 符号表 和 常量</h4><p><img src="/images/foreach_stack.png" alt=""></p><h4 id="指令集-3"><a href="#指令集-3" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/foreach_order_1.png" alt=""><br><img src="/images/foreach_order_2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解释型语言也需要编译吗？&quot;&gt;&lt;a href=&quot;#解释型语言也需要编译吗？&quot; class=&quot;headerlink&quot; title=&quot;解释型语言也需要编译吗？&quot;&gt;&lt;/a&gt;解释型语言也需要编译吗？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/language.png
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 7 生命周期</title>
    <link href="http://yulongphp.github.io/2018/12/28/php%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yulongphp.github.io/2018/12/28/php生命周期/</id>
    <published>2018-12-28T04:56:19.000Z</published>
    <updated>2019-06-06T04:15:40.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php生命周期"><a href="#php生命周期" class="headerlink" title="php生命周期"></a>php生命周期</h3><h3 id="cli生命周期"><a href="#cli生命周期" class="headerlink" title="cli生命周期"></a>cli生命周期</h3><p>定义：<img src="/images/cli_life.png" alt=""></p><h3 id="模块初始化部分函数调用图"><a href="#模块初始化部分函数调用图" class="headerlink" title="模块初始化部分函数调用图"></a>模块初始化部分函数调用图</h3><p><img src="/images/model_startup.png" alt=""></p><h3 id="php-request-startup-部分函数调用图"><a href="#php-request-startup-部分函数调用图" class="headerlink" title="php_request_startup 部分函数调用图"></a>php_request_startup 部分函数调用图</h3><ul><li>php_request_startup</li><li>php_output_activate      1. 重置输出全局并设置输出处理程序的堆栈</li><li>zend_activate<ul><li>gc_reset               2. 重置垃圾回收</li><li>init_compiler          3. 初始化编译器</li><li>init_executor          4. 初始化执行器</li><li>startup_scanner        5. 初始化扫描器</li></ul></li><li>sapi_activate            6. 调用sapi_module里面的activate方法</li><li>zend_signal_activate     7. 对信号进行处理（空函数）</li><li>zend_set_timeout         8. 设置超时时间</li><li>php_hash_environment     9. 初始化相关全局变量</li><li>zend_activate_modules    10. 调用request_startup_func激活模块</li></ul><h3 id="执行阶段调用"><a href="#执行阶段调用" class="headerlink" title="执行阶段调用"></a>执行阶段调用</h3><p><img src="/images/excutor_step.png" alt=""></p><h3 id="请求关闭阶段"><a href="#请求关闭阶段" class="headerlink" title="请求关闭阶段"></a>请求关闭阶段</h3><p><img src="/images/php_request_shutdown.png" alt=""></p><h3 id="模块关闭阶段"><a href="#模块关闭阶段" class="headerlink" title="模块关闭阶段"></a>模块关闭阶段</h3><p><img src="/images/model_shutdown.png" alt=""></p><h3 id="fpm的三种模式"><a href="#fpm的三种模式" class="headerlink" title="fpm的三种模式"></a>fpm的三种模式</h3><ul><li>pm=static (静态模式)  pm.max_children指定work子进程数量</li><li>pm=dynamic(动态模式)  wokr子进程数量是动态的 由pm.start_servers控制默认启动进程 最大子进程数量由 pm.max_children控制</li><li>pm=ondemand(按需要的) </li></ul><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><ul><li>socket</li><li>bind</li><li>listen</li><li>accept</li></ul><p>kill SIGUSR1 php-fpm  线上日志分割（重新持有日志文件句柄）</p><p>kill SIGUSR2 php-fpm    平滑重载所有work进程 重新载入配置文件 和 二进制文件   修改配置文件平滑重启 php平滑升级</p><p>kill -9 杀死php-fpm master进程  work进程依然能够提供服务<br>因为php-fpm master主进程只负责管理工作（监听work子进程挂掉以后 重新拉起work子进程），并不会处理请求<br>请求是有work进程直接处理的  所以强杀master进程 work进程依然能对外提供服务</p><p>master进程不会对外服务  只负责管理work进程</p><h3 id="fpm的生命周期"><a href="#fpm的生命周期" class="headerlink" title="fpm的生命周期"></a>fpm的生命周期</h3><p>fpm常驻内存进程</p><p><img src="/images/fpm_life.png" alt=""></p><p>504  nginx上游返回数据超过nginx设置的超时时间 nginx等不及了 就给客户端返回了504<br>502  连不上fpm 或者是fpm应为某种原因把链接断掉了 </p><h3 id="详解FastCGI协议"><a href="#详解FastCGI协议" class="headerlink" title="详解FastCGI协议"></a>详解FastCGI协议</h3><p><img src="/images/fastcgi.png" alt=""></p><p>fastcgi_in_out<br><img src="/images/fastcgi_in_out.png" alt=""></p><p>mac头<br>ip头<br>tcp头</p><p>_fcgi_header  contentlength + paddinglength 一定是8的倍数</p><p>抓包一次完整的fastcgi请求包<br><img src="/images/fast_cgi_dump.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i lo<span class="built_in"> port </span>9000 -XX -S</span><br></pre></td></tr></table></figure><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">14:01:44.495551 IP localhost.49472 &gt; localhost.cslistener: Flags [S], seq 1361465525, win 43690, options [mss 65495,sackOK,TS val 75365109 ecr 0,nop,wscale 7], length 0</span><br><span class="line">0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.</span><br><span class="line">0x0010:  003c aa40 4000 4006 9279 7f00 0001 7f00  .&lt;.@@.@..y......</span><br><span class="line">0x0020:  0001 c140 2328 5126 50b5 0000 0000 a002  ...@<span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">Q</span>&amp;<span class="variable">P</span>.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  <span class="variable">aaaa</span> <span class="variable">fe30</span> 0000 0204 <span class="variable">ffd7</span> 0402 080<span class="variable">a</span> 047<span class="variable">d</span>  ...0...........&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf5</span> 0000 0000 0103 0307                 ..........</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495577 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">S</span>.], <span class="variable">seq</span> 3487476334, <span class="variable">ack</span> 1361465526, <span class="variable">win</span> 43690, <span class="variable">options</span> [<span class="variable">mss</span> 65495,<span class="variable">sackOK</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365109,<span class="variable">nop</span>,<span class="variable">wscale</span> 7], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  003<span class="variable">c</span> 0000 4000 4006 3<span class="variable">cba</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .&lt;..@.@.&lt;.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aa6e</span> 5126 50<span class="variable">b6</span> <span class="variable">a012</span>  ..#(.@...<span class="variable">nQ</span>&amp;<span class="variable">P</span>...</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  <span class="variable">aaaa</span> <span class="variable">fe30</span> 0000 0204 <span class="variable">ffd7</span> 0402 080<span class="variable">a</span> 047<span class="variable">d</span>  ...0...........&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 047<span class="variable">d</span> <span class="variable">faf5</span> 0103 0307                 ...&#125;......</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495593 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [.], <span class="variable">ack</span> 3487476335, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 <span class="variable">aa41</span> 4000 4006 9280 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4.<span class="variable">A</span>@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 50<span class="variable">b6</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 8010  ...@#(<span class="variable">Q</span>&amp;<span class="variable">P</span>....<span class="variable">o</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495658 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [<span class="variable">P</span>.], <span class="variable">seq</span> 1361465526:1361466462, <span class="variable">ack</span> 3487476335, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 936</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  03<span class="variable">dc</span> <span class="variable">aa42</span> 4000 4006 8<span class="variable">ed7</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  ...<span class="variable">B</span>@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 50<span class="variable">b6</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 8018  ...@#(<span class="variable">Q</span>&amp;<span class="variable">P</span>....<span class="variable">o</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 01<span class="variable">d1</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.........&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 0101 0001 0008 0000 0001 0000 0000  ................</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0050</span>:  0000 0104 0001 0380 0000 0<span class="variable">f12</span> 5343 5249  ............<span class="variable">SCRI</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0060</span>:  5054 5<span class="variable">f46</span> 494<span class="variable">c</span> 454<span class="variable">e</span> 414<span class="variable">d</span> 452<span class="variable">f</span> 7661 722<span class="variable">f</span>  <span class="variable">PT_FILENAME</span>/<span class="variable">var</span>/</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0070</span>:  7777 772<span class="variable">f</span> 696<span class="variable">e</span> 6465 782<span class="variable">e</span> 7068 700<span class="variable">c</span> 0051  <span class="variable">www</span>/<span class="variable">index</span>.<span class="variable">php</span>..<span class="variable">Q</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0080</span>:  5545 5259 5<span class="variable">f53</span> 5452 494<span class="variable">e</span> 470<span class="variable">e</span> 0352 4551  <span class="variable">UERY_STRING</span>..<span class="variable">REQ</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0090</span>:  5545 5354 5<span class="variable">f4d</span> 4554 484<span class="variable">f</span> 4447 4554 0<span class="variable">c00</span>  <span class="variable">UEST_METHODGET</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00a0</span>:  434<span class="variable">f</span> 4<span class="variable">e54</span> 454<span class="variable">e</span> 545<span class="variable">f</span> 5459 5045 0<span class="variable">e00</span> 434<span class="variable">f</span>  <span class="variable">CONTENT_TYPE</span>..<span class="variable">CO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00b0</span>:  4<span class="variable">e54</span> 454<span class="variable">e</span> 545<span class="variable">f</span> 4<span class="variable">c45</span> 4<span class="variable">e47</span> 5448 0<span class="variable">b0a</span> 5343  <span class="variable">NTENT_LENGTH</span>..<span class="variable">SC</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00c0</span>:  5249 5054 5<span class="variable">f4e</span> 414<span class="variable">d</span> 452<span class="variable">f</span> 696<span class="variable">e</span> 6465 782<span class="variable">e</span>  <span class="variable">RIPT_NAME</span>/<span class="variable">index</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00d0</span>:  7068 700<span class="variable">b</span> 0<span class="variable">a52</span> 4551 5545 5354 5<span class="variable">f55</span> 5249  <span class="variable">php</span>..<span class="variable">REQUEST_URI</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00e0</span>:  2<span class="variable">f69</span> 6<span class="variable">e64</span> 6578 2<span class="variable">e70</span> 6870 0<span class="variable">c0a</span> 444<span class="variable">f</span> 4355  /<span class="variable">index</span>.<span class="variable">php</span>..<span class="variable">DOCU</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00f0</span>:  4<span class="variable">d45</span> 4<span class="variable">e54</span> 5<span class="variable">f55</span> 5249 2<span class="variable">f69</span> 6<span class="variable">e64</span> 6578 2<span class="variable">e70</span>  <span class="variable">MENT_URI</span>/<span class="variable">index</span>.<span class="variable">p</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0100</span>:  6870 0<span class="variable">d08</span> 444<span class="variable">f</span> 4355 4<span class="variable">d45</span> 4<span class="variable">e54</span> 5<span class="variable">f52</span> 4<span class="variable">f4f</span>  <span class="variable">hp</span>..<span class="variable">DOCUMENT_ROO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0110</span>:  542<span class="variable">f</span> 7661 722<span class="variable">f</span> 7777 770<span class="variable">f</span> 0853 4552 5645  <span class="variable">T</span>/<span class="variable">var</span>/<span class="variable">www</span>..<span class="variable">SERVE</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0120</span>:  525<span class="variable">f</span> 5052 4<span class="variable">f54</span> 4<span class="variable">f43</span> 4<span class="variable">f4c</span> 4854 5450 2<span class="variable">f31</span>  <span class="variable">R_PROTOCOLHTTP</span>/1</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0130</span>:  2<span class="variable">e31</span> 0<span class="variable">e04</span> 5245 5155 4553 545<span class="variable">f</span> 5343 4845  .1..<span class="variable">REQUEST_SCHE</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0140</span>:  4<span class="variable">d45</span> 6874 7470 1107 4741 5445 5741 595<span class="variable">f</span>  <span class="variable">MEhttp</span>..<span class="variable">GATEWAY_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0150</span>:  494<span class="variable">e</span> 5445 5246 4143 4543 4749 2<span class="variable">f31</span> 2<span class="variable">e31</span>  <span class="variable">INTERFACECGI</span>/1.1</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0160</span>:  0<span class="variable">f0c</span> 5345 5256 4552 5<span class="variable">f53</span> 4<span class="variable">f46</span> 5457 4152  ..<span class="variable">SERVER_SOFTWAR</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0170</span>:  456<span class="variable">e</span> 6769 6<span class="variable">e78</span> 2<span class="variable">f31</span> 2<span class="variable">e31</span> 362<span class="variable">e</span> 300<span class="variable">b</span> 0<span class="variable">b52</span>  <span class="variable">Enginx</span>/1.16.0..<span class="variable">R</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0180</span>:  454<span class="variable">d</span> 4<span class="variable">f54</span> 455<span class="variable">f</span> 4144 4452 3130 2<span class="variable">e32</span> 3131  <span class="variable">EMOTE_ADDR10</span>.211</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0190</span>:  2<span class="variable">e35</span> 352<span class="variable">e</span> 320<span class="variable">b</span> 0552 454<span class="variable">d</span> 4<span class="variable">f54</span> 455<span class="variable">f</span> 504<span class="variable">f</span>  .55.2..<span class="variable">REMOTE_PO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01a0</span>:  5254 3634 3537 350<span class="variable">b</span> 0<span class="variable">c53</span> 4552 5645 525<span class="variable">f</span>  <span class="variable">RT64575</span>..<span class="variable">SERVER_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01b0</span>:  4144 4452 3130 2<span class="variable">e32</span> 3131 2<span class="variable">e35</span> 352<span class="variable">e</span> 3131  <span class="variable">ADDR10</span>.211.55.11</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01c0</span>:  0<span class="variable">b02</span> 5345 5256 4552 5<span class="variable">f50</span> 4<span class="variable">f52</span> 5438 300<span class="variable">b</span>  ..<span class="variable">SERVER_PORT80</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01d0</span>:  0953 4552 5645 525<span class="variable">f</span> 4<span class="variable">e41</span> 4<span class="variable">d45</span> 6<span class="variable">c6f</span> 6361  .<span class="variable">SERVER_NAMEloca</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01e0</span>:  6<span class="variable">c68</span> 6<span class="variable">f73</span> 740<span class="variable">f</span> 0352 4544 4952 4543 545<span class="variable">f</span>  <span class="variable">lhost</span>..<span class="variable">REDIRECT_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01f0</span>:  5354 4154 5553 3230 3009 0<span class="variable">c48</span> 5454 505<span class="variable">f</span>  <span class="variable">STATUS200</span>..<span class="variable">HTTP_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0200</span>:  484<span class="variable">f</span> 5354 3130 2<span class="variable">e32</span> 3131 2<span class="variable">e35</span> 352<span class="variable">e</span> 3131  <span class="variable">HOST10</span>.211.55.11</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0210</span>:  0<span class="variable">f0a</span> 4854 5450 5<span class="variable">f43</span> 4<span class="variable">f4e</span> 4<span class="variable">e45</span> 4354 494<span class="variable">f</span>  ..<span class="variable">HTTP_CONNECTIO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0220</span>:  4<span class="variable">e6b</span> 6565 702<span class="variable">d</span> 616<span class="variable">c</span> 6976 650<span class="variable">b</span> 0848 5454  <span class="variable">Nkeep</span>-<span class="variable">alive</span>..<span class="variable">HTT</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0230</span>:  505<span class="variable">f</span> 5052 4147 4<span class="variable">d41</span> 6<span class="variable">e6f</span> 2<span class="variable">d63</span> 6163 6865  <span class="variable">P_PRAGMAno</span>-<span class="variable">cache</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0240</span>:  1208 4854 5450 5<span class="variable">f43</span> 4143 4845 5<span class="variable">f43</span> 4<span class="variable">f4e</span>  ..<span class="variable">HTTP_CACHE_CON</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0250</span>:  5452 4<span class="variable">f4c</span> 6<span class="variable">e6f</span> 2<span class="variable">d63</span> 6163 6865 1<span class="variable">e01</span> 4854  <span class="variable">TROLno</span>-<span class="variable">cache</span>..<span class="variable">HT</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0260</span>:  5450 5<span class="variable">f55</span> 5047 5241 4445 5<span class="variable">f49</span> 4<span class="variable">e53</span> 4543  <span class="variable">TP_UPGRADE_INSEC</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0270</span>:  5552 455<span class="variable">f</span> 5245 5155 4553 5453 310<span class="variable">f</span> 7948  <span class="variable">URE_REQUESTS1</span>.<span class="variable">yH</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0280</span>:  5454 505<span class="variable">f</span> 5553 4552 5<span class="variable">f41</span> 4745 4<span class="variable">e54</span> 4<span class="variable">d6f</span>  <span class="variable">TTP_USER_AGENTMo</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0290</span>:  7<span class="variable">a69</span> 6<span class="variable">c6c</span> 612<span class="variable">f</span> 352<span class="variable">e</span> 3020 284<span class="variable">d</span> 6163 696<span class="variable">e</span>  <span class="variable">zilla</span>/5.0.(<span class="variable">Macin</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x02a0</span>:  746<span class="variable">f</span> 7368 3<span class="variable">b20</span> 496<span class="variable">e</span> 7465 6<span class="variable">c20</span> 4<span class="variable">d61</span> 6320  <span class="variable">tosh</span>;.<span class="variable">Intel</span>.<span class="variable">Mac</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x02b0</span>:  4<span class="variable">f53</span> 2058 2031 305<span class="variable">f</span> 3133 5<span class="variable">f36</span> 2920 4170  <span class="variable">OS</span>.<span class="variable">X</span>.10<span class="variable">_13_6</span>)</span></span>.Ap</span><br><span class="line">0x02c0:  706c 6557 6562 4b69 742f 3533 372e 3336  pleWebKit/537.36</span><br><span class="line">0x02d0:  2028 4b48 544d 4c2c 206c 696b 6520 4765  .(KHTML,.like.Ge</span><br><span class="line">0x02e0:  636b 6f29 2043 6872 6f6d 652f 3734 2e30  cko).Chrome/74.0</span><br><span class="line">0x02f0:  2e33 3732 392e 3136 3920 5361 6661 7269  .3729.169.Safari</span><br><span class="line">0x0300:  2f35 3337 2e33 360b 7648 5454 505f 4143  /537.36.vHTTP_AC</span><br><span class="line">0x0310:  4345 5054 7465 7874 2f68 746d 6c2c 6170  CEPTtext/html,ap</span><br><span class="line">0x0320:  706c 6963 6174 696f 6e2f 7868 746d 6c2b  plication/xhtml+</span><br><span class="line">0x0330:  786d 6c2c 6170 706c 6963 6174 696f 6e2f  xml,application/</span><br><span class="line">0x0340:  786d 6c3b 713d 302e 392c 696d 6167 652f  xml;q=0.9,image/</span><br><span class="line">0x0350:  7765 6270 2c69 6d61 6765 2f61 706e 672c  webp,image/apng,</span><br><span class="line">0x0360:  2a2f 2a3b 713d 302e 382c 6170 706c 6963  */*;q=0.8,applic</span><br><span class="line">0x0370:  6174 696f 6e2f 7369 676e 6564 2d65 7863  ation/signed-exc</span><br><span class="line">0x0380:  6861 6e67 653b 763d 6233 140d 4854 5450  hange;v=b3..HTTP</span><br><span class="line">0x0390:  5f41 4343 4550 545f 454e 434f 4449 4e47  _ACCEPT_ENCODING</span><br><span class="line">0x03a0:  677a 6970 2c20 6465 666c 6174 6514 1748  gzip,.deflate..H</span><br><span class="line">0x03b0:  5454 505f 4143 4345 5054 5f4c 414e 4755  TTP_ACCEPT_LANGU</span><br><span class="line">0x03c0:  4147 457a 682d 434e 2c7a 683b 713d 302e  AGEzh-CN,zh;q=0.</span><br><span class="line">0x03d0:  392c 656e 3b71 3d30 2e38 0104 0001 0000  9,en;q=0.8......</span><br><span class="line">0x03e0:  0000 0105 0001 0000 0000                 ..........</span><br><span class="line">14:01:44.495667 IP localhost.cslistener &gt; localhost.49472: Flags [.], ack 1361466462, win 356, options [nop,nop,TS val 75365110 ecr 75365110], length 0</span><br><span class="line">0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.</span><br><span class="line">0x0010:  0034 5099 4000 4006 ec28 7f00 0001 7f00  .4P.@.@..(......</span><br><span class="line">0x0020:  0001 2328 c140 cfde aa6f 5126 545e 8010  ..<span class="function"><span class="keyword">#</span><span class="params">(.@...<span class="variable">oQ</span>&amp;<span class="variable">T</span>^..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0164 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">d</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498070 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">P</span>.], <span class="variable">seq</span> 3487476335:3487476439, <span class="variable">ack</span> 1361466462, <span class="variable">win</span> 356, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 104</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  009<span class="variable">c</span> 509<span class="variable">a</span> 4000 4006 <span class="variable">ebbf</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  ..<span class="variable">P</span>.@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 5126 545<span class="variable">e</span> 8018  ..#(.@...<span class="variable">oQ</span>&amp;<span class="variable">T</span>^..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0164 <span class="variable">fe90</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf8</span> 047<span class="variable">d</span>  .<span class="variable">d</span>.........&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 0106 0001 0050 0000 582<span class="variable">d</span> 506<span class="variable">f</span> 7765  .......<span class="variable">P</span>..<span class="variable">X</span>-<span class="variable">Powe</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0050</span>:  7265 642<span class="variable">d</span> 4279 3<span class="variable">a20</span> 5048 502<span class="variable">f</span> 372<span class="variable">e</span> 312<span class="variable">e</span>  <span class="variable">red</span>-<span class="variable">By</span>:.<span class="variable">PHP</span>/7.1.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0060</span>:  300<span class="variable">d</span> 0<span class="variable">a43</span> 6<span class="variable">f6e</span> 7465 6<span class="variable">e74</span> 2<span class="variable">d74</span> 7970 653<span class="variable">a</span>  0..<span class="variable">Content</span>-<span class="variable">type</span>:</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0070</span>:  2074 6578 742<span class="variable">f</span> 6874 6<span class="variable">d6c</span> 3<span class="variable">b20</span> 6368 6172  .<span class="variable">text</span>/<span class="variable">html</span>;.<span class="variable">char</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0080</span>:  7365 743<span class="variable">d</span> 5554 462<span class="variable">d</span> 380<span class="variable">d</span> 0<span class="variable">a0d</span> 0<span class="variable">a48</span> 656<span class="variable">c</span>  <span class="variable">set</span>=<span class="variable">UTF</span>-8....<span class="variable">Hel</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0090</span>:  6<span class="variable">c6f</span> 2057 6<span class="variable">f72</span> 6<span class="variable">c64</span> 210<span class="variable">a</span> 0103 0001 0008  <span class="variable">lo</span>.<span class="variable">World</span>!.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00a0</span>:  0000 0000 0000 0000 0000                 ..........</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498088 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [.], <span class="variable">ack</span> 3487476439, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365112], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 <span class="variable">aa43</span> 4000 4006 927<span class="variable">e</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4.<span class="variable">C</span>@.@..~......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 545<span class="variable">e</span> <span class="variable">cfde</span> <span class="variable">aad7</span> 8010  ...@#(<span class="variable">Q</span>&amp;<span class="variable">T</span>^......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf8</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf8</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498108 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">F</span>.], <span class="variable">seq</span> 3487476439, <span class="variable">ack</span> 1361466462, <span class="variable">win</span> 356, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365112], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 509<span class="variable">b</span> 4000 4006 <span class="variable">ec26</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4<span class="variable">P</span>.@.@..&amp;......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aad7</span> 5126</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;php生命周期&quot;&gt;&lt;a href=&quot;#php生命周期&quot; class=&quot;headerlink&quot; title=&quot;php生命周期&quot;&gt;&lt;/a&gt;php生命周期&lt;/h3&gt;&lt;h3 id=&quot;cli生命周期&quot;&gt;&lt;a href=&quot;#cli生命周期&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 7 新特性</title>
    <link href="http://yulongphp.github.io/2018/12/25/php7%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yulongphp.github.io/2018/12/25/php7新特性/</id>
    <published>2018-12-25T04:56:19.000Z</published>
    <updated>2019-05-24T08:33:25.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="太空船操作符-lt-gt"><a href="#太空船操作符-lt-gt" class="headerlink" title="太空船操作符 &lt;=&gt;"></a>太空船操作符 &lt;=&gt;</h3><p>太空船操作符用于比较两个表达式<br>例如 当$a小于、等于或大于$b时分别返回 -1、0、1<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span>&lt;=&gt;<span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">echo <span class="number">1</span>&lt;=&gt;<span class="number">2</span>;  <span class="comment">// -1</span></span><br><span class="line">echo <span class="number">2</span>&lt;=&gt;<span class="number">1</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare(strict_types = <span class="number">1</span>); <span class="comment">//strict_types = 1表示开启严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfInts</span><span class="params">(int <span class="rest_arg">...$ints</span>)</span>:int</span>&#123;</span><br><span class="line"><span class="keyword">return</span> array_sum($ints);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="null合并操作符"><a href="#null合并操作符" class="headerlink" title="null合并操作符"></a>null合并操作符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]) ? $_GET[<span class="string">'page'</span>] : <span class="number">0</span>;</span><br><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]) ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="常量数组"><a href="#常量数组" class="headerlink" title="常量数组"></a>常量数组</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'ANIMALS'</span>,<span class="meta">[</span><span class="string">'dog'</span>,<span class="string">'cat'</span>,<span class="string">'bird'</span><span class="meta">]</span>); // 不可修改</span><br></pre></td></tr></table></figure><h3 id="namespace-批量导入"><a href="#namespace-批量导入" class="headerlink" title="namespace 批量导入"></a>namespace 批量导入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">Space</span>\&#123;ClassA, ClassB, ClassC <span class="keyword">as</span> C&#125;;</span><br></pre></td></tr></table></figure><h3 id="throwable接口"><a href="#throwable接口" class="headerlink" title="throwable接口"></a>throwable接口</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">undefindfunc();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Error $e)&#123;</span><br><span class="line">var_dump($e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_exception_handler(</span><br><span class="line"><span class="keyword">function</span>($e)&#123;</span><br><span class="line">var_dump($e);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">undefindfunc();</span><br></pre></td></tr></table></figure><h3 id="Closure-call"><a href="#Closure-call" class="headerlink" title="Closure::call()"></a>Closure::call()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $f-&gt;call(<span class="keyword">new</span> Test);</span><br></pre></td></tr></table></figure><h3 id="intdiv-函数"><a href="#intdiv-函数" class="headerlink" title="intdiv 函数"></a>intdiv 函数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">int</span>)(<span class="number">10/3</span>)<span class="comment">;</span></span><br><span class="line">intdiv(<span class="number">10</span>, <span class="number">3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="list-的方括号写法"><a href="#list-的方括号写法" class="headerlink" title="list 的方括号写法"></a>list 的方括号写法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">arr = [1, 2, 3];</span></span><br><span class="line"><span class="meta">list($</span><span class="bash">a, <span class="variable">$b</span>, <span class="variable">$c</span>) = <span class="variable">$arr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[$</span><span class="bash">a, <span class="variable">$b</span>, <span class="variable">$c</span>] = <span class="variable">$arr</span>;</span></span><br></pre></td></tr></table></figure><h3 id="小而巧的zval"><a href="#小而巧的zval" class="headerlink" title="小而巧的zval"></a>小而巧的zval</h3><p>定义：<img src="/images/zval.png" alt=""></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef union _zend_value &#123;</span><br><span class="line">zend_long         lval<span class="comment">;// 整型</span></span><br><span class="line">double            dval<span class="comment">;// 浮点型</span></span><br><span class="line">zend_refcounted  *counted<span class="comment">;</span></span><br><span class="line">zend_string      *str<span class="comment">;              // 字符串</span></span><br><span class="line">zend_array       *arr<span class="comment">;              // 数组</span></span><br><span class="line">zend_object      *obj<span class="comment">;              // 对象</span></span><br><span class="line">zend_resource    *res<span class="comment">;              // 资源</span></span><br><span class="line">zend_reference   *ref<span class="comment">;</span></span><br><span class="line">zend_ast_ref     *ast<span class="comment">;</span></span><br><span class="line">zval             *zv<span class="comment">;</span></span><br><span class="line">void             *ptr<span class="comment">;</span></span><br><span class="line">zend_class_entry *ce<span class="comment">;                // 类</span></span><br><span class="line">zend_function    *func<span class="comment">;              // 函数</span></span><br><span class="line">struct &#123;</span><br><span class="line">uint32_t w1<span class="comment">;</span></span><br><span class="line">uint32_t w2<span class="comment">;</span></span><br><span class="line">&#125; ww<span class="comment">;</span></span><br><span class="line">&#125; zend_value<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_4(</span><br><span class="line">zend_uchar    <span class="keyword">type</span>,<span class="regexp">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line">zend_uchar    const_flags,</span><br><span class="line">zend_uchar    reserved)    /* call info <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125; v;</span></span><br><span class="line"><span class="regexp">uint32_t type_info;</span></span><br><span class="line"><span class="regexp">&#125; u1;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">union &#123;</span></span><br><span class="line"><span class="regexp">uint32_t     next;                 /</span>* hash collision chain *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     cache_slot;           /</span>* literal cache slot *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     lineno;               /</span>* line number (<span class="keyword">for</span> ast nodes) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     num_args;             /</span>* arguments number <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_pos;               /</span>* foreach position *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_iter_idx;          /</span>* foreach iterator index *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     access_flags;         /</span>* <span class="class"><span class="keyword">class</span> <span class="title">constant</span> <span class="title">access</span> <span class="title">flags</span> */</span></span><br><span class="line">uint32_t     property_guard;       <span class="regexp">/* single property guard */</span></span><br><span class="line">&#125; u2;</span><br></pre></td></tr></table></figure><p>php7.1  常量字符串refcount=0 type=6(zend_string) flags=2<br>        变量字符串refcount=1 type=6(zend_string) flags=0</p><h3 id="php7内存管理"><a href="#php7内存管理" class="headerlink" title="php7内存管理"></a>php7内存管理</h3><h4 id="从malloc谈起内存管理"><a href="#从malloc谈起内存管理" class="headerlink" title="从malloc谈起内存管理"></a>从malloc谈起内存管理</h4><p>void *ptr=malloc(size);<br>free(ptr);    // free的时候没有传size，怎么做到准确释放size大小内存的呢？</p><h4 id="malloc的实现"><a href="#malloc的实现" class="headerlink" title="malloc的实现"></a>malloc的实现</h4><p>定义：<img src="/images/malloc.png" alt=""></p><h4 id="php7内存接口"><a href="#php7内存接口" class="headerlink" title="php7内存接口"></a>php7内存接口</h4><p>void *ptr=_emalloc(size);<br>_efree(ptr);</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>定义：<img src="/images/basic_malloc.png" alt=""></p><p>内存规格</p><p>内存预分配：使用mmap分配chunk<br>内存分类：<br>    1、Small(30种规格)（size &lt;= 3KB）<br>    2、Large(3KB &lt; size &lt;= 2MB-4KB)<br>    3、Huge(size &gt; 2MB-4KB)</p><p>内存分配流程<br>定义：<img src="/images/malloc_step.png" alt=""></p><p>small内存<br>定义：<img src="/images/small_malloc.png" alt=""><br>定义：<img src="/images/small_malloc_01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;太空船操作符-lt-gt&quot;&gt;&lt;a href=&quot;#太空船操作符-lt-gt&quot; class=&quot;headerlink&quot; title=&quot;太空船操作符 &amp;lt;=&amp;gt;&quot;&gt;&lt;/a&gt;太空船操作符 &amp;lt;=&amp;gt;&lt;/h3&gt;&lt;p&gt;太空船操作符用于比较两个表达式&lt;br&gt;例如 
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记二</title>
    <link href="http://yulongphp.github.io/2018/11/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://yulongphp.github.io/2018/11/24/docker学习笔记二/</id>
    <published>2018-11-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:49:06.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。<br><a id="more"></a></p><p>在 <a href="https://store.docker.com/" target="_blank" rel="noopener">Docker Store</a> 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 <a href="https://store.docker.com/images/nginx/" target="_blank" rel="noopener">nginx</a>、<a href="https://store.docker.com/images/redis/" target="_blank" rel="noopener">redis</a>、<a href="https://store.docker.com/images/mongo/" target="_blank" rel="noopener">mongo</a>、<a href="https://store.docker.com/images/mysql/" target="_blank" rel="noopener">mysql</a>、<a href="https://store.docker.com/images/httpd/" target="_blank" rel="noopener">httpd</a>、<a href="https://store.docker.com/images/php/" target="_blank" rel="noopener">php</a>、<a href="https://store.docker.com/images/tomcat/" target="_blank" rel="noopener">tomcat</a> 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <a href="https://store.docker.com/images/node/" target="_blank" rel="noopener">node</a>、<a href="https://store.docker.com/images/openjdk/" target="_blank" rel="noopener">openjdk</a>、<a href="https://store.docker.com/images/pyhon/" target="_blank" rel="noopener">python</a>、<a href="https://store.docker.com/images/ruby/" target="_blank" rel="noopener">ruby</a>、<a href="https://store.docker.com/images/golang/" target="_blank" rel="noopener">golang</a> 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <a href="https://store.docker.com/images/ubuntu/" target="_blank" rel="noopener">ubuntu</a>、<a href="https://store.docker.com/images/debian/" target="_blank" rel="noopener">debian</a>、<a href="https://store.docker.com/images/centos/" target="_blank" rel="noopener">centos</a>、<a href="https://store.docker.com/images/fedora/" target="_blank" rel="noopener">fedora</a>、<a href="https://store.docker.com/images/alpine/" target="_blank" rel="noopener">alpine</a> 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure></p><p>如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 swarm、coreos/etcd。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p><h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h3><p>RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><p><em>shell 格式</em>：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure></li><li><p><em>exec 格式</em>：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。<br>既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gcc libc6-dev make</span></span><br><span class="line"><span class="bash">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure></li></ul><p>之前说过，Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。</p><p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p><p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p><p>上面的 Dockerfile 正确的写法应该是这样：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">RUN buildDeps=<span class="string">'gcc libc6-dev make'</span> \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; mkdir -p <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; tar -xzf redis.tar.gz -C /u</span>sr<span class="regexp">/src/</span>redis --strip-components=<span class="number">1</span> \</span><br><span class="line">    &amp;&amp; make -C <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; make -C /u</span>sr<span class="regexp">/src/</span>redis install \</span><br><span class="line">    &amp;&amp; rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm -r /u</span>sr<span class="regexp">/src/</span>redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span><br></pre></td></tr></table></figure></p><p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 RUN 对一一对应不同的命令，而是仅仅使用一个 RUN 指令，并使用 &amp;&amp; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p><p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 \ 的命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。</p><p>在 Dockerfile 文件所在目录执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t nginx:v3 .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM nginx</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e43d811ce2f4</span></span><br><span class="line">Step 2 : RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9cdc27646c7b</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 44aa4490ce2c</span></span><br><span class="line">Removing intermediate container 9cdc27646c7b</span><br><span class="line">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure></p><p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如同我们之前所说的那样，RUN 指令启动了一个容器 9cdc27646c7b，执行了所要求的命令，并最后提交了这一层 44aa4490ce2c，随后删除了所用到的这个容器 9cdc27646c7b。</p><p>这里我们使用了 docker build 命令进行镜像构建。其格式为：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径<span class="regexp">/URL/</span><span class="function">-&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。</p><h3 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h3><p>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p><p>首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p><p>当我们进行镜像构建的时候，并非所有定制都会通过 RUN 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 COPY 指令、ADD 指令等。而 docker build 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p><p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p>如果在 Dockerfile 中这么写：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app/</span></span><br></pre></td></tr></table></figure></p><p>这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。</p><p>因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p><p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code>中的这个 <code>.</code>，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p><p>如果观察 docker build 输出，我们其实已经看到了这个发送上下文的过程：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">build </span>-t nginx:<span class="built_in">v3</span> .</span><br><span class="line"><span class="symbol">Sending</span> <span class="keyword">build </span>context to Docker daemon <span class="number">2</span>.<span class="number">048</span> kB</span><br><span class="line"><span class="symbol">...</span></span><br></pre></td></tr></table></figure></p><p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 COPY /opt/xxxx /app 不工作后，于是干脆将 Dockerfile 放到了硬盘根目录去构建，结果发现 docker build 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 docker build 打包整个硬盘，这显然是使用错误。</p><p>一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p><p>那么为什么会有人误以为 . 是指定 Dockerfile 所在目录呢？这是因为在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。</p><p>这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。</p><p>当然，一般大家习惯性的会使用默认的文件名 Dockerfile，以及会将其置于镜像构建上下文目录中。</p><h3 id="其它-docker-build-的用法"><a href="#其它-docker-build-的用法" class="headerlink" title="其它 docker build 的用法"></a>其它 docker build 的用法</h3><p>直接用 Git repo 进行构建<br>或许你已经注意到了，docker build 还支持从 URL 构建，比如可以直接从 Git repo 中构建：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git#:<span class="number">8.14</span></span><br><span class="line">docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git\#:<span class="number">8.14</span></span><br><span class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">2.048</span> kB</span><br><span class="line">Step <span class="number">1</span> : FROM gitlab/gitlab-<span class="keyword">ce</span>:<span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span></span><br><span class="line"><span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span>: Pulling from gitlab/gitlab-<span class="keyword">ce</span></span><br><span class="line">aed15891ba52: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">773</span>ae8583d14: Already <span class="built_in">exists</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /8.14/，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p><h3 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker build <span class="symbol">http:</span>/<span class="regexp">/server/context</span>.tar.gz</span><br></pre></td></tr></table></figure><p>如果所给出的 URL 不是个 Git repo，而是个 tar 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p><h3 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build - &lt; Dockerfile</span></span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat Dockerfile | docker build -</span></span><br></pre></td></tr></table></figure></p><p>如果标准输入传入的是文本文件，则将其视为 Dockerfile，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 COPY 进镜像之类的事情。</p><h3 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build - &lt; context<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>如果发现标准输入的文件格式是 gzip、bzip2 以及 xz 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p><h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><p>格式：</p><ul><li>COPY [–chown=<user>:<group>] &lt;源路径&gt;… &lt;目标路径&gt;</group></user></li><li>COPY [–chown=<user>:<group>] [“&lt;源路径1&gt;”,… “&lt;目标路径&gt;”]<br>和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</group></user></li></ul><p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span> <span class="keyword">package</span>.json <span class="regexp">/usr/</span>src<span class="regexp">/app/</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener">filepath.Match</a> 规则，如：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="bash">COPY hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项来改变文件的所属用户及所属组。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=bin files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=1 files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure></p><h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h3><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV <span class="attribute">VERSION</span>=1.0 <span class="attribute">DEBUG</span>=on \</span><br><span class="line">    <span class="attribute">NAME</span>=<span class="string">"Happy Feet"</span></span><br></pre></td></tr></table></figure></li></ul><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><p>下列指令可以支持环境变量展开：<br> <code>ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD</code></p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p><h3 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h3><p><code>格式：ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p><p>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p>在 1.13 之前的版本，要求 <code>--build-arg</code>中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 <code>--build-arg</code>指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FROM-指定基础镜像&quot;&gt;&lt;a href=&quot;#FROM-指定基础镜像&quot; class=&quot;headerlink&quot; title=&quot;FROM 指定基础镜像&quot;&gt;&lt;/a&gt;FROM 指定基础镜像&lt;/h3&gt;&lt;p&gt;所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yulongphp.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yulongphp.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PHP 代码安全杂谈</title>
    <link href="http://yulongphp.github.io/2018/10/25/PHP%20%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9D%82%E8%B0%88/"/>
    <id>http://yulongphp.github.io/2018/10/25/PHP 代码安全杂谈/</id>
    <published>2018-10-25T04:56:19.000Z</published>
    <updated>2019-02-27T11:42:11.889Z</updated>
    
    <content type="html"><![CDATA[<p>转载自: <a href="https://www.sqlsec.com/2018/01/php.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/01/php.html</a></p><blockquote><p>虽然 PHP 是世界上最好的语言, 但是也有一些因为弱类型语言的安全性问题出现。WordPress 历史上就出现过由于 PHP 本身的缺陷而造成的一些安全性问题，如 CVE-2014-0166 中的 cookie 伪造就是利用了 PHP Hash 比较的缺陷。 当然一般这种情况实战中用到的不是很多，但是在 CTF 竞赛中却是一个值得去考察的一个知识点，特此记录总结之。</p></blockquote><a id="more"></a><h3 id="精度绕过缺陷"><a href="#精度绕过缺陷" class="headerlink" title="精度绕过缺陷"></a>精度绕过缺陷</h3><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>在用 PHP 进行浮点数的运算中, 经常会出现一些和预期结果不一样的值，这是由于浮点数的精度有限。尽管取决于系统，PHP 通常使用 <code>IEEE 754</code>双精度格式，则由于取整而导致的最大相对误差为 <code>1.11e-16</code>。非基本数学运算可能会给出更大误差，并且要考虑到进行复合运算时的误差传递。<br>下面看一个有趣的例子:<br><img src="/images/15170501261023.png" alt=""></p><p>以十进制能够精确表示的有理数如 <code>0.1</code> 或 <code>0.7</code>，无论有多少尾数都不能被内部所使用的二进制精确表示，因此不能在不丢失一点点精度的情况下转换为二进制的格式。这就会造成混乱的结果：例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 <code>7</code> 而不是预期中的 <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9999999999999991118…</code>。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h5 id="问鼎杯-2017-老眼昏花"><a href="#问鼎杯-2017-老眼昏花" class="headerlink" title="问鼎杯 2017 老眼昏花"></a>问鼎杯 2017 老眼昏花</h5><p>网上很多 write-up 感觉就像是看着答案写 write-up，个人感觉真正的 write-up 中应该体现自己的思考在里面。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/images/15170519199340.jpg" alt=""></p><p>题目言简意赅，让我们把<code>2017</code>这个值传递给服务器。</p><h3 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h3><ul><li>PHP 浮点精确度</li></ul><h4 id="write-up"><a href="#write-up" class="headerlink" title="write-up"></a>write-up</h4><p><code>what year is this?</code> 所以第一反应是直接给 <code>year</code> 参数赋值为<code>2017</code>:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">year</span>=2017</span><br></pre></td></tr></table></figure></p><p>然而结果如下：<br><img src="/images/15170520955165.jpg" alt=""></p><p>有提示了，说明<code>year</code>这个参数是对的，但是<code>2017</code>中不可以出现<code>7</code>，这里如果不了解 php 精度的话，肯定是对<code>2017</code>进行各种编码绕过, 但是这里对编码也进行过滤了：<br><img src="/images/15171915115543.png" alt=""></p><p>所以最后一种可能就是利用 PHP 精度来绕过:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">year</span>=2016.99999999999</span><br></pre></td></tr></table></figure></p><p><img src="/images/15170528059980.png" alt=""></p><h3 id="类型转换的缺陷"><a href="#类型转换的缺陷" class="headerlink" title="类型转换的缺陷"></a>类型转换的缺陷</h3><h4 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h4><p>PHP 提供了<code>is_numeric</code>函数，用来变量判断是否为数字。PHP 弱类型语言的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型 intval 数字化再比。</p><h4 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h4><p><code>is_numeric()</code>用于判断是否是数字，通常配合数值判断。</p><h4 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">    $flag = <span class="string">'flag&#123;1S_numer1c_Not_S4fe&#125;'</span>;</span></span><br><span class="line"><span class="php">    $id = $_GET[<span class="string">'id'</span>];</span></span><br><span class="line"><span class="php">    is_numeric($id)?<span class="keyword">die</span>(<span class="string">"Sorry...."</span>):<span class="keyword">NULL</span>;    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($id&gt;<span class="number">665</span>)&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="考察点-1"><a href="#考察点-1" class="headerlink" title="考察点"></a>考察点</h4><ul><li>PHP 类型转换缺陷</li></ul><h4 id="write-up-1"><a href="#write-up-1" class="headerlink" title="write-up"></a>write-up</h4><p>分析下代码: 首先对 GET 方式提交的参数<code>id</code>的值进行检验。<code>id</code>通过<code>is_numeric</code>函数来判断是否为数字，如果为数字的话，GG。如果不是数字的话，和<code>665</code>进行比较，<code>id</code>的值大于<code>665</code>的时候输出<code>flag</code>。<br>乍看上去又好像不可能这里，但是如果知道<code>PHP弱类型语言的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval数字化再比</code>。这个特性的话就可以很好的绕过。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost/?id=666gg</span></span><br></pre></td></tr></table></figure><p><img src="/images/15171303549975.png" alt=""></p><h3 id="松散比较符的缺陷"><a href="#松散比较符的缺陷" class="headerlink" title="松散比较符的缺陷"></a>松散比较符的缺陷</h3><h4 id="理论-2"><a href="#理论-2" class="headerlink" title="理论"></a>理论</h4><p>php 比较相等性的运算符有两种，一种是严格比较，另一种是松散比较。</p><blockquote><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p></blockquote><p><img src="/images/15167718268515.png" alt=""></p><h5 id="严格比较符"><a href="#严格比较符" class="headerlink" title="严格比较符"></a>严格比较符</h5><p>严格比较符，会先判断两种字符串的类型是否相等，再比较。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">===   //全等</span></span><br><span class="line">!==   //不全等</span><br></pre></td></tr></table></figure><p><img src="/images/15170583823430.png" alt=""></p><h5 id="松散比较符"><a href="#松散比较符" class="headerlink" title="松散比较符"></a>松散比较符</h5><p>松散比较符，会先将字符串类型转换成相同，再比较。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">==   //等于</span></span><br><span class="line">!=   //不等</span><br></pre></td></tr></table></figure></p><p><img src="/images/15170583319162.png" alt=""></p><p>PHP 会根据变量的值，自动把变量转换为正确的数据类型。这一点和 C 和 C++ 以及 Java 之类的语言明显不同。虽然这样 PHP 方便了程序员，但是随之而来却会带来一些安全性的问题。</p><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $a = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php">    $b = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $a==$b;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php">    $c = <span class="string">""</span>;</span></span><br><span class="line"><span class="php">    $d = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $c==$d</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于 php 对变量自动转换的特性，这里面的<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">a==<span class="variable">$b</span> 与 <span class="variable">$c</span>==<span class="variable">$d</span> 均为真</span></span><br></pre></td></tr></table></figure></p><p>所以页面输出的结果为:<br><img src="/images/15167004076555.png" alt=""></p><h4 id="一个深入的例子"><a href="#一个深入的例子" class="headerlink" title="一个深入的例子"></a>一个深入的例子</h4><p><img src="/images/15167738799137.png" alt=""></p><p>下面结合 PHP 相等性比较缺陷再解释下会好懂一点:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">0</span>==<span class="string">"gg"</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">0</span>===<span class="string">"gg"</span>); <span class="comment">//false</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"gg"</span>);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>0</code>与<code>gg</code>进行松散性质的不严格比较，会将<code>gg</code>转换为数值，强制转换，由于<code>gg</code>是字符串，转化的结果是<code>0</code>, 所以 输出 <code>true</code></p></blockquote><blockquote><p><code>0</code>与<code>gg</code>进行严格 性质的严格比较，这里的<code>gg</code>是字符串类型，和 <code>int</code> 类型的<code>0</code>不相等，所以输出 <code>false</code></p></blockquote><blockquote><p><code>0</code>与<code>gg</code>进行松散性质的不严格比较，会将<code>gg</code>转换为数值，强制转换，由于<code>gg</code>是字符串，转化的结果是<code>0</code>, 不等于<code>1</code>，所以输出 <code>false</code></p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"1gg"</span>); <span class="comment">//true </span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"gg1"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p><code>1</code>与<code>1gg</code>进行松散性质的不严格比较，这里<code>1gg</code>被强制转换为 <code>int</code> 类型的时候会从字符串的第一位开始做判断进行转换，这里的<code>1gg</code>第一位是<code>1</code>，所以这里<code>1gg</code>被转换为<code>1</code>，所以输出 <code>true</code></p></blockquote><blockquote><p><code>1</code>与<code>gg1</code>进行严格 性质的严格比较，字符串<code>gg1</code>的第一位不是数字，所以它被强制转换为<code>0</code>，所以输出 <code>false</code></p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="string">"0e123"</span> == <span class="string">"0e456"</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="string">"0e123"</span> == <span class="string">"0eabc"</span>);  <span class="comment">//flase</span></span><br></pre></td></tr></table></figure><p>这里比较特殊，字符串中出现了<code>0e</code>，PHP 手册介绍如下:</p><blockquote><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p></blockquote><blockquote><p><code>0e123</code>与<code>0e456</code>相互不严格性质比较的时候，会将<code>0e</code>这类字符串识为科学技术法的数字,0 的无论多少次方都是零，所以相等, 输出 <code>true</code></p></blockquote><blockquote><p><code>0e123</code>与<code>0eabc</code>相互进行不严格性质比较的时候，本应该将<code>0e</code>这类字符串识为科学技术法的数字, 但是这里的<code>0e</code>后面跟着的是<code>abc</code>, 数学中科学计数的指数不可以包含字母。所以这里字符串中虽然是<code>0e</code>开头，但是后面的abc却不符合科学技法的规范，所以输出是 <code>false</code></p></blockquote><h3 id="实践-2"><a href="#实践-2" class="headerlink" title="实践"></a>实践</h3><h5 id="md5-绕过-Hash-比较缺陷"><a href="#md5-绕过-Hash-比较缺陷" class="headerlink" title="md5 绕过 (Hash 比较缺陷)"></a>md5 绕过 (Hash 比较缺陷)</h5><p>南京邮电大学网络攻防训练平台中一道比较经典的<code>md5 collision</code>题，关于这道题目的 WriteUp 网上很多，但是真正深入分析的少之又少~~</p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><h5 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h5><p>源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $md51 = md5(<span class="string">'QNKCDZO'</span>);</span></span><br><span class="line"><span class="php">    $a = @$_GET[<span class="string">'a'</span>];</span></span><br><span class="line"><span class="php">    $md52 = @md5($a);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">isset</span>($a))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($a != <span class="string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"false!!!"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"please input a"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="考察点-2"><a href="#考察点-2" class="headerlink" title="考察点"></a>考察点</h3><ul><li>简单的 PHP 代码审计</li><li>PHP 弱类型的 Hash 比较缺陷</li></ul><h4 id="write-up-2"><a href="#write-up-2" class="headerlink" title="write-up"></a>write-up</h4><p>从源码中可以得输入一个 a 的参数的变量，a 首先不等于<code>QNKCDZO</code>并且 a 得 md5 值必须等于<code>QNKCDZO</code>加密后的 md5 值。<br>乍一看好像不可能存在这样的值，但是这里<code>QNKCDZO</code>加密后的 md5 值为<code>0e830400451993494058024219903391</code> 这里是<code>0e</code>开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。 所以这里利用上面的弱类型的比较的缺陷来进行解题：<code>?a=s155964671a</code></p><p><img src="/images/15167786802641.png" alt=""> </p><p>字符串加密后<code>md5</code>为 <code>0exxxx</code> 的字符串 (x 必须是 10 进制数字) 列表</p><p>|  字符串     |              md5<br>|QNKCDZO     | 0e830400451993494058024219903391|<br>|240610708   | 0e462097431906509019562988736854|<br>|aabg7XSs    | 0e087386482136013740957780965295|<br>|aabC9RqS    | 0e041022518165728065344349536299|<br>|s878926199a | 0e545993274517709034328855841020|<br>|s155964671a | 0e342768416822451524974117254469|<br>|s214587387a | 0e848240448830537924465865611904|<br>|s214587387a | 0e848240448830537924465865611904|<br>|s878926199a | 0e545993274517709034328855841020|<br>|s1091221200a| 0e940624217856561557816327384675|<br>|s1885207154a| 0e509367213418206700842008763514|</p><h3 id="sha1-md5-加密函数漏洞缺陷"><a href="#sha1-md5-加密函数漏洞缺陷" class="headerlink" title="sha1() md5() 加密函数漏洞缺陷"></a>sha1() md5() 加密函数漏洞缺陷</h3><h3 id="理论-3"><a href="#理论-3" class="headerlink" title="理论"></a>理论</h3><p><code>md5()</code>和<code>sha1()</code>对一个数组进行加密将返回 NULL</p><h3 id="实践-3"><a href="#实践-3" class="headerlink" title="实践"></a>实践</h3><p>Boston Key Party CTF 2015: Prudential</p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>I dont think sha1 isbroken.Prove me wrong.</p></blockquote><p>题目给了一个登陆框:<br><img src="/images/15171202342826.png" alt=""></p><h3 id="考察点-3"><a href="#考察点-3" class="headerlink" title="考察点"></a>考察点</h3><ul><li>sha1() 函数漏洞缺陷</li></ul><h4 id="write-up-3"><a href="#write-up-3" class="headerlink" title="write-up"></a>write-up</h4><p>源代码给出如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>level1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'style.css'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span></span><br><span class="line"><span class="php">      <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'&lt;p class="alert"&gt;Invalid password.&lt;/p&gt;'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./index.txt"</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>分析一下核心登录代码如下:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br></pre></td></tr></table></figure><p><code>GET</code>类型提交了两个字段<code>name</code>和<code>password</code>，获得 flag 要求的条件是：</p><ul><li>name != password</li><li>sha1(name) == sha1(password)</li></ul><p>这个乍看起来这是不可能的，但是这里利用<code>sha1()</code>函数在处理数组的时候由于无法处理将返回<code>NULL</code>可以绕过 if 语句的验证，if 条件成立将获得<code>flag</code>。<br>构造语句如下:</p><blockquote><p>?name[]=a&amp;password[]=b</p></blockquote><p>这里符合了 2 个拿到 flag 的条件：</p><ul><li>a 不等于 b</li><li>name 和 password 由于是数组，经过 sha1() 函数嫁给后都返回<code>NULL</code></li></ul><p>拿到 flag： <code>I_think_that_I_just_broke_sha1</code></p><h3 id="拓展总结"><a href="#拓展总结" class="headerlink" title="拓展总结"></a>拓展总结</h3><p>经过验证，不仅<code>sha1()</code>函数无法处理数组，这里<code>md5()</code>函数也有同样的问题，在处理数组的时候，都将返回<code>NULL</code><br>测试代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">$flag = <span class="string">'flag&#123;I_think_that_I_just_broke_md5&#125;'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>])</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your username.'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (md5($_GET[<span class="string">'username'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>($flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里面的核心代码如下:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line"><span class="meta">#并且得满足:</span></span><br><span class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'username'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br></pre></td></tr></table></figure><p>同样利用 <code>md5()</code>函数无法处理数组的这个漏洞，构造 get 请求拿到 flag:</p><blockquote><p>?username[]=a&amp;password[]=b</p></blockquote><p><img src="/images/15171211572131.png" alt=""></p><h3 id="字符串处理函数漏洞缺陷"><a href="#字符串处理函数漏洞缺陷" class="headerlink" title="字符串处理函数漏洞缺陷"></a>字符串处理函数漏洞缺陷</h3><h3 id="理论-4"><a href="#理论-4" class="headerlink" title="理论"></a>理论</h3><ul><li><code>strcmp()</code>函数: 比较两个字符串（区分大小写).<br>用法如下:</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">strcmp</span> ( <span class="keyword">string</span> $str1 , <span class="keyword">string</span> $str2 )</span><br></pre></td></tr></table></figure><p>具体的用法解释如下:<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数 `str1`第一个字符串。</span><br><span class="line">参数 `str2`第二个字符串。</span><br><span class="line">如果 `str1` 小于 `str2` 返回 `&lt; <span class="number">0</span>`；</span><br><span class="line">如果 `str1` 大于 `str2` 返回 `&gt; <span class="number">0</span>`；</span><br><span class="line">如果两者相等，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure></p><p>这个函数接受到了不符合的类型，例如<code>数组</code>类型, 函数将发生错误。但是在<code>5.3</code>之前的 php 中，显示了报错的警告信息后，将<code>return 0</code> !!!! 也就是虽然报了错，但却判定其相等了。</p><ul><li><code>ereg()</code>函数：字符串正则匹配。</li><li><code>strpos()</code>函数：查找字符串在另一字符串中第一次出现的位置，对大小写敏感。</li></ul><p>这 2 个函数都是用来处理字符串的，但是在传入数组参数后都将返回<code>NULL</code>。</p><h3 id="实践-4"><a href="#实践-4" class="headerlink" title="实践"></a>实践</h3><p>Boston Key Party CTF 2015: Northeastern Univ</p><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>Of course, a timing attack might be the answer, but Im quite sure that you can do better than that.<br>题目给了一个登陆框:<br><img src="/images/15171245693910.png" alt=""></p><h3 id="考察点-4"><a href="#考察点-4" class="headerlink" title="考察点"></a>考察点</h3><ul><li>字符串处理函数漏洞缺陷</li></ul><h4 id="write-up-4"><a href="#write-up-4" class="headerlink" title="write-up"></a>write-up</h4><p>给出源代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>level3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'style.css'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (strcmp($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'&lt;p class="alert"&gt;Invalid password.&lt;/p&gt;'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./index.txt"</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下核心登录代码如下:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">strcmp</span>($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>这里使用了<code>==</code>松散比较了<code>$flag</code>和通过 GET 方式提交的<code>password</code>的值，如果想等的话，拿到 flag。<br>这里用的是<code>==</code>松散性质的比较，再利用字符串处理数组时将会报错，在<code>5.3</code>之前的 php 中，显示了报错的警告信息后，将<code>return 0</code>。所有这里将<code>password</code>参数指定为数组, 利用函数漏洞拿到<code>flag</code>:<br><img src="/images/15171263473948.png" alt=""> </p><h3 id="拓展总结-1"><a href="#拓展总结-1" class="headerlink" title="拓展总结"></a>拓展总结</h3><p>除了<code>strcmp()</code>函数外，<code>ereg()</code>和<code>strpos()</code>函数在处理数组的时候也会异常，返回<code>NULL</code>。<br>测试代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">    $flag = <span class="string">'flag&#123;P@ssw0rd_1s_n0t_s4fe_By_d0uble_Equ4ls&#125;'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'password'</span>])) &#123;  </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]) === <span class="keyword">FALSE</span>)  </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">'You password must be alphanumeric'</span>;  </span></span><br><span class="line"><span class="php">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'password'</span>], <span class="string">'--'</span>) !== <span class="keyword">FALSE</span>)  </span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>($flag);  </span></span><br><span class="line"><span class="php">        <span class="keyword">else</span>  </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">'Invalid password'</span>;  </span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>将参数 password 赋值一个数组传递进去：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://localhost/?password</span>[<span class="string"></span>]=gg</span><br></pre></td></tr></table></figure><p><code>ereg()函数</code> 是处理字符串的，传入数组后返回<code>NULL</code>，<code>NULL</code>和 <code>FALSE</code>，是不恒等（===）的，满足第一个<code>if</code>条件；而<code>strpos()函数</code>也是处理字符串的，传入数组后返回<code>NULL</code>，<code>NULL!==FALSE</code>，满足条件，拿到 flag:<br><img src="/images/15171277886030.png" alt=""> </p><h3 id="parse-str-函数变量覆盖缺陷"><a href="#parse-str-函数变量覆盖缺陷" class="headerlink" title="parse_str 函数变量覆盖缺陷"></a>parse_str 函数变量覆盖缺陷</h3><h3 id="理论-5"><a href="#理论-5" class="headerlink" title="理论"></a>理论</h3><p><code>parse_str</code> 函数的作用就是解析字符串并注册成变量，在注册变量之前不会验证当前变量是否存在，所以直接覆盖掉已有变量。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void parse_str ( string $str [,<span class="built_in"> array </span>&amp;$arr ] )</span><br></pre></td></tr></table></figure><p>str 输入的字符串。<br>arr 如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。</p><h3 id="实践-5"><a href="#实践-5" class="headerlink" title="实践"></a>实践</h3><p>测试代码:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;V4ri4ble_M4y_Be_C0verEd&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_GET</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    die();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">"www.sqlsec.com"</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">'b'</span>];</span><br><span class="line">    @parse_str(<span class="variable">$b</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5(<span class="variable">$a</span>[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</span><br><span class="line">        echo <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'your answer is wrong~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="考察点-5"><a href="#考察点-5" class="headerlink" title="考察点"></a>考察点</h3><ul><li>parse_str 变量覆盖缺陷</li></ul><h3 id="write-up-5"><a href="#write-up-5" class="headerlink" title="write-up"></a>write-up</h3><p>找到核心代码:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@parse_str</span>($b)<span class="comment">;</span></span><br><span class="line"><span class="meta">#这里使用了parse_str函数来传递b的变量值</span></span><br><span class="line"><span class="keyword">if</span> ($a[0] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($a[0]) == md5(<span class="string">'QNKCDZO'</span>))</span><br><span class="line"><span class="meta">#这里用到的是文章上面的知识点md5()函数缺陷</span></span><br></pre></td></tr></table></figure><p>因为这里用到了<code>parse_str</code>函数来传递<code>b</code>，if 的语句的条件是拿<code>$a[0]</code>来比较的，有因为这里的变量 a 的值已经三是固定的了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">a = <span class="string">"www.sqlsec.com"</span>;</span></span><br></pre></td></tr></table></figure><p>这里其实是我博客的地址~~ 不过不重要。<br>整体代码乍看起来又不可能，但是利用变量覆盖函数的缺陷这里可以对<code>a</code>的变量进行重新赋值，后面的的 if 语句再利用本文前面提到的<code>md5()</code>比较缺陷进行绕过:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://localhost/?b=a</span>[<span class="string">0</span>]=240610708</span><br></pre></td></tr></table></figure></p><p><img src="/images/15171333801974.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自: &lt;a href=&quot;https://www.sqlsec.com/2018/01/php.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sqlsec.com/2018/01/php.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 PHP 是世界上最好的语言, 但是也有一些因为弱类型语言的安全性问题出现。WordPress 历史上就出现过由于 PHP 本身的缺陷而造成的一些安全性问题，如 CVE-2014-0166 中的 cookie 伪造就是利用了 PHP Hash 比较的缺陷。 当然一般这种情况实战中用到的不是很多，但是在 CTF 竞赛中却是一个值得去考察的一个知识点，特此记录总结之。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://yulongphp.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="安全" scheme="http://yulongphp.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://yulongphp.github.io/2018/10/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yulongphp.github.io/2018/10/24/docker学习笔记/</id>
    <published>2018-10-24T09:29:35.000Z</published>
    <updated>2019-01-02T09:58:20.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-service-operate"><a href="#docker-service-operate" class="headerlink" title="docker service operate"></a>docker service operate</h3><p><code>systemctl start|stop|restart|status  docker</code></p><h3 id="List-Docker-CLI-commands"><a href="#List-Docker-CLI-commands" class="headerlink" title="List Docker CLI commands"></a>List Docker CLI commands</h3><p><code>docker</code><br><code>docker container --help</code></p><h3 id="Display-Docker-version-and-info"><a href="#Display-Docker-version-and-info" class="headerlink" title="Display Docker version and info"></a>Display Docker version and info</h3><p><code>docker --version</code><br><code>docker version</code><br><code>docker info</code></p><h3 id="Execute-Docker-image"><a href="#Execute-Docker-image" class="headerlink" title="Execute Docker image"></a>Execute Docker image</h3><p><code>docker run hello-world</code></p><h3 id="List-Docker-images"><a href="#List-Docker-images" class="headerlink" title="List Docker images"></a>List Docker images</h3><p><code>docker image ls</code></p><h3 id="List-Docker-containers-running-all-all-in-quiet-mode"><a href="#List-Docker-containers-running-all-all-in-quiet-mode" class="headerlink" title="List Docker containers (running, all, all in quiet mode)"></a>List Docker containers (running, all, all in quiet mode)</h3><p><code>docker container ls</code><br><code>docker container ls --all</code><br><code>docker container ls -aq</code></p><h3 id="Create-image-using-this-directory’s-Dockerfile"><a href="#Create-image-using-this-directory’s-Dockerfile" class="headerlink" title="Create image using this directory’s Dockerfile"></a>Create image using this directory’s Dockerfile</h3><p><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code><br><code>docker build -t friendlyhello .</code></p><h3 id="Run-“friendlyname”-mapping-port-4000-to-80"><a href="#Run-“friendlyname”-mapping-port-4000-to-80" class="headerlink" title="Run “friendlyname” mapping port 4000 to 80"></a>Run “friendlyname” mapping port 4000 to 80</h3><p><code>docker run -p 4000:80 friendlyhello</code> </p><h3 id="Same-thing-but-in-detached-mode"><a href="#Same-thing-but-in-detached-mode" class="headerlink" title="Same thing, but in detached mode"></a>Same thing, but in detached mode</h3><p><code>docker run -d -p 4000:80 friendlyhello</code>      </p><h3 id="List-all-running-containers"><a href="#List-all-running-containers" class="headerlink" title="List all running containers"></a>List all running containers</h3><p><code>docker container ls</code>                              </p><h3 id="List-all-containers-even-those-not-running"><a href="#List-all-containers-even-those-not-running" class="headerlink" title="List all containers, even those not running"></a>List all containers, even those not running</h3><p><code>docker container ls -a</code>            </p><h3 id="Gracefully-stop-the-specified-container"><a href="#Gracefully-stop-the-specified-container" class="headerlink" title="Gracefully stop the specified container"></a>Gracefully stop the specified container</h3><p><code>docker container stop &lt;hash&gt;</code>         </p><h3 id="Force-shutdown-of-the-specified-container"><a href="#Force-shutdown-of-the-specified-container" class="headerlink" title="Force shutdown of the specified container"></a>Force shutdown of the specified container</h3><p><code>docker container kill &lt;hash&gt;</code>        </p><h3 id="Remove-specified-container-from-this-machine"><a href="#Remove-specified-container-from-this-machine" class="headerlink" title="Remove specified container from this machine"></a>Remove specified container from this machine</h3><p><code>docker container rm &lt;hash&gt;</code>       </p><h3 id="Remove-all-containers"><a href="#Remove-all-containers" class="headerlink" title="Remove all containers"></a>Remove all containers</h3><p><code>docker container rm $(docker container ls -a -q)</code>       </p><h3 id="List-all-images-on-this-machine"><a href="#List-all-images-on-this-machine" class="headerlink" title="List all images on this machine"></a>List all images on this machine</h3><p><code>docker image ls -a</code>                           </p><h3 id="Remove-specified-image-from-this-machine"><a href="#Remove-specified-image-from-this-machine" class="headerlink" title="Remove specified image from this machine"></a>Remove specified image from this machine</h3><p><code>docker image rm &lt;image id&gt;</code>           </p><h3 id="Remove-all-images-from-this-machine"><a href="#Remove-all-images-from-this-machine" class="headerlink" title="Remove all images from this machine"></a>Remove all images from this machine</h3><p><code>docker image rm $(docker image ls -a -q)</code></p><h3 id="Log-in-this-CLI-session-using-your-Docker-credentials"><a href="#Log-in-this-CLI-session-using-your-Docker-credentials" class="headerlink" title="Log in this CLI session using your Docker credentials"></a>Log in this CLI session using your Docker credentials</h3><p><code>docker login</code>            </p><h3 id="Tag-for-upload-to-registry"><a href="#Tag-for-upload-to-registry" class="headerlink" title="Tag  for upload to registry"></a>Tag <image> for upload to registry</image></h3><p><code>docker tag &lt;image&gt; username/repository:tag</code></p><h3 id="Upload-tagged-image-to-registry"><a href="#Upload-tagged-image-to-registry" class="headerlink" title="Upload tagged image to registry"></a>Upload tagged image to registry</h3><p><code>docker push username/repository:tag</code>         </p><h3 id="Run-image-from-a-registry"><a href="#Run-image-from-a-registry" class="headerlink" title="Run image from a registry"></a>Run image from a registry</h3><p><code>docker run username/repository:tag</code>                 </p><h3 id="List-stacks-or-apps"><a href="#List-stacks-or-apps" class="headerlink" title="List stacks or apps"></a>List stacks or apps</h3><p><code>docker stack ls</code>                                        </p><h3 id="Run-the-specified-Compose-file"><a href="#Run-the-specified-Compose-file" class="headerlink" title="Run the specified Compose file"></a>Run the specified Compose file</h3><p><code>docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;</code> </p><h3 id="List-running-services-associated-with-an-app"><a href="#List-running-services-associated-with-an-app" class="headerlink" title="List running services associated with an app"></a>List running services associated with an app</h3><p><code>docker service ls</code>                </p><h3 id="List-tasks-associated-with-an-app"><a href="#List-tasks-associated-with-an-app" class="headerlink" title="List tasks associated with an app"></a>List tasks associated with an app</h3><p><code>docker service ps &lt;service&gt;</code>                 </p><h3 id="Inspect-task-or-container"><a href="#Inspect-task-or-container" class="headerlink" title="Inspect task or container"></a>Inspect task or container</h3><p><code>docker inspect &lt;task or container&gt;</code>                  </p><h3 id="List-container-IDs"><a href="#List-container-IDs" class="headerlink" title="List container IDs"></a>List container IDs</h3><p><code>docker container ls -q</code>                                    </p><h3 id="Tear-down-an-application"><a href="#Tear-down-an-application" class="headerlink" title="Tear down an application"></a>Tear down an application</h3><p><code>docker stack rm &lt;appname&gt;</code>                          </p><h3 id="Take-down-a-single-node-swarm-from-the-manager"><a href="#Take-down-a-single-node-swarm-from-the-manager" class="headerlink" title="Take down a single node swarm from the manager"></a>Take down a single node swarm from the manager</h3><p><code>docker swarm leave --force</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker-service-operate&quot;&gt;&lt;a href=&quot;#docker-service-operate&quot; class=&quot;headerlink&quot; title=&quot;docker service operate&quot;&gt;&lt;/a&gt;docker service opera
      
    
    </summary>
    
      <category term="docker" scheme="http://yulongphp.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yulongphp.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Github上开源的安全渗透攻击类工具集合</title>
    <link href="http://yulongphp.github.io/2018/08/24/hack_tools_assm/"/>
    <id>http://yulongphp.github.io/2018/08/24/hack_tools_assm/</id>
    <published>2018-08-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:56:31.242Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/yylingyao/p/8997607.html" target="_blank" rel="noopener">https://www.cnblogs.com/yylingyao/p/8997607.html</a></p><blockquote><p>本工具包收集的初衷是向各类行业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的各种开源或非开源安全扫描工具，以帮助安全从业人员对自身业务进行自检，从而提高安全性。</p></blockquote><p>免责说明<br>请勿用于非法的用途，否则造成的严重后果与本项目无关</p><a id="more"></a><h3 id="漏洞及渗透练习平台："><a href="#漏洞及渗透练习平台：" class="headerlink" title="漏洞及渗透练习平台："></a>漏洞及渗透练习平台：</h3><ul><li><a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">https://github.com/710leo/ZVulDrill</a> (ZVulDrill )</li><li><a href="https://github.com/cliffe/secgen" target="_blank" rel="noopener">https://github.com/cliffe/secgen</a> (SecGen Ruby编写的一款工具，生成含漏洞的虚拟机)</li><li><a href="https://github.com/CSPF-Founder/btslab" target="_blank" rel="noopener">https://github.com/CSPF-Founder/btslab</a>  (btslab渗透测试实验室)</li><li><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a> (WebGoat漏洞练习环境)</li><li><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat-Legacy</a> (WebGoat漏洞练习环境)</li><li><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="noopener">https://github.com/RandomStorm/DVWA</a> (Damn Vulnerable Web Application(漏洞练习平台))</li><li><a href="https://github.com/stamparm/DSVW" target="_blank" rel="noopener">https://github.com/stamparm/DSVW</a> (轻量网漏洞演示平台)</li><li><a href="https://github.com/joe-shenouda/awesome-cyber-skills" target="_blank" rel="noopener">https://github.com/joe-shenouda/awesome-cyber-skills</a> (黑客技术训练环境)</li><li><a href="https://github.com/OWASP/SecurityShepherd" target="_blank" rel="noopener">https://github.com/OWASP/SecurityShepherd</a> (网络及应用渗透训练平台)</li><li><a href="https://github.com/MyKings/docker-vulnerability-environment" target="_blank" rel="noopener">https://github.com/MyKings/docker-vulnerability-environment</a> (docker搭建的漏洞练习环境)</li><li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a> (数据库注入练习平台)</li><li><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="noopener">https://github.com/cr0hn/vulnerable-node</a> (用节点编写漏洞练习平台，如OWASP Node Goat)</li><li><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a> (花式扫描器 ：端口扫描器Nmap)</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> (本地网络扫描器)</li><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (子域名扫描器)</li><li><a href="https://github.com/jh00nbr/RouterhunterBR" target="_blank" rel="noopener">https://github.com/jh00nbr/RouterhunterBR</a> (漏洞路由扫描器)</li></ul><h3 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h3><ul><li><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a> (社工插件，可查找以电子邮件，电话，用户名的注册的所有网站账号信息)</li><li><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a> (Github上的信息搜集，实时柯林斯查询扫描的Git的最新上传有关邮箱账号密码信息)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a> (github Repo信息搜集工具)</li></ul><h3 id="WEB："><a href="#WEB：" class="headerlink" title="WEB："></a>WEB：</h3><ul><li><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a> (木马后门的大合集)</li><li><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a> (渗透以及网络攻击脚本)</li><li><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a> (网络渗透小工具大合集)</li><li><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a> (XSS数据接收平台)</li></ul><h3 id="XSS与CSRF工具"><a href="#XSS与CSRF工具" class="headerlink" title="XSS与CSRF工具"></a>XSS与CSRF工具</h3><ul><li><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a> (xss转换工具)</li><li><p><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a> (命令注入开发者的简称，网站向命令注入检测工具)</p></li><li><p><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a> (Web代理，通过加载sqlmap api进行sqli实时检测)</p></li><li><p><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a> (新版中国菜刀)</p></li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (混帐的泄露利用EXP)</li><li><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a> (浏览器攻击框架)</li><li><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a> (自动化绕过WAF脚本)</li><li><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a> (HTTP命令行客户端，可以从命令行构造发送各种HTTP请求(类似于卷曲))</li><li><a href="https://github.com/firebug/firebug" target="_blank" rel="noopener">https://github.com/firebug/firebug</a> (浏览器调试利器)</li><li><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a> (一款开源WAF)</li><li><a href="https://github.com/owtf/wafbypasser" target="_blank" rel="noopener">https://github.com/owtf/wafbypasser</a> (WAF绕过检测工具)</li><li><a href="https://github.com/julienbedard/browsersploit" target="_blank" rel="noopener">https://github.com/julienbedard/browsersploit</a> (浏览器攻击框架)</li><li><a href="https://github.com/guillotines/WebShell" target="_blank" rel="noopener">https://github.com/guillotines/WebShell</a> (网络端的木马后门管理器)</li><li><a href="https://github.com/mgeeky/tomcatWarDeployer" target="_blank" rel="noopener">https://github.com/mgeeky/tomcatWarDeployer</a> (Tomcat的的自动后门部署)</li></ul><h3 id="窗口域渗透工具："><a href="#窗口域渗透工具：" class="headerlink" title="窗口域渗透工具："></a>窗口域渗透工具：</h3><ul><li><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a> (窗户渗透神器)</li><li><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a> (PowerShell中的渗透库合集)</li><li><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="noopener">https://github.com/clymb3r/PowerShell</a> (PowerShell的工具合集)</li><li><a href="https://github.com/putterpanda/mimikittenz" target="_blank" rel="noopener">https://github.com/putterpanda/mimikittenz</a> (从内存中提取敏感信息的工具)</li></ul><h3 id="FireEye的的红军渗透工具"><a href="#FireEye的的红军渗透工具" class="headerlink" title="FireEye的的红军渗透工具"></a>FireEye的的红军渗透工具</h3><ul><li><a href="https://github.com/chango77747/AdEnumerator" target="_blank" rel="noopener">https://github.com/chango77747/AdEnumerator</a></li><li><a href="https://github.com/Raikia/CredNinja" target="_blank" rel="noopener">https://github.com/Raikia/CredNinja</a></li><li><a href="https://github.com/ChrisTruncer/WMIOps" target="_blank" rel="noopener">https://github.com/ChrisTruncer/WMIOps</a></li><li><a href="https://github.com/ChrisTruncer/EyeWitness" target="_blank" rel="noopener">https://github.com/ChrisTruncer/EyeWitness</a></li><li><a href="https://github.com/ChrisTruncer/Exgress-Assess" target="_blank" rel="noopener">https://github.com/ChrisTruncer/Exgress-Assess</a></li></ul><h3 id="模糊："><a href="#模糊：" class="headerlink" title="模糊："></a>模糊：</h3><ul><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a> (网络向发子工具)</li><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (HTTP暴力破解，撞库攻击脚本)</li></ul><h3 id="漏洞利用及攻击框架："><a href="#漏洞利用及攻击框架：" class="headerlink" title="漏洞利用及攻击框架："></a>漏洞利用及攻击框架：</h3><ul><li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a> (无国界医生)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a> (POC调用框架，可加载Pocsuite，Tangscan，Beebeeto等)</li><li><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="noopener">https://github.com/knownsec/Pocsuite</a> (Pocsuite)</li><li><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="noopener">https://github.com/n0tr00t/Beebeeto-framework</a> (Beebeeto)</li></ul><h3 id="漏洞POC＆EXP："><a href="#漏洞POC＆EXP：" class="headerlink" title="漏洞POC＆EXP："></a>漏洞POC＆EXP：</h3><ul><li><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a> (ExploitDB官方的Git的版本)</li><li><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a> (PHP漏洞代码分析)</li><li><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a> (CVE-2016至2107年简单测试)</li><li><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a> (CVE-2015-7547 POC)</li><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a> (Java的的反序列化POC生成工具)</li><li><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a> (JAVA反序列化EXP)</li><li><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a> (Jenkins CommonCollections EXP)</li><li><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a> (CVE-2015-2426 EXP(windows内核提权))</li><li><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a> (使用 Docker 显示Web攻击(php本地文件包含结合phpinfo getshell以及ssrf结合curl的利用演示))</li><li><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a> (PHP7缓存覆写漏洞演示及相关工具)</li><li><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a> (XcodeGhost木马样本)</li><li><a href="https://github.com/citronneur/rdp" target="_blank" rel="noopener">https://github.com/citronneur/rdp</a> (哈希长度扩展攻击EXP)</li></ul><h3 id="中间人攻击及钓鱼："><a href="#中间人攻击及钓鱼：" class="headerlink" title="中间人攻击及钓鱼："></a>中间人攻击及钓鱼：</h3><p>中间人攻击框架</p><ul><li><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a></li><li><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="noopener">https://github.com/secretsquirrel/BDFProxy</a></li><li><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a></li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a> (注册代码，阻止无线上网和间谍无线用户)</li><li><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="noopener">https://github.com/intrepidusgroup/mallory</a> (可扩展的中间人代理工具)</li><li><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="noopener">https://github.com/sophron/wifiphisher</a> (无线网络钓鱼)</li></ul><h3 id="密码破解："><a href="#密码破解：" class="headerlink" title="密码破解："></a>密码破解：</h3><ul><li><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a> (密码破解工具)</li><li><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a> (本地存储的各类密码提取利器)</li></ul><h3 id="二进制及代码分析工具："><a href="#二进制及代码分析工具：" class="headerlink" title="二进制及代码分析工具："></a>二进制及代码分析工具：</h3><ul><li><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">https://github.com/devttys0/binwalk</a> (二进制分析工具)</li><li><a href="https://github.com/quarkslab/binmap" target="_blank" rel="noopener">https://github.com/quarkslab/binmap</a> (系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息)</li><li><a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a> (rp ++是一个完整的cpp编写工具，旨在在PE/Elf/Mach-O(不支持FAT二进制文件)x86/x64二进制文件中查找ROP序列。)</li><li><a href="https://github.com/lillypad/badger" target="_blank" rel="noopener">https://github.com/lillypad/badger</a> (的Windows漏洞开发工具)</li><li><a href="https://github.com/bdcht/amoco" target="_blank" rel="noopener">https://github.com/bdcht/amoco</a> (二进制静态分析工具(Python))</li><li><a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a> (Python的开发GDB开发协助)</li><li><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="noopener">https://github.com/ValdikSS/billgates-botnet-tracker</a> (对BillGate Linux Botnet系木马活动的监控工具)</li><li><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="noopener">https://github.com/kevthehermit/RATDecoders</a> (木马配置参数提取工具)</li><li><a href="https://github.com/angr/angr" target="_blank" rel="noopener">https://github.com/angr/angr</a> (Shellphish编写的二进制分析工具(CTF向))</li><li><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">https://github.com/yinwang0/pysonar2</a> (针对蟒蛇的静态代码分析工具)</li><li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">https://github.com/koalaman/shellcheck</a> (一个自动化的脚本(壳)分析工具，用来给出警告和建议)</li><li><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="noopener">https://github.com/ChiChou/etacsufbo</a> (基于AST的变换简易的JavaScript的反混淆辅助工具) </li></ul><h3 id="EXP编写框架及工具："><a href="#EXP编写框架及工具：" class="headerlink" title="EXP编写框架及工具："></a>EXP编写框架及工具：</h3><ul><li><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="noopener">https://github.com/t00sh/rop-tool</a> (二进制EXP编写工具)</li><li><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a> (CTF Pwn类题目脚本编写框架)</li><li><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">https://github.com/zTrix/zio</a> (一个易于使用的IO库，用于打包开发)</li><li><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a> (跨平台注入工具(插入JavaScript以浏览Windows，Mac，Linux，iOS 和 Android上的本机应用程序。))</li></ul><h3 id="隐写："><a href="#隐写：" class="headerlink" title="隐写："></a>隐写：</h3><ul><li><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="noopener">https://github.com/abeluck/stegdetect</a> (隐写检测工具)</li></ul><h3 id="各类安全资料："><a href="#各类安全资料：" class="headerlink" title="各类安全资料："></a>各类安全资料：</h3><ul><li><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a> (域渗透教程)</li><li><a href="http://www.primalsecurity.net/tutorials/python-tutorials/" target="_blank" rel="noopener">http://www.primalsecurity.net/tutorials/python-tutorials/</a> (python security教程(原文链接)</li><li><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">https://github.com/smartFlash/pySecurity</a></li><li><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="noopener">https://github.com/ClickSecurity/data_hacking</a> (data_hacking合集)</li><li><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="noopener">https://github.com/exploitprotocol/mobile-security-wiki</a> (移动安全维基)</li><li><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="noopener">https://github.com/veficos/reverse-engineering-for-beginners</a> (书籍“反向工程换初学者”)</li><li><a href="https://github.com/luyg24/IT_security" target="_blank" rel="noopener">https://github.com/luyg24/IT_security</a> (一些信息安全标准及设备配置)</li><li><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="noopener">https://github.com/kbandla/APTnotes</a> (APT相关笔记)</li><li><a href="https://github.com/knownsec/KCon" target="_blank" rel="noopener">https://github.com/knownsec/KCon</a> (Kcon资料)</li><li><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources</a> (周大福及黑客资源合集)</li><li><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a> (CTF和安全工具大合集)</li><li><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="noopener">https://github.com/citypw/DNFWAH</a> (“不要跟黑客”) </li></ul><h3 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h3><p>近年ctf writeup大全</p><ul><li><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2016</a></li><li><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015</a></li><li><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014</a></li><li><a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a> (fbctf竞赛平台演示)</li><li><a href="https://github.com/ctfs/resources" target="_blank" rel="noopener">https://github.com/ctfs/resources</a> (CTF资源)</li></ul><h3 id="各类编程资源："><a href="#各类编程资源：" class="headerlink" title="各类编程资源："></a>各类编程资源：</h3><ul><li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">https://github.com/bayandin/awesome-awesomeness</a> (大礼包(什么都有))</li><li><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="noopener">https://github.com/denysdovhan/bash-handbook</a> (庆典 - 手册)</li><li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a> (蟒蛇资源大全)</li><li><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">https://github.com/xirong/my-git</a> (Git的的学习资料)</li><li><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">https://github.com/android-cn/android-open-project-analysis</a> (安卓开源代码解析)</li><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a> (蟒蛇框架，库，资源大合集)</li><li><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/JSVerbalExpressions</a> (JS正则表达式库(用于简化构造复杂的JS正则表达式)) </li></ul><h3 id="蟒蛇："><a href="#蟒蛇：" class="headerlink" title="蟒蛇："></a>蟒蛇：</h3><ul><li><a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/PythonVerbalExpressions</a> (蟒正则表达式库(用于简化构造复杂的蟒正则表达式))</li><li><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener">https://github.com/pyinvoke/invoke</a> (蟒蛇任务管理以及命令执行库)</li><li><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">https://github.com/pyinstaller/pyinstaller</a> (python exe打包库)</li><li><a href="https://github.com/orf/cyborg" target="_blank" rel="noopener">https://github.com/orf/cyborg</a> (PY3爬虫框架)</li><li><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a> (一个提供底层接口数据包编程和网络协议支持的蟒蛇库)</li><li><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">https://github.com/kennethreitz/requests</a> (蟒蛇请求库)</li><li><a href="https://github.com/mahmoud/boltons" target="_blank" rel="noopener">https://github.com/mahmoud/boltons</a> (蟒蛇实用工具合集)</li><li><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a> (蟒蛇爬虫系统)</li><li><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a> (CTF向蟒蛇工具包) </li></ul><h3 id="科学上网："><a href="#科学上网：" class="headerlink" title="科学上网："></a>科学上网：</h3><ul><li><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net</a> (科学上网工具)</li></ul><h3 id="福利："><a href="#福利：" class="headerlink" title="福利："></a>福利：</h3><ul><li><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="noopener">https://github.com/east520/AutoGetRedEnv</a> (微信自动抢红包动态库)</li><li><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a> (微信抢红包插件(安卓版))</li><li><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/hardseed</a> (神器)</li></ul><h3 id="甲方安全工程师生存指南："><a href="#甲方安全工程师生存指南：" class="headerlink" title="甲方安全工程师生存指南："></a>甲方安全工程师生存指南：</h3><ul><li><a href="https://github.com/thomaspatzke/WASE" target="_blank" rel="noopener">https://github.com/thomaspatzke/WASE</a> (网页索引及日志搜索工具)</li><li><a href="https://github.com/Kozea/wdb" target="_blank" rel="noopener">https://github.com/Kozea/wdb</a> (一款CS结构的网络调试器)</li><li><a href="https://github.com/aramosf/recoversqlite/" target="_blank" rel="noopener">https://github.com/aramosf/recoversqlite/</a> (从sqlite的数据库中删除的注册表恢复信息。)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (自动化的模板注入攻击检测工具)</li><li><a href="https://github.com/client9/libinjection" target="_blank" rel="noopener">https://github.com/client9/libinjection</a> (SQLI词法解析分析器)</li><li><a href="https://github.com/zxsecurity/gpsnitch" target="_blank" rel="noopener">https://github.com/zxsecurity/gpsnitch</a> (全球定位系统欺骗检测工具)</li><li><a href="https://github.com/biggiesmallsAG/nightHawkResponse" target="_blank" rel="noopener">https://github.com/biggiesmallsAG/nightHawkResponse</a> (应急处置响应框架)</li><li><a href="https://github.com/FallibleInc/security-guide-for-developers" target="_blank" rel="noopener">https://github.com/FallibleInc/security-guide-for-developers</a> (网络安全开发指南)</li><li><a href="https://github.com/4ido10n/wooyun-drops-all-articles-package" target="_blank" rel="noopener">https://github.com/4ido10n/wooyun-drops-all-articles-package</a> (乌云知识库全部文章)</li><li><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="noopener">https://github.com/paralax/awesome-honeypots</a> (蜜罐资源合集)</li><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (自动化代码审计工具)</li><li><a href="https://github.com/HatBoy/Pcap-Analyzer" target="_blank" rel="noopener">https://github.com/HatBoy/Pcap-Analyzer</a> (蟒蛇编写的离线网络数据包分析器)</li><li><a href="https://github.com/leonteale/pentestpackage" target="_blank" rel="noopener">https://github.com/leonteale/pentestpackage</a> (渗透测试常见小工具打包)</li><li><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">https://github.com/phith0n/Mind-Map</a> (各类安全资料：)</li><li><a href="https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428" target="_blank" rel="noopener">https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</a> (安全脑图合集 )</li></ul><h3 id="有关信息安全的一些流程图收集"><a href="#有关信息安全的一些流程图收集" class="headerlink" title="有关信息安全的一些流程图收集"></a>有关信息安全的一些流程图收集</h3><ul><li><a href="https://github.com/sindresorhus/awesome#security" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome#security</a> (令人敬畏的名单)</li></ul><h3 id="蜜罐："><a href="#蜜罐：" class="headerlink" title="蜜罐："></a>蜜罐：</h3><ul><li><a href="https://github.com/desaster/kippo" target="_blank" rel="noopener">https://github.com/desaster/kippo</a> (SSH蜜罐)</li><li><a href="https://github.com/awhitehatter/mailoney" target="_blank" rel="noopener">https://github.com/awhitehatter/mailoney</a> (SMTP蜜罐)</li><li><a href="https://github.com/mushorg/glastopf" target="_blank" rel="noopener">https://github.com/mushorg/glastopf</a> (网络应用蜜罐)</li><li><a href="https://github.com/jordan-wright/elastichoney" target="_blank" rel="noopener">https://github.com/jordan-wright/elastichoney</a> (一个简单的Elasticsearch蜜罐)</li><li><a href="https://github.com/atiger77/Dionaea" target="_blank" rel="noopener">https://github.com/atiger77/Dionaea</a> (基于docker的蜜罐系统) </li></ul><blockquote><p>Scanners-Box是来自github平台的开源扫描仪的集合，包括子域枚举，数据库漏洞扫描程序，弱密码或信息泄漏扫描仪，端口扫描仪，指纹扫描仪和其他大型扫描仪，模块化扫描仪等。对于其他众所周知的扫描工具，如：Nmap，w3af，brakeman将不会包含在收集范围内。安全行业从业人员常用工具指引，包括各类在线安全学习资料和安全检测工具，欢迎大家持续贡献！</p></blockquote><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><ul><li><a href="https://wizardforcel.gitbooks.io/web-hacking-101/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/web-hacking-101/content/</a> (Web Hacking 101 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/asani/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/asani/content/</a> (浅入浅出Android安全 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/lpad/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/lpad/content/</a> (Android 渗透测试学习手册 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/</a> (Kali Linux Web渗透测试秘籍 中文版)</li><li><a href="https://github.com/hardenedlinux/linux-exploit-development-tutorial" target="_blank" rel="noopener">https://github.com/hardenedlinux/linux-exploit-development-tutorial</a> (Linux exploit 开发入门)</li><li><a href="https://www.gitbook.com/book/t0data/burpsuite/details" target="_blank" rel="noopener">https://www.gitbook.com/book/t0data/burpsuite/details</a> (burpsuite实战指南)</li><li><a href="https://github.com/qazbnm456/awesome-web-security" target="_blank" rel="noopener">https://github.com/qazbnm456/awesome-web-security</a> (Web安全资料和资源列表)</li><li><a href="https://sec-wiki.com/" target="_blank" rel="noopener">https://sec-wiki.com/</a> (安全维基百科)</li></ul><h3 id="fuzz工具收集"><a href="#fuzz工具收集" class="headerlink" title="fuzz工具收集"></a>fuzz工具收集</h3><ul><li><a href="https://github.com/ivanfratric/winafl" target="_blank" rel="noopener">https://github.com/ivanfratric/winafl</a></li><li><a href="https://github.com/attekett/NodeFuzz" target="_blank" rel="noopener">https://github.com/attekett/NodeFuzz</a></li><li><a href="https://github.com/google/oss-fuzz" target="_blank" rel="noopener">https://github.com/google/oss-fuzz</a></li><li><a href="http://blog.topsec.com.cn/ad_lab/alphafuzzer/" target="_blank" rel="noopener">http://blog.topsec.com.cn/ad_lab/alphafuzzer/</a></li><li><a href="http://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noopener">http://llvm.org/docs/LibFuzzer.html</a></li></ul><h3 id="子域名枚举"><a href="#子域名枚举" class="headerlink" title="子域名枚举"></a>子域名枚举</h3><ul><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (子域名字典穷举)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a> (子域名枚举与地图标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a> (在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a> (根据DNS记录查询子域名)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a> (基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a> (使用CloudFlare进行子域名枚举的脚本)</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> (A domain scanner)</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a> (Knock Subdomain Scan)</li><li><a href="https://github.com/Evi1CLAY/CoolPool/tree/master/Python/DomainSeeker" target="_blank" rel="noopener">https://github.com/Evi1CLAY/CoolPool/tree/master/Python/DomainSeeker</a> (多方式收集目标子域名信息)</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> (兄弟域名查询)</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a> (基于dns查询的子域名枚举)</li></ul><h3 id="web应用扫描器"><a href="#web应用扫描器" class="headerlink" title="web应用扫描器"></a>web应用扫描器</h3><ul><li><a href="http://github.com/Arachni/arachni" target="_blank" rel="noopener">http://github.com/Arachni/arachni</a> (web应用安全扫描器框架 <a href="http://www.arachni-scanner.com" target="_blank" rel="noopener">http://www.arachni-scanner.com</a>)</li></ul><h3 id="数据库扫描、注入工具"><a href="#数据库扫描、注入工具" class="headerlink" title="数据库扫描、注入工具"></a>数据库扫描、注入工具</h3><ul><li><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a> (注入工具之王sqlmap)</li><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a> (一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a> (99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a> (一款针对mongoDB的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a> (SQL盲注利用框架)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> (攻击SQLSERVER的Powershell脚本框架)</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a> (又一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a> (MongoDB审计及渗透工具)</li><li><a href="https://github.com/commixproject/commix" target="_blank" rel="noopener">https://github.com/commixproject/commix</a> (注入点命令执行利用工具)</li></ul><h3 id="弱口令或信息泄漏扫描"><a href="#弱口令或信息泄漏扫描" class="headerlink" title="弱口令或信息泄漏扫描"></a>弱口令或信息泄漏扫描</h3><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (一个简单的HTTP暴力破解、撞库攻击脚本)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> (一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (.git文件夹泄漏利用工具)</li><li><a href="https://github.com/LoRexxar/BScanner" target="_blank" rel="noopener">https://github.com/LoRexxar/BScanner</a> (基于字典的目录扫描小工具)</li><li><a href="https://github.com/she11c0der/fenghuangscanner_v3" target="_blank" rel="noopener">https://github.com/she11c0der/fenghuangscanner_v3</a> (各种端口及弱口令检测，作者wilson9x1，原地址失效)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a> (对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a> (根据用户习惯生成弱口令探测字典脚本)</li><li><a href="https://github.com/RicterZ/genpAss" target="_blank" rel="noopener">https://github.com/RicterZ/genpAss</a> (中国特色的弱口令生成器)</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a> (go写的协程版的ssh\redis\mongodb弱口令破解工具)</li><li><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a> (通过输入email、phone、username的返回用户注册的所有互联网护照信息)</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a> (GitHub敏感信息扫描工具)</li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a> (GitHub敏感信息扫描工具,包括检测commit等)</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a> (暴力破解字典建立工具)</li><li><a href="https://github.com/GDSSecurity/xxe-recursive-download" target="_blank" rel="noopener">https://github.com/GDSSecurity/xxe-recursive-download</a> (xxe漏洞递归下载工具)</li><li><a href="https://buer.haus/xxegen/" target="_blank" rel="noopener">https://buer.haus/xxegen/</a> (xxe在线生成利用工具)</li></ul><h3 id="物联网设备扫描"><a href="#物联网设备扫描" class="headerlink" title="物联网设备扫描"></a>物联网设备扫描</h3><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a> (物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> (使用nmap扫描IoT设备)</li><li><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="noopener">https://github.com/jh00nbr/Routerhunter-2.0</a> (路由器漏洞扫描利用)</li><li><a href="https://github.com/reverse-shell/routersploit" target="_blank" rel="noopener">https://github.com/reverse-shell/routersploit</a> (路由器漏洞利用框架)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a> (telnet服务密码撞库)</li><li><a href="https://github.com/RUB-NDS/PRET" target="_blank" rel="noopener">https://github.com/RUB-NDS/PRET</a> (打印机攻击框架)</li></ul><h3 id="XSS扫描"><a href="#XSS扫描" class="headerlink" title="XSS扫描"></a>XSS扫描</h3><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a> (Cross-Site Scripting Bruteforcer)</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> (A small python script to check for Cross-Site Tracing)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> (PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> (批量扫描xss的python脚本)</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a> (自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件)</li></ul><h3 id="企业网络自检"><a href="#企业网络自检" class="headerlink" title="企业网络自检"></a>企业网络自检</h3><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> (详细的内部网络信息扫描器)</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> (javascript实现的本地网络扫描器)</li><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> (网络资产识别引擎，漏洞检测引擎)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> (企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts)</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a> (搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息)</li></ul><h3 id="webshell检测以及病毒分析工具"><a href="#webshell检测以及病毒分析工具" class="headerlink" title="webshell检测以及病毒分析工具"></a>webshell检测以及病毒分析工具</h3><ul><li><a href="https://github.com/We5ter/Scanners-Box/tree/master/webshell/" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/tree/master/webshell/</a> (简单的php后门检测工具以及webshell样本库)</li><li><a href="https://github.com/ym2011/ScanBackdoor" target="_blank" rel="noopener">https://github.com/ym2011/ScanBackdoor</a> (Webshell扫描工具)</li><li><a href="https://github.com/yassineaddi/BackdoorMan" target="_blank" rel="noopener">https://github.com/yassineaddi/BackdoorMan</a> (PHP后门扫描)</li><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a> (又一款webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a> (哈勃分析系统，linux系统病毒分析及安全检测)</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a> (使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a> (一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a> (测试效率高达99%的webshell检测工具)</li></ul><h3 id="内网安全渗透测试工具集"><a href="#内网安全渗透测试工具集" class="headerlink" title="内网安全渗透测试工具集"></a>内网安全渗透测试工具集</h3><ul><li><a href="https://github.com/0xwindows/VulScritp" target="_blank" rel="noopener">https://github.com/0xwindows/VulScritp</a> (企业内网渗透脚本，包括banner扫描、端口扫描；各种通用漏洞利用等)</li><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a> (基于网络流量的内网探测框架)</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a> (调用 Windows API 枚举用户登录信息)</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a> (自动化利用XSS入侵内网)</li><li><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a> (本机密码查看提取工具)</li><li><a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="noopener">https://github.com/huntergregal/mimipenguin</a> (linux密码抓取神器)</li></ul><h3 id="端口扫描、指纹识别以及中间件扫描"><a href="#端口扫描、指纹识别以及中间件扫描" class="headerlink" title="端口扫描、指纹识别以及中间件扫描"></a>端口扫描、指纹识别以及中间件扫描</h3><ul><li><a href="https://nmap.org/download.html" target="_blank" rel="noopener">https://nmap.org/download.html</a> (Nmap端口扫描器之王,<a href="https://svn.nmap.org/" target="_blank" rel="noopener">https://svn.nmap.org/</a>)</li><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> (目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a> (动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a> (WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a> (ssl类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a> (web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a> (web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a> (网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> (a fast Network scanner inspired by Masscan and Zmap)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> (网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别)</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a> (中间件扫描)</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a> (Web path scanner)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a> (C段Banner与路径扫描)</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> (端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a> (waf自动暴破)</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a> (尝试找出cdn背后的真实ip)</li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a> (基于Bing搜索引擎的C段/旁站查询，多线程，支持API)</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a> (多线程WEB目录爆破工具)</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a> (一个爬虫式的网段Web主机发现小工具)</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a> (thorn上实现的分布式任务分发的ip端口漏洞扫描器)</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a> (类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a> (CDN识别、检测)</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a> (基于爬虫的web路径扫描器)</li></ul><h3 id="针对性漏洞测试工具"><a href="#针对性漏洞测试工具" class="headerlink" title="针对性漏洞测试工具"></a>针对性漏洞测试工具</h3><ul><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a> ( java反序列化利用工具)</li><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> (Jenkins漏洞探测、用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> (discuz漏洞扫描)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> (CMS攻击框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a> (IIS短文件名漏洞扫描)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a> (flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a> (服务器端模板注入漏洞的半自动化工具)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a> (docker扫描工具)</li><li><a href="https://github.com/GoSecure/break-fast-serial" target="_blank" rel="noopener">https://github.com/GoSecure/break-fast-serial</a> (借助DNS解析来检测Java反序列化漏洞工具)</li><li><a href="https://github.com/dirtycow/dirtycow.github.io" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io</a> (脏牛提权漏洞exp)</li></ul><h3 id="无线网络渗透、扫描"><a href="#无线网络渗透、扫描" class="headerlink" title="无线网络渗透、扫描"></a>无线网络渗透、扫描</h3><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a>(无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a> (Python网络/渗透测试工具)</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a> (无线安全渗透测试套件)</li></ul><h3 id="代码静态扫描、代码运行栈跟踪"><a href="#代码静态扫描、代码运行栈跟踪" class="headerlink" title="代码静态扫描、代码运行栈跟踪"></a>代码静态扫描、代码运行栈跟踪</h3><ul><li><a href="https://github.com/exakat/php-static-analysis-tools" target="_blank" rel="noopener">https://github.com/exakat/php-static-analysis-tools</a> (php静态扫描工具集)</li><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a> (静态php代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a> (跟踪、分析PHP运行情况的工具)</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a> (NodeJS应用代码审计)</li><li><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">https://github.com/pwnsdx/BadCode</a> (PHP代码审计)</li><li><a href="https://github.com/thesp0nge/dawnscanner" target="_blank" rel="noopener">https://github.com/thesp0nge/dawnscanner</a> (ruby源码审计)</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a> (Ruby on Rails应用程序的安全漏洞)</li><li><a href="https://github.com/ajinabraham/Mobile-Security-Framework-MobSF/" target="_blank" rel="noopener">https://github.com/ajinabraham/Mobile-Security-Framework-MobSF/</a>(app黑盒审计)</li><li><a href="https://github.com/alibaba/iOSSecAudit" target="_blank" rel="noopener">https://github.com/alibaba/iOSSecAudit</a> (iOS安全审计)</li></ul><h3 id="模块化扫描、综合扫描器"><a href="#模块化扫描、综合扫描器" class="headerlink" title="模块化扫描、综合扫描器"></a>模块化扫描、综合扫描器</h3><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a> (自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> (分布式web漏洞扫描框架，集合owasp top10漏洞扫描和边界资产发现能力)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a> (BkScanner 分布式、插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a> (被动式漏洞扫描)</li><li><a href="https://github.com/alpha1e0/pentestdb" target="_blank" rel="noopener">https://github.com/alpha1e0/pentestdb</a> (WEB渗透测试数据库)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a> (基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a> (自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> (定向全自动化渗透测试工具)</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a> (自动化渗透测试框架)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a> (扫描效果未验证)</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a> (渗透测试插件化并发框架)</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> (Scanner in Python3.5 for SQLi/XSS/LFI/RFI and other Vulns)</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a> (web端的在线漏洞扫描)</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a> (开发中…)</li></ul><h3 id="Android系列工具："><a href="#Android系列工具：" class="headerlink" title="Android系列工具："></a>Android系列工具：</h3><ul><li><a href="http://sec-redclub.com/index.php/archives/439/" target="_blank" rel="noopener">http://sec-redclub.com/index.php/archives/439/</a></li></ul><h3 id="DDOS防护："><a href="#DDOS防护：" class="headerlink" title="DDOS防护："></a>DDOS防护：</h3><ul><li><a href="https://github.com/ywjt/Dshield" target="_blank" rel="noopener">https://github.com/ywjt/Dshield</a></li></ul><h3 id="Database-firewall："><a href="#Database-firewall：" class="headerlink" title="Database firewall："></a>Database firewall：</h3><ul><li><a href="https://nim4.github.io/DBShield/" target="_blank" rel="noopener">https://nim4.github.io/DBShield/</a></li></ul><h3 id="waf开源及规则："><a href="#waf开源及规则：" class="headerlink" title="waf开源及规则："></a>waf开源及规则：</h3><ul><li><a href="https://github.com/xsec-lab/x-waf" target="_blank" rel="noopener">https://github.com/xsec-lab/x-waf</a></li><li><a href="https://github.com/loveshell/ngx_lua_waf" target="_blank" rel="noopener">https://github.com/loveshell/ngx_lua_waf</a></li><li><a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/tree/master/base_rules" target="_blank" rel="noopener">https://github.com/SpiderLabs/owasp-modsecurity-crs/tree/master/base_rules</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://www.cnblogs.com/yylingyao/p/8997607.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/yylingyao/p/8997607.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本工具包收集的初衷是向各类行业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的各种开源或非开源安全扫描工具，以帮助安全从业人员对自身业务进行自检，从而提高安全性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;免责说明&lt;br&gt;请勿用于非法的用途，否则造成的严重后果与本项目无关&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="hack" scheme="http://yulongphp.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>2019年Github上开源的安全渗透攻击类工具集合</title>
    <link href="http://yulongphp.github.io/2018/07/24/github_hack_tool/"/>
    <id>http://yulongphp.github.io/2018/07/24/github_hack_tool/</id>
    <published>2018-07-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:53:29.897Z</updated>
    
    <content type="html"><![CDATA[<p>本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性。</p><p>转载自: <a href="http://netsecurity.51cto.com/art/201812/588880.htm" target="_blank" rel="noopener">http://netsecurity.51cto.com/art/201812/588880.htm</a></p><p>集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举，数据库漏洞扫描，弱口令或信息泄漏扫描，端口扫描，指纹识别以及其他大型扫描器或模块化扫描器。<br>项目地址：<a href="https://github.com/We5ter/Scanners-Box" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box</a></p><a id="more"></a><h3 id="子域名枚举扫描器或爆破工具"><a href="#子域名枚举扫描器或爆破工具" class="headerlink" title="子域名枚举扫描器或爆破工具"></a>子域名枚举扫描器或爆破工具</h3><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (lijiejie开发的一款使用广泛的子域名爆破枚举工具)</li><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (猪猪侠开发的一款域名收集全面，精准的子域名枚举工具)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a>(子域名枚举爆破工具以及地图位置标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a>(提供web界面的在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a>(高效精准的子域名爆破工具，同时也是扫描器中最常用的子域名API库)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a>(基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a>(使用CloudFlare进行子域名枚举的脚本)</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a>(Knock子域名获取，可用于查找子域名接管漏洞)</li><li><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker" target="_blank" rel="noopener">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a>(多方式收集目标子域名信息)</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a>(兄弟域名查询)</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a>(高效的子域名爆破工具)</li><li><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a>(一款高效的子域名爆破工具)</li><li><a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone</a>(子域名枚举，探测工具。可用于子域名接管漏洞探测)</li><li><a href="https://github.com/evilsocket/dnssearch" target="_blank" rel="noopener">https://github.com/evilsocket/dnssearch</a>(一款子域名爆破工具)</li><li><a href="https://github.com/reconned/domained" target="_blank" rel="noopener">https://github.com/reconned/domained</a>(可用于子域名收集的一款工具)</li><li><a href="https://github.com/bit4woo/Teemo" target="_blank" rel="noopener">https://github.com/bit4woo/Teemo</a>(域名收集及枚举工具)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a>(邮箱，服务器信息收集及子域名枚举工具)</li><li><a href="https://github.com/swisskyrepo/Subdomino" target="_blank" rel="noopener">https://github.com/swisskyrepo/Subdomino</a>(子域名枚举，端口扫描，服务存活确认)</li></ul><h3 id="自动爬虫实现的子域名收集工具"><a href="#自动爬虫实现的子域名收集工具" class="headerlink" title="自动爬虫实现的子域名收集工具"></a>自动爬虫实现的子域名收集工具</h3><ul><li><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a>(快速子域枚举工具)</li><li><a href="https://github.com/jonluca/Anubis" target="_blank" rel="noopener">https://github.com/jonluca/Anubis</a>(子域名枚举及信息搜集工具)</li><li><a href="https://github.com/n4xh4ck5/N4xD0rk" target="_blank" rel="noopener">https://github.com/n4xh4ck5/N4xD0rk</a>(子域名查询工具)</li><li><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a>(一款高效的子域名爆破工具)</li><li><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a>(基于AsyncIO协程以及非重复字典的子域名爆破工具)</li><li><a href="https://github.com/giovanifss/Dumb" target="_blank" rel="noopener">https://github.com/giovanifss/Dumb</a>(快速而灵活的子域名爆破工具)</li><li><a href="https://github.com/UnaPibaGeek/ctfr" target="_blank" rel="noopener">https://github.com/UnaPibaGeek/ctfr</a>(通过域名透明证书记录获取子域名)</li><li><a href="https://github.com/caffix/amass" target="_blank" rel="noopener">https://github.com/caffix/amass</a>(Go语言开发的子域名枚举工具)</li><li><a href="https://github.com/Ice3man543/subfinder" target="_blank" rel="noopener">https://github.com/Ice3man543/subfinder</a>(继承于sublist3r项目的模块化体系结构，一个强劲的子域名枚举工具)</li></ul><h3 id="数据库类漏洞扫描器或爆破工具"><a href="#数据库类漏洞扫描器或爆破工具" class="headerlink" title="数据库类漏洞扫描器或爆破工具"></a>数据库类漏洞扫描器或爆破工具</h3><ul><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a>(一款基于SQLMAP和查尔斯的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a>(99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/LoRexxar/Feigong" target="_blank" rel="noopener">https://github.com/LoRexxar/Feigong</a>(针对各种情况自由变化的MySQL注入脚本)</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a>(一款针对MongoDB中的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a>(SQL盲注利用框架)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a>(攻击SQLSERVER的Powershell的脚本框架)</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a>(一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a>(MongoDB审计及渗透工具)</li><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework" target="_blank" rel="noopener">https://github.com/torque59/Nosql-Exploitation-Framework</a>(NoSQL扫描/爆破工具)</li><li><a href="https://github.com/missDronio/blindy" target="_blank" rel="noopener">https://github.com/missDronio/blindy</a>(MySQL盲注爆破工具)</li><li><a href="https://github.com/fengxuangit/Fox-scan" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan</a>(基于SQLMAP的主动和被动资源发现的漏洞扫描工具)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a>(用于SQL Server审计的powershell脚本)</li><li><a href="https://github.com/JohnTroony/Blisqy" target="_blank" rel="noopener">https://github.com/JohnTroony/Blisqy</a>(用于http header中的时间盲注爆破工具，仅针对MySQL / MariaDB)</li><li><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a>(Java编写的SQL注入工具)</li><li><a href="https://github.com/Hadesy2k/sqliv" target="_blank" rel="noopener">https://github.com/Hadesy2k/sqliv</a>(基于搜索引擎的批量SQL注入漏洞扫描器)</li><li><a href="https://github.com/s0md3v/sqlmate" target="_blank" rel="noopener">https://github.com/s0md3v/sqlmate</a>(在sqlmap基础上增加了目录扫描，hash爆破等功能)</li><li><a href="https://github.com/m8r0wn/enumdb" target="_blank" rel="noopener">https://github.com/m8r0wn/enumdb</a>(Mysys以及MSSQL爆破脱裤工具)</li><li><a href="https://github.com/9tail123/wooscan" target="_blank" rel="noopener">https://github.com/9tail123/wooscan</a>(批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试)</li></ul><h3 id="弱口令-弱用户名扫描器或爆破工具"><a href="#弱口令-弱用户名扫描器或爆破工具" class="headerlink" title="弱口令/弱用户名扫描器或爆破工具"></a>弱口令/弱用户名扫描器或爆破工具</h3><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a>(一个简单的HTTP暴力破解，撞库攻击脚本)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a>(对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a>(根据用户习惯生成弱口令探测字典脚本)</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a>(Go写的协程版的ssh \ redis \ mongodb弱口令破解工具)</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a>(暴力破解字典建立工具)</li><li><a href="https://github.com/shengqi158/weak_password_detect" target="_blank" rel="noopener">https://github.com/shengqi158/weak_password_detect</a>(多线程探测弱口令)</li><li><a href="https://github.com/s0md3v/Blazy" target="_blank" rel="noopener">https://github.com/s0md3v/Blazy</a>(支持测试CSRF，Clickjacking，Cloudflare和WAF的弱口令探测器)</li><li><a href="https://github.com/MooseDojo/myBFF" target="_blank" rel="noopener">https://github.com/MooseDojo/myBFF</a>(对CiscoVPN，Citrix Gateway等各类服务进行弱口令检测的脚本)</li></ul><h3 id="物联网设备识别工具或扫描器"><a href="#物联网设备识别工具或扫描器" class="headerlink" title="物联网设备识别工具或扫描器"></a>物联网设备识别工具或扫描器</h3><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a>(物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a>(使用nmap扫描IoT设备)</li><li><a href="https://github.com/googleinurl/RouterHunterBR" target="_blank" rel="noopener">https://github.com/googleinurl/RouterHunterBR</a>(路由器设备漏洞扫描利用)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a>(Telnet服务密码撞库)</li><li><a href="https://github.com/viraintel/OWASP-Nettacker" target="_blank" rel="noopener">https://github.com/viraintel/OWASP-Nettacker</a>(自动化信息搜集及渗透测试工具，比较适用于IoT扫描)</li><li><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a>(嵌入式设备漏洞扫描及利用工具)</li></ul><h3 id="反射型或基于DOM的XSS扫描器"><a href="#反射型或基于DOM的XSS扫描器" class="headerlink" title="反射型或基于DOM的XSS扫描器"></a>反射型或基于DOM的XSS扫描器</h3><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a>(一款XSS扫描器，可暴力注入参数)</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a>(小型XSS扫描器，也可检测CRLF，XSS，点击劫持的)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a>(PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a>(批量扫描XSS的python脚本)</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a>(自动化检测页面是否存在XSS和跨站请求伪造漏洞的浏览器插件)</li><li><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a>(使用命令行进行XSS批量检测)</li><li><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a>(可识别和绕过WAF的XSS扫描工具)</li><li><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a>(支持GET，POST方式的高效XSS扫描器)</li></ul><h3 id="企业资产管理或信息泄露搜集工具"><a href="#企业资产管理或信息泄露搜集工具" class="headerlink" title="企业资产管理或信息泄露搜集工具"></a>企业资产管理或信息泄露搜集工具</h3><ul><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a>(网络资产识别引擎，漏洞检测引擎)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a>(企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱，子域名，主持人)</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a>(Bing，google，360，zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息)</li><li><a href="https://github.com/Ekultek/Zeus-Scanner" target="_blank" rel="noopener">https://github.com/Ekultek/Zeus-Scanner</a>(能成抓取搜索引擎隐藏的url，并交由sqlmap，nmap扫描)</li><li><a href="https://github.com/0xbug/Biu-framework" target="_blank" rel="noopener">https://github.com/0xbug/Biu-framework</a>(企业内网基础服务安全扫描框架)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a>(github Repo信息搜集工具)</li><li><a href="https://github.com/shengqi158/svnhack" target="_blank" rel="noopener">https://github.com/shengqi158/svnhack</a>(.svn文件夹泄漏利用工具)</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a>(GitHub敏感信息扫描工具)</li><li><a href="https://github.com/0xbug/Hawkeye" target="_blank" rel="noopener">https://github.com/0xbug/Hawkeye</a>(企业资产，敏感信息GitHub泄露监控系统)</li><li><a href="https://github.com/lianfeng30/githubscan" target="_blank" rel="noopener">https://github.com/lianfeng30/githubscan</a>(根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具)</li><li><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a>(github敏感信息搜索工具)</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a>( .git文件夹泄漏利用工具)</li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a>(GitHub敏感信息扫描工具，包括检测提交等)</li><li><a href="https://github.com/1N3/Goohak" target="_blank" rel="noopener">https://github.com/1N3/Goohak</a>(自动化对指定域名进行Google hacking搜索并收集信息)</li><li><a href="https://github.com/UKHomeOffice/repo-security-scanner" target="_blank" rel="noopener">https://github.com/UKHomeOffice/repo-security-scanner</a>(用于搜索git的承诺中的敏感信息，例如密码，私钥等的客户端工具)</li><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a>(Github敏感信息泄露扫描)</li><li><a href="https://github.com/MiSecurity/x-patrol" target="_blank" rel="noopener">https://github.com/MiSecurity/x-patrol</a>(Github泄露巡航工具)</li><li><a href="https://github.com/1N3/BlackWidow" target="_blank" rel="noopener">https://github.com/1N3/BlackWidow</a>(Web站点信息搜集工具，包括邮箱，电话等信息)</li><li><a href="https://github.com/anshumanbh/git-all-secrets" target="_blank" rel="noopener">https://github.com/anshumanbh/git-all-secrets</a>(集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具)</li><li><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a>(可以提取网址，电子邮件，文件，网站帐户等的高速爬虫)</li></ul><h3 id="webshell的检测或木马分析工具"><a href="#webshell的检测或木马分析工具" class="headerlink" title="webshell的检测或木马分析工具"></a>webshell的检测或木马分析工具</h3><ul><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a>(一款简单的webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a>(哈勃分析系统，LINUX系统病毒分析及安全检测)</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a>(使用python实现的集成ClamAV，ESET，Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a>(一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a>(测试效率高达99%的webshell检测工具)</li><li><a href="https://github.com/erevus-cn/scan_webshell" target="_blank" rel="noopener">https://github.com/erevus-cn/scan_webshell</a>(一款简洁的的Webshell扫描工具)</li><li><a href="https://github.com/emposha/Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/Shell-Detector</a>(Webshell扫描工具，支持php / perl / asp / aspx webshell扫描)</li><li><a href="https://github.com/m4rco-/dorothy2" target="_blank" rel="noopener">https://github.com/m4rco-/dorothy2</a>(一款木马，僵尸网络分析框架)</li><li><a href="https://github.com/droidefense/engine" target="_blank" rel="noopener">https://github.com/droidefense/engine</a>(高级安卓木马病毒分析框架)</li></ul><h3 id="内网渗透或扫描工具"><a href="#内网渗透或扫描工具" class="headerlink" title="内网渗透或扫描工具"></a>内网渗透或扫描工具</h3><ul><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a>(基于网络流量的内网探测框架)</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a>(调用Windows API枚举用户登录信息)</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a>(自动化利用XSS入侵内网)</li></ul><h3 id="中间件扫描器或指纹识别工具"><a href="#中间件扫描器或指纹识别工具" class="headerlink" title="中间件扫描器或指纹识别工具"></a>中间件扫描器或指纹识别工具</h3><ul><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a>(目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a>(动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a>(WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a>(SSL类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a>(Web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a>(Web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a>(网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a>(基于Masscan和Zmap的网络扫描器)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a>(网络资产信息扫描，ICMP存活探测，端口扫描，端口指纹服务识别)</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a>(中间件扫描)</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a>(web路径收集与扫描)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a>(C段横幅与路径扫描)</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a>(端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a>(waf自动暴破)</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a>(尝试找出cdn背后的真实ip)</li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a>(基于Bing搜索引擎的C段/旁站查询，多线程，支持API)</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a>(多线程WEB目录爆破工具)</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a>(一个爬虫式的网段Web主机发现小工具)</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a>(Thorn上实现的分布式任务分发的ip端口漏洞扫描器)</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a>(类似zgrab的快速TCP指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a>(CDN识别，检测)</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a>(基于爬虫的web路径扫描器)</li><li><a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a>(服务器ssh配置信息扫描)</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a>(针对域名及其子域名的资产数据检测/扫描，包括http / https检测等)</li><li><a href="https://github.com/ggusoft/inforfinder" target="_blank" rel="noopener">https://github.com/ggusoft/inforfinder</a>(域名资产收集及指纹识别工具)</li><li><a href="https://github.com/boy-hack/gwhatweb" target="_blank" rel="noopener">https://github.com/boy-hack/gwhatweb</a>(CMS识别python gevent实现)</li><li><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">https://github.com/Mosuan/FileScan</a>(敏感文件扫描/二次判断降低误报率/扫描内容规则化/多目录扫描)</li><li><a href="https://github.com/Xyntax/FileSensor" target="_blank" rel="noopener">https://github.com/Xyntax/FileSensor</a>(基于爬虫的动态敏感文件探测工具)</li><li><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a>(web路径扫描工具)</li><li><a href="https://github.com/0xbug/Howl" target="_blank" rel="noopener">https://github.com/0xbug/Howl</a>(网络设备web服务指纹扫描与检索)</li><li><a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener">https://github.com/mozilla/cipherscan</a>(目标主机服务ssl类型识别)</li><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a>(Web应用fuzz工具，框架，同时可用于web路径/服务扫描)</li><li><a href="https://github.com/s0md3v/Breacher" target="_blank" rel="noopener">https://github.com/s0md3v/Breacher</a>(多线程的后台路径扫描器，也可用于发现重定向漏洞后执行)</li><li><a href="https://github.com/ztgrace/changeme" target="_blank" rel="noopener">https://github.com/ztgrace/changeme</a>(弱口令扫描器，不仅支持普通登录页，也支持ssh，mongodb等组件)</li><li><a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">https://github.com/medbenali/CyberScan</a>(渗透测试辅助工具，支持分析数据包，解码，端口扫描，IP地址分析等)</li><li><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a>(基于nmap的扫描器，与cve漏洞关联)</li><li><a href="https://github.com/scipag/vulscan" target="_blank" rel="noopener">https://github.com/scipag/vulscan</a>(基于nmap的高级漏洞扫描器，命令行环境使用)</li><li><a href="https://github.com/jekyc/wig" target="_blank" rel="noopener">https://github.com/jekyc/wig</a>(web应用信息搜集工具)</li><li><a href="https://github.com/eldraco/domain_analyzer" target="_blank" rel="noopener">https://github.com/eldraco/domain_analyzer</a>(围绕web服务的域名进行信息收集和“域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等)</li><li><a href="https://github.com/cloudtracer/paskto" target="_blank" rel="noopener">https://github.com/cloudtracer/paskto</a>(基于Nikto扫描规则的被动式路径扫描以及信息爬虫)</li><li><a href="https://github.com/zerokeeper/WebEye" target="_blank" rel="noopener">https://github.com/zerokeeper/WebEye</a>(快速识别WEB服务器类型，CMS类型，WAF类型，WHOIS信息，以及语言框架)</li><li><a href="https://github.com/m3liot/shcheck" target="_blank" rel="noopener">https://github.com/m3liot/shcheck</a>(用于检查web服务的http header的安全性)</li><li><a href="https://github.com/aipengjie/sensitivefilescan" target="_blank" rel="noopener">https://github.com/aipengjie/sensitivefilescan</a>(一款高效快捷的敏感文件扫描工具)</li><li><a href="https://github.com/fnk0c/cangibrina" target="_blank" rel="noopener">https://github.com/fnk0c/cangibrina</a>(通过字典穷举，google，robots.txt等途径的跨平台后台管理路径扫描器)</li><li><a href="https://github.com/n4xh4ck5/CMSsc4n" target="_blank" rel="noopener">https://github.com/n4xh4ck5/CMSsc4n</a>(常规CMS指纹识别)</li><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a>(WAF指纹识别及自动化绕过工具)</li><li><a href="https://github.com/dzonerzy/goWAPT" target="_blank" rel="noopener">https://github.com/dzonerzy/goWAPT</a>(网络应用模糊工具，框架，同时可用于网络路径/服务扫描)</li><li><a href="https://github.com/blackye/webdirdig" target="_blank" rel="noopener">https://github.com/blackye/webdirdig</a>(web敏感目录/信息泄漏扫描脚本)</li><li><a href="https://github.com/GitHackTools/BillCipher" target="_blank" rel="noopener">https://github.com/GitHackTools/BillCipher</a>(用于网站或IP地址的信息收集工具)</li><li><a href="https://github.com/boy-hack/w8fuckcdn" target="_blank" rel="noopener">https://github.com/boy-hack/w8fuckcdn</a>(通过扫描全网获得真实IP的自动化程序)</li><li><a href="https://github.com/boy-hack/w11scan" target="_blank" rel="noopener">https://github.com/boy-hack/w11scan</a>(分布式WEB指纹识别平台)</li><li><a href="https://github.com/Nekmo/dirhunt" target="_blank" rel="noopener">https://github.com/Nekmo/dirhunt</a>(爬虫式web目录扫描工具)</li></ul><h3 id="专用-即特定性针对某些组件-扫描器"><a href="#专用-即特定性针对某些组件-扫描器" class="headerlink" title="专用(即特定性针对某些组件)扫描器"></a>专用(即特定性针对某些组件)扫描器</h3><ul><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a>(Jenkins漏洞探测，用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a>(首款集成化的Discuz扫描工具)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a>(一款简洁优雅的CMS扫描利用框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a>(IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a>(flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a>(一个起毛服务器端模板注入漏洞的半自动化工具)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a>(服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a>(Docker扫描工具)</li><li><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a>(一款精简的wordpress扫描工具)</li><li><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a>(集成化wordpress漏洞利用框架)</li><li><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a>(用于扫描J2EE应用的一款burpsuite插件)</li><li><a href="https://github.com/riusksk/StrutScan" target="_blank" rel="noopener">https://github.com/riusksk/StrutScan</a>(一款基于perl的strut2的历史漏洞扫描器)</li><li><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">https://github.com/D35m0nd142/LFISuite</a>(本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/0x4D31/salt-scanner" target="_blank" rel="noopener">https://github.com/0x4D31/salt-scanner</a>(基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA，slack平台结合使用)</li><li><a href="https://github.com/tijme/angularjs-csti-scanner" target="_blank" rel="noopener">https://github.com/tijme/angularjs-csti-scanner</a>(自动化探测客户端AngularJS模板注入漏洞工具)</li><li><a href="https://github.com/irsdl/IIS-ShortName-Scanner" target="_blank" rel="noopener">https://github.com/irsdl/IIS-ShortName-Scanner</a>(Java编写的IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/swisskyrepo/Wordpresscan" target="_blank" rel="noopener">https://github.com/swisskyrepo/Wordpresscan</a>(基于WPScan以及WPSeku的优化版wordpress扫描器)</li><li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="noopener">https://github.com/CHYbeta/cmsPoc</a>(CMS渗透测试框架)</li><li><a href="https://github.com/rudSarkar/crlf-injector" target="_blank" rel="noopener">https://github.com/rudSarkar/crlf-injector</a>(CRLF注入漏洞批量扫描)</li><li><a href="https://github.com/3gstudent/Smbtouch-Scanner" target="_blank" rel="noopener">https://github.com/3gstudent/Smbtouch-Scanner</a>(自动化扫描内网中存在的由影子经纪人泄露的ETERNAL系列漏洞)</li><li><a href="https://github.com/utiso/dorkbot" target="_blank" rel="noopener">https://github.com/utiso/dorkbot</a>(通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描)</li><li><a href="https://github.com/OsandaMalith/LFiFreak" target="_blank" rel="noopener">https://github.com/OsandaMalith/LFiFreak</a>(本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/mak-/parameth" target="_blank" rel="noopener">https://github.com/mak-/parameth</a>(用于枚举脚本的GET / POST未知参数字段)</li><li><a href="https://github.com/Lucifer1993/struts-scan" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan</a>(struts2的漏洞全版本检测和利用工具)</li><li><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a>(SSL漏洞扫描，例如心脏滴血漏洞等)</li><li><a href="https://github.com/NullArray/DorkNet" target="_blank" rel="noopener">https://github.com/NullArray/DorkNet</a>(基于搜索引擎的漏洞网页搜寻)</li><li><a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">https://github.com/NickstaDB/BaRMIe</a>(用于攻击爆破Java Remote Method Invocation服务的工具)</li><li><a href="https://github.com/RetireJS/grunt-retire" target="_blank" rel="noopener">https://github.com/RetireJS/grunt-retire</a>(扫描js扩展库的常见漏洞)</li><li><a href="https://github.com/kotobukki/BDA" target="_blank" rel="noopener">https://github.com/kotobukki/BDA</a>(针对的hadoop /火花等大数据平台的的漏洞探测工具)</li><li><a href="https://github.com/jagracey/Regex-DoS" target="_blank" rel="noopener">https://github.com/jagracey/Regex-DoS</a>(RegEx拒绝服务扫描器)</li><li><a href="https://github.com/milesrichardson/docker-onion-nmap" target="_blank" rel="noopener">https://github.com/milesrichardson/docker-onion-nmap</a>(使用NMAP扫描的Tor网络上隐藏的“洋葱”服务)</li><li><a href="https://github.com/Moham3dRiahi/XAttacker" target="_blank" rel="noopener">https://github.com/Moham3dRiahi/XAttacker</a>(Web CMS Exploit工具，包含针对主流CMS的66个不同的漏洞利用)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a>(一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/almandin/fuxploider" target="_blank" rel="noopener">https://github.com/almandin/fuxploider</a>(文件上传漏洞扫描器及利用工具)</li><li><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">https://github.com/Ice3man543/SubOver</a>(子域名接管漏洞检测工具，支持30+云服务托管检测)</li><li><a href="https://github.com/Jamalc0m/wphunter" target="_blank" rel="noopener">https://github.com/Jamalc0m/wphunter</a>(WordPress的漏洞扫描器，同时也支持敏感文件泄露扫描)</li><li><a href="https://github.com/retirejs/retire.js" target="_blank" rel="noopener">https://github.com/retirejs/retire.js</a>(检测网站依赖的JavaScript库中存在的已知通用漏洞)</li><li><a href="https://github.com/3xp10it/xupload" target="_blank" rel="noopener">https://github.com/3xp10it/xupload</a>(自动检测上传功能是否可上传webshell)</li><li><a href="https://github.com/mobrine-mob/M0B-tool" target="_blank" rel="noopener">https://github.com/mobrine-mob/M0B-tool</a>(CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/rezasp/vbscan" target="_blank" rel="noopener">https://github.com/rezasp/vbscan</a>(论坛框架vBulletin黑盒漏洞扫描器)</li><li><a href="https://github.com/MrSqar-Ye/BadMod" target="_blank" rel="noopener">https://github.com/MrSqar-Ye/BadMod</a>(CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a>(CMS漏洞检测和利用套件)</li><li><a href="https://github.com/cloudsploit/scans" target="_blank" rel="noopener">https://github.com/cloudsploit/scans</a>(AWS安全审计工具)</li><li><a href="https://github.com/radenvodka/SVScanner" target="_blank" rel="noopener">https://github.com/radenvodka/SVScanner</a>(针对wp，magento，joomla等CMS的漏洞扫描器及自动利用工具)</li><li><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a>(OWASP旗下joomla漏洞扫描项目)</li><li><a href="https://github.com/6IX7ine/djangohunter" target="_blank" rel="noopener">https://github.com/6IX7ine/djangohunter</a>(用于检测因错误配置导致敏感信息暴露的Django应用程序)</li></ul><h3 id="无线网络-审计-扫描器"><a href="#无线网络-审计-扫描器" class="headerlink" title="无线网络(审计)扫描器"></a>无线网络(审计)扫描器</h3><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a>(无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a>(Python网络/渗透测试工具)</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a>(无线安全渗透测试套件)</li><li><a href="https://github.com/MisterBianco/BoopSuite" target="_blank" rel="noopener">https://github.com/MisterBianco/BoopSuite</a>(无线网络审计工具，支持2-5GHZ频段)</li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a>(ARP欺骗，无线网络劫持)</li><li><a href="https://github.com/besimaltnok/PiFinger" target="_blank" rel="noopener">https://github.com/besimaltnok/PiFinger</a>(检查wifi是否是“大菠萝”所开放的热点，并给予网络评分)</li><li><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">https://github.com/derv82/wifite2</a>(自动化无线网络攻击工具wifite的重构版本)</li></ul><h3 id="局域网络-本地网络-扫描器"><a href="#局域网络-本地网络-扫描器" class="headerlink" title="局域网络(本地网络)扫描器"></a>局域网络(本地网络)扫描器</h3><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a>(基于BBScan via.lijiejie的本地网络扫描)</li><li>你自己网络扫描</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a>(基于JavaScript的的本地网络扫描)</li><li>自由软件网址：地址端口扫描</li></ul><h3 id="代码审计工具或扫描器"><a href="#代码审计工具或扫描器" class="headerlink" title="代码审计工具或扫描器"></a>代码审计工具或扫描器</h3><ul><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a>(白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a>(静态PHP代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a>(跟踪，分析PHP运行情况的工具)</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a>(的NodeJS应用代码审计)</li><li><a href="https://github.com/shengqi158/pyvulhunter" target="_blank" rel="noopener">https://github.com/shengqi158/pyvulhunter</a>(Python应用审计)</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a>(Ruby on Rails应用静态代码分析)</li><li><a href="https://github.com/python-security/pyt" target="_blank" rel="noopener">https://github.com/python-security/pyt</a>(Python应用静态代码审计)</li><li><a href="https://github.com/m4ll0k/WPSploit" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSploit</a>(WordPress插件代码安全审计)</li><li><a href="https://github.com/emanuil/php-reaper" target="_blank" rel="noopener">https://github.com/emanuil/php-reaper</a>(用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码)</li><li><a href="https://github.com/lowjoel/phortress" target="_blank" rel="noopener">https://github.com/lowjoel/phortress</a>(用于检测潜在安全漏洞的PHP静态代码分析工具)</li></ul><h3 id="模块化设计扫描器或漏洞检测框架"><a href="#模块化设计扫描器或漏洞检测框架" class="headerlink" title="模块化设计扫描器或漏洞检测框架"></a>模块化设计扫描器或漏洞检测框架</h3><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a>(自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a>(集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a>(BkScanner分布式，插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a>(ysrc出品的被动式漏洞扫描工具)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a>(基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a>(自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a>(定向全自动化渗透测试工具)</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a>(自动化渗透测试框架，支持cdn真实ip查找，指纹识别等)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a>(蟒插件化漏洞扫描器，支持生成扫描报表)</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a>(渗透测试插件化并发框架)</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a>(支持检测SQLI / XSS / LFI / RFI等漏洞的扫描器)</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a>(Web图形化的漏洞扫描框架)</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a>(一款网络化的自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/RED_HAWK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/RED_HAWK</a>(一款集成信息收集，漏洞扫描，指纹识别等的多合一扫描工具)</li><li><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">https://github.com/Arachni/arachni</a>(高度集成化的Web应用漏洞扫描框架，支持REST，RPC等api调用)</li><li><a href="https://github.com/infobyte/faraday" target="_blank" rel="noopener">https://github.com/infobyte/faraday</a>(集成化渗透测试辅助平台及漏洞管理平台)</li><li><a href="https://github.com/juansacco/exploitpack" target="_blank" rel="noopener">https://github.com/juansacco/exploitpack</a>(渗透测试集成框架，包含超过38,000+攻击)</li><li><a href="https://github.com/swisskyrepo/DamnWebScanner" target="_blank" rel="noopener">https://github.com/swisskyrepo/DamnWebScanner</a>(基于铬/歌剧插件的被动式漏洞扫描)</li><li><a href="https://github.com/anilbaranyelken/tulpar" target="_blank" rel="noopener">https://github.com/anilbaranyelken/tulpar</a>(支持多种网络漏洞扫描，命令行环境使用)</li><li><a href="https://github.com/m4ll0k/Spaghetti" target="_blank" rel="noopener">https://github.com/m4ll0k/Spaghetti</a>(web应用扫描器，支持指纹识别，文件目录爆破，SQL / XSS / RFI等漏洞扫描，也可直接用于struts，ShellShock等扫描)</li><li><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest" target="_blank" rel="noopener">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a>(集成子域名枚举，nmap，waf指纹识别等模块的web应用扫描器)</li><li><a href="https://github.com/0xsauby/yasuo" target="_blank" rel="noopener">https://github.com/0xsauby/yasuo</a>(使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞)</li><li><a href="https://github.com/hatRiot/clusterd" target="_blank" rel="noopener">https://github.com/hatRiot/clusterd</a>(Web应用自动化扫描框架，支持自动化上传webshell)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a>(一款开源Poc调用框架，可轻松调用Pocsuite，Tangscan，Beebeeto，Knowsec老版本POC，可使用docker部署)</li><li><a href="https://github.com/TophantTechnology/osprey" target="_blank" rel="noopener">https://github.com/TophantTechnology/osprey</a>(斗象能力中心出品并长期维护的开源漏洞检测框架)</li><li><a href="https://github.com/yangbh/Hammer" target="_blank" rel="noopener">https://github.com/yangbh/Hammer</a>(Web应用漏洞扫描框架)</li><li><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a>(Web应用漏洞扫描框架，基于python3)</li><li><a href="https://github.com/secrary/EllaScanner" target="_blank" rel="noopener">https://github.com/secrary/EllaScanner</a>(被动式漏洞扫描，支持历史cve编号漏洞识别)</li><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">https://github.com/zaproxy/zaproxy</a>(OWASP ZAP核心项目出品的综合性渗透测试工具)</li><li><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a>(Web服务综合型扫描器，用于指定目标的资产收集，安全配置缺陷或者安全漏洞扫描)</li><li><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">https://github.com/s0md3v/Striker</a>(一款多方位信息收集，指纹识别及漏洞扫描工具)</li><li><a href="https://github.com/dermotblair/webvulscan" target="_blank" rel="noopener">https://github.com/dermotblair/webvulscan</a>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞，支持输出pdf报告)</li><li><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework" target="_blank" rel="noopener">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a>(渗透测试辅助工具，综合利用框架)</li><li><a href="https://github.com/toyakula/luna" target="_blank" rel="noopener">https://github.com/toyakula/luna</a>(基于被动式扫描框架的自动化web漏洞扫描工具)</li><li><a href="https://github.com/Manisso/fsociety" target="_blank" rel="noopener">https://github.com/Manisso/fsociety</a>(渗透测试辅助框架，包含信息搜集，无线渗透，网络应用扫描等功能)</li><li><a href="https://github.com/boy-hack/w9scan" target="_blank" rel="noopener">https://github.com/boy-hack/w9scan</a>(内置1200+插件的web漏洞扫描框架)</li><li><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a>(Web服务安全评估工具，提供基于windows操作系统的简单.exe应用)</li><li><a href="https://github.com/AmyangXYZ/AssassinGo" target="_blank" rel="noopener">https://github.com/AmyangXYZ/AssassinGo</a>(使用去开发的可扩展以及高并发渗透测试框架)</li><li><a href="https://github.com/jeffzh3ng/InsectsAwake" target="_blank" rel="noopener">https://github.com/jeffzh3ng/InsectsAwake</a>(基于Flask应用框架的漏洞扫描系统)</li><li><a href="https://github.com/m4ll0k/Galileo" target="_blank" rel="noopener">https://github.com/m4ll0k/Galileo</a>(一个操作上类似metasploit的web应用安全审计框架)</li><li><a href="https://github.com/joker25000/Optiva-Framework" target="_blank" rel="noopener">https://github.com/joker25000/Optiva-Framework</a>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞)</li><li><a href="https://github.com/theInfectedDrake/TIDoS-Framework" target="_blank" rel="noopener">https://github.com/theInfectedDrake/TIDoS-Framework</a>(集成104个模块的Web应用程序渗透测试框架)</li></ul><h3 id="高级持续性威胁-APT-相关工具"><a href="#高级持续性威胁-APT-相关工具" class="headerlink" title="高级持续性威胁(APT)相关工具"></a>高级持续性威胁(APT)相关工具</h3><ul><li><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="noopener">https://github.com/Neo23x0/Loki</a>(一款APT入侵痕迹扫描器)</li></ul><h3 id="工控系统及大型网络相关安全工具"><a href="#工控系统及大型网络相关安全工具" class="headerlink" title="工控系统及大型网络相关安全工具"></a>工控系统及大型网络相关安全工具</h3><ul><li><a href="https://github.com/w3h/icsmaster/tree/master/nse" target="_blank" rel="noopener">https://github.com/w3h/icsmaster/tree/master/nse</a>(ICS设备nmap扫描脚本)</li><li><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a>(SDN安全评估框架)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性。&lt;/p&gt;
&lt;p&gt;转载自: &lt;a href=&quot;http://netsecurity.51cto.com/art/201812/588880.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://netsecurity.51cto.com/art/201812/588880.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举，数据库漏洞扫描，弱口令或信息泄漏扫描，端口扫描，指纹识别以及其他大型扫描器或模块化扫描器。&lt;br&gt;项目地址：&lt;a href=&quot;https://github.com/We5ter/Scanners-Box&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/We5ter/Scanners-Box&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="hack" scheme="http://yulongphp.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询优化</title>
    <link href="http://yulongphp.github.io/2017/05/05/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yulongphp.github.io/2017/05/05/mysql查询优化/</id>
    <published>2017-05-05T03:14:28.000Z</published>
    <updated>2018-08-22T09:43:49.625Z</updated>
    
    <content type="html"><![CDATA[<p>1、应尽量避免在  WHERE  子句中使用 != 或者 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>2、应尽量避免在  WHERE  子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num  IS  NULL;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>可以在 num 上设置默认值 0 ，确保表中 num 列没有 NULL 值，然后这样查询：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>3、对查询进行优化，应尽量避免全表扫描，首先应考虑在  WHERE  及 ORDER BY 涉及的列上建立索引。</p><p>4、尽量避免在  WHERE  子句中使用 OR 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">10</span> OR num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>可以这样查询：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">10</span> UNION ALL SELECT  id  FROM  t  WHERE  num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>5、下面的查询也将导致全表扫描：（不能前置百分号）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  name like <span class="string">'%abc%'</span>;</span><br></pre></td></tr></table></figure></p><p>若要提高效率，可以考虑全文检索。</p><p>6、 IN 和 NOT IN 也要慎用，否则会导致全表扫描，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num IN (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>对于连续的数值，能用 between 就不要用 IN 了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num BETWEEN <span class="number">1</span> AND <span class="number">3</span>;</span><br><span class="line">SELECT  xx,phone  FROM  send  a JOIN (</span><br><span class="line"> SELECT  <span class="string">'13891030091'</span> phone  UNION SELECT  <span class="string">'13992085916'</span> …………  UNION  SELECT  <span class="string">'13619100234'</span> ) b</span><br><span class="line">  on  a.Phone=b.phone</span><br></pre></td></tr></table></figure></p><p>–替代下面  很多数据隔开的时候<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN (<span class="string">'13891030091'</span>,<span class="string">'13992085916'</span>,<span class="string">'13619100234'</span>…………)</span><br></pre></td></tr></table></figure></p><p>7、如果在  WHERE  子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择到运行时；它必须在编译时进行选择。然而，如果在编译时简历访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = @num;</span><br></pre></td></tr></table></figure></p><p>可以改为强制查询使用索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t <span class="keyword">with</span>(index(索引名))  WHERE  num = @num;</span><br></pre></td></tr></table></figure></p><p>8、应尽量避免在  WHERE  子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num/<span class="number">2</span> = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>应改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">100</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>9、应尽量避免在  WHERE  子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  substring(name, <span class="number">1</span>, <span class="number">3</span>) = ’abc’–name;  //以abc开头的id</span><br><span class="line">SELECT  id  FROM  t  WHERE  datediff(day,createdate,’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′) = <span class="number">0</span>–’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′;  //生成的id</span><br></pre></td></tr></table></figure></p><p>应改为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  name like ‘abc%’</span><br><span class="line">SELECT  id  FROM  t  WHERE  createdate &gt;= ’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′ <span class="keyword">and</span> createdate &lt; ’<span class="number">2005</span><span class="number">-12</span><span class="number">-1</span>′;</span><br></pre></td></tr></table></figure></p><p>10、不要在  WHERE  子句中的 “=” 左边进行函数，算术运算或者其他表达式运算，否则系统将可能无法正确使用索引。</p><p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><p>12、不要些一些没有意义的查询，如需要生成一个空表结构：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  col1,col2 into <span class="comment">#t  FROM  t  WHERE  1=0;</span></span><br></pre></td></tr></table></figure></p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="comment">#t(…)</span></span><br></pre></td></tr></table></figure></p><p>13、很多时候用 exists 代替 IN 是一个好的选择：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  num  FROM  a  WHERE  num IN (SELECT  num  FROM  b);</span><br></pre></td></tr></table></figure></p><p>用下面的语句替换：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  num  FROM  a  WHERE  exists(SELECT  <span class="number">1</span>  FROM  b  WHERE  num=a.num);</span><br></pre></td></tr></table></figure></p><p>14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><p>15、索引并不是越多越好，索引固然可以提高相应的 SELECT  的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为clustered 索引。</p><p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>19、任何地方都不要使用 SELECT  *  FROM  t ，用具体的字段列表代替 *，不要返回用不到的任何字段。</p><p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 SELECT  into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 create table，然后 insert。</p><p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p>28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>30、尽量避免大事务操作，提高系统并发能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、应尽量避免在  WHERE  子句中使用 != 或者 &amp;lt;&amp;gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。&lt;/p&gt;
&lt;p&gt;2、应尽量避免在  WHERE  子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：&lt;br&gt;    &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT  id  FROM  t  WHERE  num  IS  NULL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yulongphp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yulongphp.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能监控那些令人激赏的命令行工具</title>
    <link href="http://yulongphp.github.io/2016/03/30/linux%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yulongphp.github.io/2016/03/30/linux性能监控常用命令/</id>
    <published>2016-03-30T07:30:00.000Z</published>
    <updated>2018-08-22T09:43:49.632Z</updated>
    
    <content type="html"><![CDATA[<p>转载出处：<a href="http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance" target="_blank" rel="noopener">http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance</a><br>英文原文：<a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/" target="_blank" rel="noopener">18 Command Line Tools to Monitor Linux Performance</a></p><p>对于系统和网络管理员来说每天监控和调试Linux系统的性能问题是一项繁重的工作。在IT领域作为一名Linux系统的管理员工作5年后，我逐渐认识到监控和保持系统启动并运行是多么的不容易。基于此原因，我们已编写了最常使用的18个命令行工具列表，这些工具将有助于每个Linux/Unix 系统管理员的工作。这些命令行工具可以在各种Linux系统下使用，可以用于监控和查找产生性能问题的原因。这个命令行工具列表提供了足够的工具，您可以挑选适用于您的监控场景的工具。<br><a id="more"></a></p><h3 id="1-Top-Linux进程监控"><a href="#1-Top-Linux进程监控" class="headerlink" title="1.Top-Linux进程监控"></a>1.Top-Linux进程监控</h3><p>Linux下的Top命令是一个性能监控程序，许多系统管理员常常用它来监控Linux性能，在许多<strong>Linux或者类Unix</strong>操作系统里都有这个命令。Top命令用于按一定的顺序显示所有正在运行而且处于活动状态的实时进程，而且会定期更新显示结果。这条命令显示了<strong>CPU的使用率、内存使用率、交换内存使用大小、高速缓存使用大小、缓冲区使用大小，进程PID、所使用命令</strong>以及其他。它还可以显示正在运行进程的内存和CPU占用多的情况。对系统管理员来说，top命令式是一个非常有用的，它可用于监控系统并在需要的时候采取正确的处理动作。让我们看看实际中的top命令。</p><pre><code># top </code></pre><p><a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/Top%20Command%20Example" target="_blank" rel="noopener"><img src="/images/topCommandExample.jpg" alt="Top Command Example" title="Top Command Example"></a> Top命令举例<br> <strong>有关Top命令更多的例子，请阅读</strong> <a href="http://www.tecmint.com/12-top-command-examples-in-linux/" target="_blank" rel="noopener">:Linux下12个使用Top命令的例子</a>。</p><h3 id="2-VmStat-–-虚拟内存统计"><a href="#2-VmStat-–-虚拟内存统计" class="headerlink" title="2. VmStat – 虚拟内存统计"></a>2. VmStat – 虚拟内存统计</h3><p>Linux 的&nbsp;<strong>VmStat</strong>&nbsp;命令用于显示<strong>虚拟内存</strong>、<strong>内核线程</strong>、<strong>磁盘</strong>、<strong>系统进程</strong>、<strong>I/O 块</strong>、<strong>中断</strong>、<strong>CPU 活动</strong> 等的统计信息。缺省情况下， vmstat 命令在 Linux 系统下不可用，你需要安装一个包含了 vmstat 程序的&nbsp;<strong>sysstat</strong>&nbsp;软件包。命令格式的常见用法是：</p><pre><code># vmstatprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu----- r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st 1  0      0 810420  97380  70628    0    0   115     4   89   79  1  6 90  3  0</code></pre><p><strong>更多的 vmstat 例子，请阅读 :</strong> <a href="http://www.tecmint.com/linux-performance-monitoring-with-vmstat-and-iostat-commands/" target="_blank" rel="noopener">6 Linux 下的 Vmstat 命令实例</a> </p><h3 id="3-Lsof-列出打开的文件"><a href="#3-Lsof-列出打开的文件" class="headerlink" title="3.Lsof-列出打开的文件"></a>3.Lsof-列出打开的文件</h3><p>在许多Linux或者类Unix系统里都有lsof命令，它常用于以列表的形式显示所有打开的文件和进程。打开的文件包括<strong>磁盘文件、网络套接字、管道、设备和进程</strong>。使用这条命令的主要情形之一就是在无法挂载磁盘和显示正在使用或者打开某个文件的错误信息的时候。使用这条命令，你可以很容易地看到正在使用哪个文件。这条命令最常用的格式如下：</p><pre>#&nbsp;lsofCOMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USER&nbsp;&nbsp;&nbsp;FD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NODE&nbsp;NAMEinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;cwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4096&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;/init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;rtd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4096&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;/init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;38652&nbsp;&nbsp;&nbsp;17710339&nbsp;/sbin/initinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;129900&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196453&nbsp;/lib/ld-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;1693812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196454&nbsp;/lib/libc-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;20668&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196479&nbsp;/lib/libdl-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;245376&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196419&nbsp;/lib/libsepol.so.1init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;93508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196431&nbsp;/lib/libselinux.so.1init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;10u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FIFO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;953&nbsp;/dev/initctl</pre> <p><strong>有关lsof命令的用法和例子的更多信息，请参考</strong>： <a href="http://www.tecmint.com/10-lsof-command-examples-in-linux/" target="_blank" rel="noopener">Linux下10个使用lsof命令的例子</a>。</p><h3 id="4-Tcpdump-网络包分析器"><a href="#4-Tcpdump-网络包分析器" class="headerlink" title="4.Tcpdump-网络包分析器"></a>4.Tcpdump-网络包分析器</h3><p><strong>Tcpdump</strong>是最广泛使用的<strong>网络包分析器或者包监控程序</strong>之一，它用于捕捉或者过滤网络上指定接口上接收或者传输的<strong>TCP/IP</strong>包。它还有一个选项用于把捕捉到的包保存到文件里，以便以后进行分析。在几乎所有主要的Linux发布里，tcpdump都可以使用。</p><pre>#&nbsp;tcpdump&nbsp;-i&nbsp;eth0tcpdump:&nbsp;verbose&nbsp;output&nbsp;suppressed,&nbsp;use&nbsp;-v&nbsp;or&nbsp;-vv&nbsp;for&nbsp;full&nbsp;protocol&nbsp;decodelistening&nbsp;on&nbsp;eth0,&nbsp;link-type&nbsp;EN10MB&nbsp;(Ethernet),&nbsp;capture&nbsp;size&nbsp;96&nbsp;bytes22:08:59.617628&nbsp;IP&nbsp;tecmint.com.ssh&nbsp;&gt;&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472:&nbsp;P&nbsp;2532133365:2532133481(116)&nbsp;ack&nbsp;3561562349&nbsp;win&nbsp;964822:09:07.653466&nbsp;IP&nbsp;tecmint.com.ssh&nbsp;&gt;&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472:&nbsp;P&nbsp;116:232(116)&nbsp;ack&nbsp;1&nbsp;win&nbsp;964822:08:59.617916&nbsp;IP&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472&nbsp;&gt;&nbsp;tecmint.com.ssh:&nbsp;.&nbsp;ack&nbsp;116&nbsp;win&nbsp;64347</pre> <p><strong>要想获得更多有关tcpdump用法的信息，请参阅</strong>： <a href="http://www.tecmint.com/12-tcpdump-commands-a-network-sniffer-tool/" target="_blank" rel="noopener">Linux下12个使用Tcpdump命令的例子。</a> </p><h3 id="5-Netstat-网络状态统计"><a href="#5-Netstat-网络状态统计" class="headerlink" title="5.Netstat-网络状态统计"></a>5.Netstat-网络状态统计</h3><p>Netstat是一个用于监控<strong>进出网络</strong>的包和网络接口统计的命令行工具。它是一个非常有用的工具，系统管理员可以用来监控网络性能，定位并解决网络相关问题。</p><pre>#&nbsp;netstat&nbsp;-a&nbsp;|&nbsp;moreActive&nbsp;Internet&nbsp;connections&nbsp;(servers&nbsp;and&nbsp;established)Proto&nbsp;Recv-Q&nbsp;Send-Q&nbsp;Local&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foreign&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statetcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:mysql&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:sunrpc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:realm-rusd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:ftp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:ipp&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;localhost.localdomain:42709&nbsp;TIME_WAITtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;localhost.localdomain:42710&nbsp;TIME_WAITtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:http&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:ssh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:https&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTEN</pre> <p><strong>有关Netstat更多的例子，请参阅</strong>: <a href="http://www.tecmint.com/20-netstat-commands-for-linux-network-management/" target="_blank" rel="noopener">Linux下20个使用Netstat命令的例子。</a> </p><h3 id="6-Htop-–-Linux进程监控"><a href="#6-Htop-–-Linux进程监控" class="headerlink" title="6. Htop – Linux进程监控"></a>6. Htop – Linux进程监控</h3><p><strong>Htop</strong>&nbsp;是一个非常高级的交互式的实时linux进程监控工具。 它和top命令十分相似，但是它具有更丰富的特性，例如用户可以友好地管理进程，快捷键，垂直和水平方式显示进程等等。 Htop是一个第三方工具，它不包含在linux系统中，你需要使用YUM包管理工具去安装它。 关于安装的更多信息，请阅读下文.</p><pre>#&nbsp;htop</pre> <p><img src="/images/htopCommandExample.jpg" alt="Htop Command Example" title="Htop Command Example"> </p><p>Htop 命令示例截图</p><p><strong>对于Htop的安装，请读&nbsp;: <a href="http://www.tecmint.com/install-htop-linux-process-monitoring-for-rhel-centos-fedora/" target="_blank" rel="noopener">在Linux安装Htop(Linux进程监控)</a></strong> </p><h3 id="7-Iotop-监控Linux磁盘I-O"><a href="#7-Iotop-监控Linux磁盘I-O" class="headerlink" title="7.Iotop-监控Linux磁盘I/O"></a><strong>7.Iotop-监控Linux磁盘I/O</strong></h3><p><strong>Iotop</strong>命令同样也非常类似于<strong>top**</strong>命令<strong>和</strong>Htop程序<strong>，不过它具有监控并显示实时</strong>磁盘I/O和进程**的统计功能。在查找具体进程和大量使用磁盘读写进程的时候，这个工具就非常有用。</p><pre>#&nbsp;iotop</pre> <p><img src="/images/ioTopCommandExample.jpg" alt="Iotop Command Example" title="Iotop Command Example"> Iotop命令举例的截图<br> <strong>有关如何安装和使用iotop的信息，请阅读</strong>： <a href="http://www.tecmint.com/install-iotop-monitor-linux-disk-io-in-rhel-centos-and-fedora/" target="_blank" rel="noopener">在Linux下安装Iotop。</a> </p><h3 id="8-Iostat-输入-输出统计"><a href="#8-Iostat-输入-输出统计" class="headerlink" title="8.Iostat-输入/输出统计"></a>8.Iostat-输入/输出统计</h3><p><strong>Iostat</strong>是一个用于收集显示系统存储设备<strong>输入和输出</strong>状态统计的简单工具。这个工具常常用来追踪存储设备的性能问题，其中存储设备包括<strong>设备、本地磁盘，以及诸如使用NFS等的远端磁盘</strong>。</p><pre>#&nbsp;iostatLinux&nbsp;2.6.18-238.9.1.el5&nbsp;(tecmint.com)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;09/13/2012avg-cpu:&nbsp;&nbsp;%user&nbsp;&nbsp;&nbsp;%nice&nbsp;%system&nbsp;%iowait&nbsp;&nbsp;%steal&nbsp;&nbsp;&nbsp;%idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.60&nbsp;&nbsp;&nbsp;&nbsp;3.65&nbsp;&nbsp;&nbsp;&nbsp;1.04&nbsp;&nbsp;&nbsp;&nbsp;4.29&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;88.42Device:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tps&nbsp;&nbsp;&nbsp;Blk_read/s&nbsp;&nbsp;&nbsp;Blk_wrtn/s&nbsp;&nbsp;&nbsp;Blk_read&nbsp;&nbsp;&nbsp;Blk_wrtncciss/c0d0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17.79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;545.80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;256.52&nbsp;&nbsp;855159769&nbsp;&nbsp;401914750cciss/c0d0p1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5459&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3518cciss/c0d0p2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16.45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;533.97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;245.18&nbsp;&nbsp;836631746&nbsp;&nbsp;384153384cciss/c0d0p3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.97&nbsp;&nbsp;&nbsp;&nbsp;8737650&nbsp;&nbsp;&nbsp;&nbsp;6215544cciss/c0d0p4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0cciss/c0d0p5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.03&nbsp;&nbsp;&nbsp;&nbsp;5936778&nbsp;&nbsp;&nbsp;&nbsp;7882528cciss/c0d0p6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.08&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.34&nbsp;&nbsp;&nbsp;&nbsp;3847771&nbsp;&nbsp;&nbsp;&nbsp;3659776</pre> <p><strong>有关iostat用法和举例的更多信息，请访问</strong>: <a href="http://www.tecmint.com/linux-performance-monitoring-with-vmstat-and-iostat-commands/" target="_blank" rel="noopener">Linux下6个使用iostat命令的例子</a>。</p><h3 id="9-IPTraf-实时局域网IP监控"><a href="#9-IPTraf-实时局域网IP监控" class="headerlink" title="9.IPTraf-实时局域网IP监控"></a>9.IPTraf-实时局域网IP监控</h3><p><strong>IPTraf</strong>是一个在<strong>Linux</strong>控制台运行的、开放源代码的实时网络（<strong>局域网</strong>）监控应用。它采集了大量信息，比如通过网络的IP流量监控，包括TCP标记、ICMP详细信息、TCP/UDP流量分离、TCP连接包和字节数。同时还采集有关接口状态的常见信息和详细信息：TCP、UDP、IP、ICMP、非IP，IP校验和错误，接口活动等。</p><p><img src="/images/iptraf.png" alt="IP Traffic Monitor"> </p><p>IP流量监控<br> <strong>有关IPTraf工具用法以及其他更多信息，请访问：</strong> <a href="http://www.tecmint.com/real-time-interactive-ip-lan-monitoring-with-iptraf-tool/" target="_blank" rel="noopener">IPTraf网络监控工具</a>。</p><h3 id="10-psacct-或者-acct-监视用户活动"><a href="#10-psacct-或者-acct-监视用户活动" class="headerlink" title="10. psacct 或者 acct - 监视用户活动"></a>10. psacct 或者 acct - 监视用户活动</h3><p>psacct或者acct工具用于监视系统里每个用户的活动状况。这两个服务进程运行在后台，它们对系统上运行的每个用户的所有活动进行近距离监视，同时还监视这些活动所使用的资源情况。</p><p>系统管理员可以使用这两个工具跟踪每个用户的活动，比如用户正在做什么，他们提交了那些命令，他们使用了多少资源，他们在系统上持续了多长时间等等。</p><p>有关这些命令的安装和用法举例信息，请参阅文章：<a href="http://www.tecmint.com/how-to-monitor-user-activity-with-psacct-or-acct-tools/" target="_blank" rel="noopener">使用psacct或者acct监视用户活动</a>。</p><h3 id="11-Monit-Linux进程和服务监控工具"><a href="#11-Monit-Linux进程和服务监控工具" class="headerlink" title="11.Monit - Linux进程和服务监控工具"></a>11.Monit - Linux进程和服务监控工具</h3><p>Monit是一个免费的开源软件，也是一个基于网络的进程监控工具。它能自动监控和管理系统进程，程序，文件，文件夹，权限，总和验证码和文件系统。</p><p>这个软件能监控像Apache, MySQL, Mail, FTP, ProFTP, Nginx, SSH这样的服务。你可以通过命令行或者这个软件提供的网络借口来查看系统状态。</p><p><img src="/images/moint.jpg" alt="The Interface of Moint"> </p><p>Monit Linux系统监控</p><p>更多内容请参阅：<a href="http://www.tecmint.com/how-to-install-and-setup-monit-linux-process-and-services-monitoring-program/" target="_blank" rel="noopener">用Monit监控Linux进程</a> </p><h3 id="12-NetHogs-监视每个进程使用的网络带宽"><a href="#12-NetHogs-监视每个进程使用的网络带宽" class="headerlink" title="12.NetHogs-监视每个进程使用的网络带宽"></a>12.NetHogs-监视每个进程使用的网络带宽</h3><p><strong>NetHogs</strong>是一个开放源源代码的很小程序（与Linux下的<strong>top命令</strong>很相似），它密切监视着系统上每个进程的网络活动。同时还追踪着每个程序或者应用所使用的实时网络带宽。</p><p><img src="/images/netHogs.jpg" alt="NetHogs Linux Bandwidth Monitoring"> </p><p>NetHogs：Linux下的带宽监视<br> <strong>更多信息请参阅：</strong> <a href="http://www.tecmint.com/nethogs-monitor-per-process-network-bandwidth-usage-in-real-time/" target="_blank" rel="noopener">使用NetHogs监视Linux的网络带宽使用状况。</a></p><h3 id="13-iftop-监视网络带宽"><a href="#13-iftop-监视网络带宽" class="headerlink" title="13.iftop-监视网络带宽"></a>13.iftop-监视网络带宽</h3><p><strong>iftop</strong>是另一个在控制台运行的开放源代码系统监控应用，它显示了系统上通过网络接口的应用网络带宽使用（源主机或者目的主机）的列表，这个列表定期更新。iftop用于监视网络的使用情况，而<strong>‘top’</strong>用于监视CPU的使用情况。iftop是<strong>‘top’</strong>工具系列中的一员，它用于监视所选接口，并显示两个主机间当前网络带宽的使用情况。</p><p><img src="/images/iftop.png" alt="iftop - Network Bandwidth Monitoring"> </p><p>iftop-监视网络带宽。</p><p><strong>更多信息请参阅：</strong><a href="http://www.tecmint.com/install-iftop-bandwidth-monitoring-tool-in-rhel-centos-fedora/" target="_blank" rel="noopener">iftop-监视网络带宽的使用情况</a>。</p><h3 id="14-Monitorix-系统和网络监控"><a href="#14-Monitorix-系统和网络监控" class="headerlink" title="14 Monitorix-系统和网络监控"></a>14 Monitorix-系统和网络监控</h3><p>Monitorix 是一个免费的轻量级应用工具，它的设计初衷是运行和监控Linux/Unix服务器系统和资源等。它有一个HTTP 网络服务器，这个服务器有规律的收集系统和网络的信息并以图形化的形式展示出来。它监控系统的平均负载和使用，内存分配、磁盘健康状况、系统服务、网络端口、邮件统计（Sendmail，Postfix,Dovecot等），MySQL统计，等等。它就是用来监控系统的总体性能，帮助发现失误、瓶颈和异常活动的。</p><p><img src="/images/Monitorix.png" alt=""> </p><h3 id="15-Arpwatch-–-以太网活动监视器"><a href="#15-Arpwatch-–-以太网活动监视器" class="headerlink" title="15. Arpwatch – 以太网活动监视器"></a>15. Arpwatch – 以太网活动监视器</h3><p><strong>Arpwatch</strong>被设计用来监控Linux上的以太网地址解析 (<strong>MAC</strong>和<strong>IP</strong>地址的变化)。他在一段时间内持续监控以太网活动并输出IP和MAC地址配对变动的日志。它还可以向管理员发送邮件通知，对地址配对的增改发出警告。这对于检测网络上的ARP攻击很有用。&nbsp;</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/monitor-ethernet-activity-in-linux/" target="_blank" rel="noopener">Arpwatch to Monitor Ethernet Activity</a> </p><h3 id="16-Suricata-–-网络安全监控"><a href="#16-Suricata-–-网络安全监控" class="headerlink" title="16. Suricata – 网络安全监控"></a>16. Suricata – 网络安全监控</h3><p><strong>Suricata</strong>&nbsp;是一个开源的高性能网络安全、入侵检测和反监测工具，可以运行Linux、FreeBSD和Windows上。非营利组织<strong>OISF</strong> (<strong>Open Information Security Foundation</strong>)开发并拥有其版权。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/suricata-a-network-intrusion-detection-prevention-system/" target="_blank" rel="noopener">Suricata – A Network Intrusion Detection and Prevention System</a> </p><h3 id="17-VnStat-PHP-–-网络流量监控"><a href="#17-VnStat-PHP-–-网络流量监控" class="headerlink" title="17. VnStat PHP – 网络流量监控"></a>17. VnStat PHP – 网络流量监控</h3><p><strong>VnStat PHP</strong>&nbsp;是流行网络工具”vnstat”的基于web的前端呈现。<strong>VnStat PHP</strong>&nbsp;将网络使用情况呈现在漂亮的图形界面中。他可以显示以小时、日、月计的上传和下载流量并输出总结报告。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/vnstat-php-frontend-for-monitoring-network-bandwidth/" target="_blank" rel="noopener">VnStat PHP – Monitoring Network Bandwidth</a> </p><h3 id="18-Nagios-–-网络-服务器监控"><a href="#18-Nagios-–-网络-服务器监控" class="headerlink" title="18. Nagios – 网络/服务器监控"></a>18. Nagios – 网络/服务器监控</h3><p>Nagios是领先而强大的开源监控系统，他可以让网络/系统管理员在问题影响到正常的业务之前发现并解决它们。有了Nagios系统，管理员可以在单个窗口内远程检测Linux、Windows、开关、路由器和打印机。它可以危险警告并指出系统/服务器是否有异常，这可以间接帮助你在问题发生之前采取抢救措施。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/install-nagios-in-linux/" target="_blank" rel="noopener">Install Nagios Monitoring System to Monitor Remote Linux/Windows Hosts</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载出处：&lt;a href=&quot;http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance&lt;/a&gt;&lt;br&gt;英文原文：&lt;a href=&quot;http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;18 Command Line Tools to Monitor Linux Performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于系统和网络管理员来说每天监控和调试Linux系统的性能问题是一项繁重的工作。在IT领域作为一名Linux系统的管理员工作5年后，我逐渐认识到监控和保持系统启动并运行是多么的不容易。基于此原因，我们已编写了最常使用的18个命令行工具列表，这些工具将有助于每个Linux/Unix 系统管理员的工作。这些命令行工具可以在各种Linux系统下使用，可以用于监控和查找产生性能问题的原因。这个命令行工具列表提供了足够的工具，您可以挑选适用于您的监控场景的工具。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yulongphp.github.io/tags/linux/"/>
    
      <category term="service" scheme="http://yulongphp.github.io/tags/service/"/>
    
      <category term="nginx" scheme="http://yulongphp.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>C语言的局部变量和全局变量</title>
    <link href="http://yulongphp.github.io/2015/06/02/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yulongphp.github.io/2015/06/02/C语言的局部变量和全局变量/</id>
    <published>2015-06-02T09:22:13.000Z</published>
    <updated>2018-08-22T09:43:49.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在一个函数内部定义的变量称为<strong>局部变量</strong>，它的作用域仅限于该函数内，也就是说只有本函数内才能使用它们，在此函数以外是不能使用这些变量的。</p><p>例如：<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, c;          <span class="comment">/* a, b, c 有效 */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;          <span class="comment">/* x, y, i, j  有效*/</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;          <span class="comment">/* m, n 有效*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>几点说明：<br>    1) <code>main</code>函数中定义的变量也是局部变量，只能在<code>main</code>函数中使用；同时，<code>main</code>函数中也不能使用其它函数中定义的变量。main 函数也是一个函数，与其它函数地位平等。<br>    2) 不同函数中可以使用相同名字的变量，它们代表不同的对象，在内存中站不同的单元，互不混淆。<br>    3) 形式参数也是局部变量。<strong>实参给形参传值的过程也就是给局部变量赋值的过程</strong>。<br>    4) 在一个函数内部，可以在复合语句中定义变量，这些变量只在本复合语句中有效，这种复合语句也称为<code>“分程序”</code> 或 <code>“语句块”</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;          <span class="comment">/* a, b 在整个本函数内 有效*/</span></span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c;         <span class="comment">/* c 只在当前&#123;&#125; 内有效*/</span></span><br><span class="line">c = a+b;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量c只在复合语句（程序块）内有效，离开该复合语句该变量就无效，释放内存。</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>程序的编译单位是源程序文件，一个源文件可以包含一个或若干个函数。在函数内部定义的变量是<strong>局部变量</strong>，而在函数之外定义的而变量称为外部变量，外部变量是<strong>全局变量</strong>（也称全程变量）。全局变量可以为本文件中其他函数所共用。它的有效范围为从定义变量的位置开始到本源文件结束。</p><p>例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>, q=<span class="number">5</span>;               <span class="comment">/*  p, q 在整个源文件中有效 */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, c;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1, c2;                <span class="comment">/*  外部变量 c1, c2 在此位置到文件结尾有效  */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了便于区分局部变量和全局变量，在C程序设计人员中有一个习惯（但非规定），将全局变量名的第一个字母用大写表示。</p><p>说明：<br>    1) 设置全局扁郎是增加了函数间数据联系的取到。由于同一文件中的所有函数都能引用全局变量的值，因此如果在一个函数中改变了全局变量的值，就能狗影响到其他函数，相当于各个函数间有直接的传递通道。由于函数的调用只能带回一个返回值，因此有时候可以利用全局变量增加函数间的联系通道，通过函数调用能够得到一个以上的值。<br>    2) 建议不在必要时不要使用全局变量，原因如下<br>        ① 全局变量在程序的全部执行过程中都占用存储单元，而不是仅在需要时才开辟单元。<br>        ② 它是函数的通用性降低了，因为函数在执行时要依赖于其所在的外部变量。如果将一个函数移植到另一个文件中，还要将有关的外部变量及值一起移植过去。但若该外部变量与其他文件与其他文件的变量名冲突时，就会出现问题，降低了程序的可靠性和通用性。在程序设计中，在划分模块式要求模块的<code>**内聚性**</code>强、与其他模块的<code>**耦合性**</code>弱。即模块的功能要单一（不要把许多互不相干的功能放到一个模块中），与其他模块的相互影响要尽量少，而用全局变量是不符合这个原则的。一般要求把c程序中的函数做成一个封闭体，除了可以通过<code>实参——形参</code>的渠道与外界发生联系外，没有其他渠道。这样的程序移植性好，可读性强。<br>        ③ 使用全局变量过多，会降低程序的清晰性，人们往往难以清楚的判断出每个瞬时各个外部变量的值。在各个函数执行时都有坑呢改变外部变量的值，程序容易出错。因此，要限制使用外部变量<br>        ④ 如果在同一个源文件件中，外部变量与局部变量同名，则在局部变量的作用范围内，外部变量被<code>屏蔽</code>，即它不起作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;局部变量&quot;&gt;&lt;a href=&quot;#局部变量&quot; class=&quot;headerlink&quot; title=&quot;局部变量&quot;&gt;&lt;/a&gt;局部变量&lt;/h4&gt;&lt;p&gt;在一个函数内部定义的变量称为&lt;strong&gt;局部变量&lt;/strong&gt;，它的作用域仅限于该函数内，也就是说只有本函数内才能使用它们，在此函数以外是不能使用这些变量的。&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://yulongphp.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://yulongphp.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c语言输入和输出</title>
    <link href="http://yulongphp.github.io/2015/05/31/c%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>http://yulongphp.github.io/2015/05/31/c语言输入和输出/</id>
    <published>2015-05-31T09:36:18.000Z</published>
    <updated>2018-08-22T09:43:49.629Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C语言在显示器上输出数据"><a href="#C语言在显示器上输出数据" class="headerlink" title="C语言在显示器上输出数据"></a>C语言在显示器上输出数据</h4><p>在C语言中，有三个函数可以用来在显示器上输出数据：<br>puts()：只能输出字符串，在《C语言在屏幕上显示内容》中已经进行了介绍。<br>putchar()：只能输出单个字符，本节将会介绍。<br>printf()：可以输出各种类型的数据，在《在屏幕上输出各种类型的数据》《C语言中的整数》中都进行了介绍，本节要进行更加深入的讲解。</p><a id="more"></a><p>printf() 是最灵活、最复杂、最常用的输出函数，完全可以替代 puts() 和 putchar()，大家一定要掌握。<br>putchar()</p><p>putchar() 函数只能用来输出单个字符，例如：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    putchar(<span class="string">'a'</span>)<span class="comment">;</span></span><br><span class="line">    putchar(<span class="number">7</span>)<span class="comment">;</span></span><br><span class="line">    putchar(<span class="string">'\x46'</span>)<span class="comment">;</span></span><br><span class="line">    system(<span class="string">"pause"</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序，输出 aF，同时会听到喇叭发出“嘟”的声音。<br>关于换行</p><p>puts() 函数在输出结束时会自动换行，而 printf() 和 putchar() 不会，需要手动添加换行符\n。如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"c.biancheng.net"</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'Z'</span>;</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>c.biancheng.net<br>Z100Z请按任意键继续. . .<br>printf() 的高级用法</p><p>这一节的内容有些繁杂，如果你希望加快学习进度，尽早写出有趣的代码，也可以跳过这节，后面遇到不懂的 printf 输出再来回顾。<br>虽然我们已经熟悉了 printf，但是还没有把它发挥到极致，printf 可以有更加“炫酷”的输出。</p><p>假如现在老师要求我们用C语言输出一个 4×4 的整数矩阵，为了增强阅读性，数字要对齐，怎么办呢？我们显然可以这样来做：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="attribute">a1</span>=20, <span class="attribute">a2</span>=345, <span class="attribute">a3</span>=700, <span class="attribute">a4</span>=22;</span><br><span class="line">    int <span class="attribute">b1</span>=56720, <span class="attribute">b2</span>=9999, <span class="attribute">b3</span>=20098, <span class="attribute">b4</span>=2;</span><br><span class="line">    int <span class="attribute">c1</span>=233, <span class="attribute">c2</span>=205, <span class="attribute">c3</span>=1, <span class="attribute">c4</span>=6666;</span><br><span class="line">    int <span class="attribute">d1</span>=34, <span class="attribute">d2</span>=0, <span class="attribute">d3</span>=23, <span class="attribute">d4</span>=23006783;</span><br><span class="line">    printf(<span class="string">"%d        %d       %d       %d\n"</span>, a1, a2, a3, a4);</span><br><span class="line">    printf(<span class="string">"%d     %d      %d     %d\n"</span>, b1, b2, b3, b4);</span><br><span class="line">    printf(<span class="string">"%d       %d       %d         %d\n"</span>, c1, c2, c3, c4);</span><br><span class="line">    printf(<span class="string">"%d        %d         %d        %d\n"</span>, d1, d2, d3, d4);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>20        345       700       22<br>56720     9999      20098     2<br>233       205       1         6666<br>34        0         23        23006783<br>矩阵一般在大学的《高等数学》中会讲到，m×n 的数字矩阵可以理解为把 m×n 个数字摆放成 m 行 n 列的样子。<br>看，这是多么地自虐，要敲那么多空格，还要严格控制空格数，否则输出就会错位。</p><p>类似的需求随处可见，整齐的格式会更加美观，让人觉得生动有趣。我们大可不必像上面一样，printf 可以更好的控制输出格式。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="attribute">a1</span>=20, <span class="attribute">a2</span>=345, <span class="attribute">a3</span>=700, <span class="attribute">a4</span>=22;</span><br><span class="line">    int <span class="attribute">b1</span>=56720, <span class="attribute">b2</span>=9999, <span class="attribute">b3</span>=20098, <span class="attribute">b4</span>=2;</span><br><span class="line">    int <span class="attribute">c1</span>=233, <span class="attribute">c2</span>=205, <span class="attribute">c3</span>=1, <span class="attribute">c4</span>=6666;</span><br><span class="line">    int <span class="attribute">d1</span>=34, <span class="attribute">d2</span>=0, <span class="attribute">d3</span>=23, <span class="attribute">d4</span>=23006783;</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, a1, a2, a3, a4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, b1, b2, b3, b4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, c1, c2, c3, c4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, d1, d2, d3, d4);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>20        345       700       22<br>56720     9999      20098     2<br>233       205       1         6666<br>34        0         23        23006783<br>这样写起来更加方便，即使改变某个数字，也无需修改 printf 语句。</p><p>%-9d中，d表示以十进制输出，9表示最少占9个字符的宽度，宽度不足以空格补齐，-表示左对齐。综合起来，%-9d表示以十进制输出，左对齐，宽度最小为9个字符。大家可以亲自试试%9d的输出效果。</p><p>printf 格式控制字符的完整形式如下：</p><pre><code>%[flags][width][.precision]type</code></pre><blockquote><p>[xxx] 并不是C语言规定的格式，只是一种习惯写法，表示此处的内容可有可无，后面会经常见到这样的写法。</p></blockquote><p>1) type 也就是以什么类型输出，比如 %d、%f、%c，type 就分别对应 d、f、c；%-9d中 type 对应 d。type 必须有。</p><p>2) width 表示最小输出宽度，也就是占几个字符的位置；%-9d中 width 对应 9。</p><p>对于整数和小数，默认右对齐，不足的宽度以空格补齐，例如：<br>printf(“%10d%12f”, 234, 9.8);<br>输出结果为：<br>       234    9.800000<br>234 前面共有7个空格，9.8 前面有4个空格。</p><p>3) .precision 表示输出精度。</p><p>对于 %d，.precision 表示的其实是最小输出宽度，与 width 不同的是，不足的宽度以 0 补齐，例如：<br>printf(“%.10d\n”, 4309);<br>输出结果为：<br>0000004309</p><p>对于 %f，.precision 表示小数的位数，不足以 0 补齐，也就是精度，例如：<br>printf(“%.10f %.3f\n”, 23.988, 2.9328745);<br>输出结果为：<br>23.9880000000 2.933</p><p>4) flags 是标志字符，<code>%-9d</code>中 flags 对应<code>-</code>。</p><p>几种常见的标志字符<br><img src="/images/cFlags.png" alt=""></p><blockquote><p>有兴趣的读者可以猛击这里查看更多关于 printf 的输出格式。<br>printf 的这些格式规范不是“小把戏”，优美的输出格式随处可见，例如 dos 下的 dir 命令，会整齐地列出当前目录下的文件：<br><img src="/images/dosDir.png" alt=""></p></blockquote><h4 id="C语言从键盘输入数据"><a href="#C语言从键盘输入数据" class="headerlink" title="C语言从键盘输入数据"></a>C语言从键盘输入数据</h4><p>程序是人机交互的媒介，有输出必然也有输入。在C语言中，有多个函数可以从键盘获得用户输入：</p><ul><li>scanf()：和 printf() 类似，scanf() 可以输入多种类型的数据。</li><li>getchar()、getche()、getch()：这三个函数都用于输入单个字符。</li><li>gets()：获取一行数据，并作为字符串处理。</li></ul><p>scanf() 是最灵活、最复杂、最常用的输入函数，但它不能完全取代其他函数，大家都要有所了解。<br>scanf()函数</p><p>scanf 是 scan format 的缩写，意思是格式化扫描，也就是从键盘获得用户输入。我们先来看一个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);  <span class="comment">//输入整数并赋值给变量a</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);  <span class="comment">//输入整数并赋值给变量b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);  <span class="comment">//计算a+b的值</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;c, &amp;d);  <span class="comment">//输入两个整数并分别赋值给c、d</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c*d=%d\n"</span>, c*d);  <span class="comment">//计算c*d的值</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>12↙<br>60↙<br>a+b=72<br>10 23↙<br>c*d=230</p><blockquote><p>↙表示按下回车键。</p></blockquote><p>从键盘输入12，按下回车键，scanf() 就会读取输入数据并赋值给变量 a，本次输入结束，执行下一条语句。接着给变量b赋值，也是同样的道理。</p><p>第9行代码中，我们同时输入两个整数并分别赋值给c、d。注意”%d %d”之间是有空格的，所以输入数据时也要有空格。也就是说，输入数据的格式要和控制字符串的格式一致。</p><p>scanf 和 printf 非常相似：<br>scanf(“%d %d”, &amp;a, &amp;b);  // 获取用户输入的两个整数，分别赋值给变量 a 和 b<br>printf(“%d %d”, a, b);  // 将变量 a 和 b 的是在显示器上输出。<br>它们都有格式控制字符串，都有变量列表。不同的是，scanf 的变量前要带一个<code>&amp;</code>符号；&amp;称为<strong>取地址符</strong>，也就是获取变量在<strong>内存中的地址</strong>。</p><p>在《二进制思想以及数据的存储》一节中讲到，数据是以二进制的形式保存在内存中的，字节（Byte）是最小的可操作单位。为了便于管理，我们给每个字节分配了一个编号，使用该字节时，只要知道编号就可以，就像每个学生都有学号，老师会随机抽取学号来让学生回答问题。字节的编号是有顺序的，从 0 开始，接下来是 1、2、3……</p><p>下图是 4G 内存中每个字节的编号（以十六进制表示）：<br><img src="/images/hexMemory.png" alt=""></p><p>这个编号，就叫做<code>地址（Address）</code>。<code>int a</code>;会在内存中分配四个字节的空间，我们将第一个字节的地址称为变量 a 的地址，也就是<code>&amp;a</code>的值。对于前面讲到的整数、浮点数、字符，都要使用 &amp; 获取它们的地址，scanf 会根据地址把读取到的数据写入内存。</p><p>我们不妨将它们的地址输出看一下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="string">'F'</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">452</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;a=%#x, &amp;b=%#x, &amp;c=%#x\n"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>&amp;a=0x18ff48, &amp;b=0x18ff44, &amp;c=0x18ff40</p><p><img src="/images/memoryAddress.png" alt=""></p><p>图：a、b、c 的内存地址</p><blockquote><p>注意：你看到的地址是虚拟地址，并不等于它在物理内存中的地址。虚拟内存是现代操作系统因内存管理的需要才提出的概念，dos 下没有这个概念，用户看到的都是真实的地址。CPU 操作的是物理内存地址，所以虚拟地址必须经过转换才能交给 CPU，这是 OS 的工作，对用户是透明的。</p></blockquote><p>再来看一个 scanf 的例子：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    scanf(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);</span><br><span class="line">    scanf(<span class="string">"%d   %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);</span><br><span class="line">    scanf(<span class="string">"%d, %d, %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b+c=%d\n"</span>, a+b+c);</span><br><span class="line">   </span><br><span class="line">    scanf(<span class="string">"%d is bigger than %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a-b=%d\n"</span>, a-b);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>10    20↙<br>a+b=30<br>100 200↙<br>a+b=300<br>56,45,78↙<br>a+b+c=179<br>25 is bigger than 11↙<br>a-b=14</p><p>第一个 scanf() 的格式控制字符串为<code>&quot;%d %d&quot;</code>，中间有一个空格，而我们却输入了<code>10    20</code>，中间有多个空格。<br>第二个 scanf() 的格式控制字符串为<code>&quot;%d   %d&quot;</code>，中间有多个空格，而我们却输入了<code>100 200</code>，中间只有一个空格。这说明 scanf() 对输入数据之间的空格的处理比较宽松，并不要求空格数严格对应。</p><p>第三个 scanf() 的控制字符串为<code>&quot;%d, %d, %d&quot;</code>，中间以逗号分隔，所以输入的整数也要以逗号分隔。</p><p>第四个 scanf() 要求整数之间以<code>is bigger than</code>分隔。</p><p>每次用户按下回车键，程序就会认为用户输入结束，scanf() 开始读取用户输入的内容，并根据格式控制字符串从中提取数据，只要用户输入的内容和格式控制字符串匹配，就能够正确提取。</p><p>本质上讲，用户输入的内容都是字符串，scanf() 完成的是从字符串中提取有效数据的过程。<br>输入单个字符</p><p>scanf 用于接收用户输入的各种数据，如果仅仅是输入单个字符，也可以使用 getchar()、getche() 或 getch()。</p><p>getchar() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    c=getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p>#↙<br>c=’#’</p><p>你也可以将第5、6行的语句合并为一个：</p><pre><code>char c = getchar();</code></pre><p>getche() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getche();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p>#c=’#’</p><p>大家亲自运行程序会发现，刚输入字符 #，getche() 就立即获取，不会等到用户按下回车键，所以运行结果中没有换行。而 getchr() 不是，它要等到用户按下回车键才能确认输入结束，所以运行结果中有换行。</p><blockquote><p>conio.h不是C标准库中的头文件，在ISO和POSIX标准中均没有定义。conio是Console Input/Output（控制台输入输出）的简写，其中定义了通过控制台进行数据输入和数据输出的函数，主要是一些用户通过按键盘产生的对应操作，比如getch()函数等等。大部分DOS，Windows，PharLap，DOSX，OS/2等平台上的C编译器提供此文件，UNIX和Linux平台的C编译器本身通常不包含此头文件，但已经有其兼容，可参考：<a href="http://conio.sourceforge.net/。" target="_blank" rel="noopener">http://conio.sourceforge.net/。</a><br>   另外大家平时主要是利用conio.h这个头文件中的getch()函数，即读取键盘字符但是不显示出来（without echo)，但是含有conio.h的程序在linux无法直接编译通过，因为linux没有这个头文件，除了利用上述的兼容包外还可以在linux采用原生的方法达到同样的效果，那就是利用linux系统的命令stty –echo，它代表不显示输入内容，源代码如下:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input a char:"</span>);</span><br><span class="line">system(<span class="string">"stty -echo"</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">system(<span class="string">"stty echo"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You have inputed:%c \n"</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getch() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getch();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序，输入 #，结果为：<br>c=’#’</p><p>大家亲自运行程序会发现，getch() 和 getche() 类似，输入一个字符就立即获取，不会等待用户按下回车键。与 getche() 不同的是，getch() 输入的 # 并没有显示出来。</p><p>在C语言中，将用户输入的内容显示在屏幕上叫做回显（Echo）。getchar()、getche() 是有回显的，而 getch() 没有回显。</p><p>回显在大部分情况下是有必要的，它能够与用户及时交互，让用户清楚地看到自己输入的内容。但在某些特殊情况下，我们却不希望有回显，例如输入密码，有回显是非常危险的，容易被偷窥。</p><p>另外需要注意的是：getchar() 位于 stdio.h 头文件中，是C语言规定的标准函数；而 getche()、getch() 位于 conio.h 中，它们都不是标准函数，不保证在任何编译器下都有效。<br>输入字符串</p><p>这里由于大家的基础知识还不够，没有学到数组和指针，暂时无法深入讲解。下面仅作一个演示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">30</span>], str2[<span class="number">30</span>];  <span class="comment">//定义两个字符数组</span></span><br><span class="line">    gets(str1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str2);</span><br><span class="line">    <span class="built_in">puts</span>(str1);</span><br><span class="line">    <span class="built_in">puts</span>(str2);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>The world is beautiful!↙<br>Hello World!↙<br>The world is beautiful!<br>Hello</p><p>gets() 会读取用户输入的整行内容，包括空格。而 scanf() 遇到空格就结束读取，也就是说，使用 scanf() 读取的字符串中永远不会包含空格。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;C语言在显示器上输出数据&quot;&gt;&lt;a href=&quot;#C语言在显示器上输出数据&quot; class=&quot;headerlink&quot; title=&quot;C语言在显示器上输出数据&quot;&gt;&lt;/a&gt;C语言在显示器上输出数据&lt;/h4&gt;&lt;p&gt;在C语言中，有三个函数可以用来在显示器上输出数据：&lt;br&gt;puts()：只能输出字符串，在《C语言在屏幕上显示内容》中已经进行了介绍。&lt;br&gt;putchar()：只能输出单个字符，本节将会介绍。&lt;br&gt;printf()：可以输出各种类型的数据，在《在屏幕上输出各种类型的数据》《C语言中的整数》中都进行了介绍，本节要进行更加深入的讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://yulongphp.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://yulongphp.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c语言变量和数据类型</title>
    <link href="http://yulongphp.github.io/2015/05/18/c%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yulongphp.github.io/2015/05/18/c语言变量和数据类型/</id>
    <published>2015-05-18T07:09:41.000Z</published>
    <updated>2018-08-22T09:43:49.627Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h4><p>Linux下使用最广泛的C/C++编译器是GCC，大多数的Linux发行版本都默认安装，不管是开发人员还是初学者，一般都将GCC作为Linux下首选的编译工具。</p><p>保存文件后退出，打开终端并 cd 到当前目录，输入下面的命令：</p><pre><code>gcc test.c -o test</code></pre><p>可以直接将C代码编译链接为可执行文件。<br><a id="more"></a></p><p>可以看到在当前目录下多出一个文件 test，这就是可执行文件。不像Windows，Linux不以文件后缀来区分可执行文件，Linux下的可执行文件后缀理论上是可以任意更改的。</p><p>当然，也可以分步编译：</p><p>1) 预处理</p><pre><code>gcc -E test.c -o test.i</code></pre><p>在当前目录下会多出一个预处理结果文件 test.i，打开 test.i 可以看到，在 test.c 的基础上把stdio.h和stdlib.h的内容插进去了。</p><p>2) 编译为汇编代码</p><pre><code>gcc -S test.i -o test.s</code></pre><p>其中-S参数是在编译完成后退出，-o为指定文件名。</p><p>3) 汇编为目标文件</p><pre><code>gcc -c test.s -o test.o</code></pre><p>.o就是目标文件。目标文件与可执行文件类似，都是机器能够识别的可执行代码，但是由于还没有链接，结构会稍有不同。</p><p>3) 链接并生成可执行文件</p><pre><code>gcc test.o -o test</code></pre><p>如果有多个源文件，可以这样来编译：</p><pre><code>gcc -c test1.c -o test1.o    gcc -c test2.c -o test2.o    gcc test1.o test2.o -o test</code></pre><p>注意：如果不指定文件名，GCC会生成名为a.out的文件，.out文件只是为了区分编译后的文件，Linux下并没有标准的可执行文件后缀名，一般可执行文件都没有后缀名。</p><p>编译后生成的test文件就是程序了，运行它：</p><pre><code>./test</code></pre><p>如果没有运行权限，可以使用sudo命令来增加权限（注意要在Linux的分区下）：</p><pre><code>sudo cdmod test 777</code></pre><p>对于程序的检错，我们可以用-pedantic、-Wall、-Werror选项：<br>-pedantic选项能够帮助程序员发现一些不符合 ANSI/ISO C标准的代码（并不是全部）；<br>-Wall可以让gcc显示警告信息；<br>-Werror可以让gcc在编译中遇到错误时停止继续。</p><p>这3个选项都是非常有用的。</p><h4 id="c语言转义字符"><a href="#c语言转义字符" class="headerlink" title="c语言转义字符"></a>c语言转义字符</h4><p>通过puts可以输出字符串，例如：</p><pre><code>puts(&quot;123abc&quot;);</code></pre><p>“123abc” 对应的ASCII码值的八进制分别是 61、62、63、141、142、143，上面的代码也可以写为：</p><pre><code>puts(&quot;\61\62\63\141\142\143&quot;);</code></pre><p>在C语言中，所有的ASCII码都可以用反斜杠\加数字（默认是8进制）来表示，称为转义字符（Escape Character），因为\后面的字符都不是它原来的ASCII字符的意思了。</p><p>除了八进制，也可以用十六进制来表示。用十六进制表示时数字要以x开头。”123abc” 对应的ASCII码值的十六进制分别是 31、32、33、61、62、63，所以也可以写为：</p><pre><code>puts(&quot;\x31\x32\x33\x61\x62\x63&quot;);</code></pre><p>注意：只能使用八进制或十六进制，不能使用十进制。<br>一个完整的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"The string is: \61\62\63\x61\x62\x63"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>The string is: 123abc</p><p>在ASCII码中，从 0~31（十进制）的字符为控制字符，它们都是看不见的字符，不能在显示器上显示，也没法书写，只能以转义字符的形式来表示。不过，直接使用ASCII码值记忆不方便，针对常用的控制字符，C语言又定义了简写方式，完整的列表如下：</p><p>转义字符    意义  ASCII码值（十进制）<br>\a  响铃(BEL) 007<br>\b  退格(BS) ，将当前位置移到前一列  008<br>\f  换页(FF)，将当前位置移到下页开头  012<br>\n  换行(LF) ，将当前位置移到下一行开头    010<br>\r  回车(CR) ，将当前位置移到本行开头 013<br>\t  水平制表(HT) （跳到下一个TAB位置）   009<br>\v  垂直制表(VT)    011</p><p>转义字符示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"C\tC++\tJava\nC first appeared!\a"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>C       C++     Java<br>C first appeared!<br>同时会听到喇叭发出“嘟”的声音，这是使用\a的效果。</p><h4 id="C语言中的空白符"><a href="#C语言中的空白符" class="headerlink" title="C语言中的空白符"></a>C语言中的空白符</h4><p>空格、制表符、换行符统称为空白符，它们只能占位，没有实际的内容。<br>制表符也称缩进，就是Tab键，默认占用4个空格的位置，你也可以在编辑器中修改。<br>对于编译器，有的空白符会被忽略，有的却不能。请看下面几种 puts 的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"C语言"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"中文网"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">puts</span></span><br><span class="line">    (<span class="string">"C语言中文网"</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">puts</span></span><br><span class="line">    (</span><br><span class="line">    <span class="string">"C语言中文网"</span></span><br><span class="line">    )</span><br><span class="line">    ;</span><br><span class="line">   </span><br><span class="line">    <span class="built_in">puts</span>   (<span class="string">"C语言中文网"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>    (    <span class="string">"C语言中文网"</span>    )    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>C语言<br>中文网<br>C语言中文网<br>C语言中文网<br>C语言中文网<br>C语言中文网</p><p>看到输出结果，说明代码没有错误，以上几种 puts 的用法是正确的。puts和()之间、” “和()之间可以有任意的空白符，它们会被编译器忽略，编译器不认为它们是代码的一部分，它们的存在只是在编辑器中呈现一定的格式，让程序员阅读方便。</p><p>需要注意的是：字符串中的空格和制表符不会被忽略，它们会被输出到控制台上。并且字符串中不能有换行符，否则会产生编译错误。请看下面的代码：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    puts(<span class="string">"C语  言 中文网"</span>)<span class="comment">;</span></span><br><span class="line">    puts(<span class="string">"C语言</span></span><br><span class="line"><span class="string">    中文网"</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第5~6行代码是错误的，字符串必须在一行内结束，不能换行。把这两行代码删除，运行结果为：</p><p>C语  言 中文网</p><p>程序员要善于利用空白符：缩进（制表符）和换行可以让代码结构更加清晰，空格可以让代码看起来不那么拥挤。专业的程序员同样追求专业的代码格式，大家在以后的学习中可以慢慢体会。</p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>顾名思义，数据类型用来说明数据的类型，确定了数据的解释方式，让计算机和程序员不会产生歧义。在C语言中，有多种数据类型，例如：<br>说  明    字符型 短整型 整型  长整型 单精度浮点型  双精度浮点型  无类型<br>数据类型    char    short   int long    float   double  void</p><p>这些是最基本的数据类型，是C语言自带的，如果我们需要，还可以通过它们组成更加复杂的数据类型，后面我们会一一讲解。</p><h5 id="数据的长度（Length）"><a href="#数据的长度（Length）" class="headerlink" title="数据的长度（Length）"></a>数据的长度（Length）</h5><p>所谓数据长度（Length），是指数据占用多少个字节。占用的字节越多，能存储的数据就越多，对于数字来说，值就会更大，反之能存储的数据就有限。</p><p>多个数据在内存中是连续存储的，彼此之间没有明显的界限，如果不明确指明数据的长度，计算机就不知道何时存取结束。例如我们保存了一个整数 1000，它占用4个字节的内存，而读取时却认为它占用3个字节或5个字节，这显然是不正确的。</p><p>所以，在定义变量时还要指明数据的长度。而这恰恰是数据类型的另外一个作用。数据类型除了指明数据的解释方式，还指明了数据的长度。因为在C语言中，每一种数据类型所占用的字节数都是固定的，知道了数据类型，也就知道了数据的长度。</p><p>在32位环境中，各种数据类型的长度一般如下：<br>说  明    字符型 短整型 整型  长整型 单精度浮点型  双精度浮点型<br>数据类型    char    short   int long    float   double<br>长  度    1   2   4   4   4   8<br>C语言有多少种数据类型，每种数据类型长度是多少、该如何使用，这是每一位C程序员都必须要掌握的，后续我们会一一讲解。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>数据是放在内存中的，在内存中存取数据要明确三件事情：数据存储在哪里、数据的长度以及数据的处理方式。</p><p>变量名不仅仅是为数据起了一个好记的名字，还告诉我们数据存储在哪里，使用数据时，只要提供变量名即可；而数据类型则指明了数据的长度和处理方式。所以诸如int n;、char c;、float money;这样的形式就确定了数据在内存中的所有要素。</p><p>C语言提供的多种数据类型让程序更加灵活和高效，同时也增加了学习成本。而有些编程语言，例如PHP、JavaScript等，在定义变量时不需要指明数据类型，编译器会根据赋值情况自动推演出数据类型，更加智能。</p><p>除了C语言，Java、C++、C#等在定义变量时也必须指明数据类型，这样的编程语言称为强类型语言。而PHP、JavaScript等在定义变量时不必指明数据类型，编译系统会自动推演，这样的编程语言称为弱类型语言。</p><p>强类型语言一旦确定了数据类型，就不能再赋给其他类型的数据，除非对数据类型进行转换。弱类型语言没有这种限制，一个变量，可以先赋给一个整数，然后再赋给一个字符串。</p><p>最后需要说明的是：数据类型只在定义变量时指明，而且必须指明；使用变量时无需再指明，因为此时的数据类型已经确定了。</p><h4 id="在屏幕上输出各种数据类型"><a href="#在屏幕上输出各种数据类型" class="headerlink" title="在屏幕上输出各种数据类型"></a>在屏幕上输出各种数据类型</h4><p>在《C语言在屏幕上显示内容》一节中，我们使用 puts 来输出字符串。puts 是 output string 的缩写，只能用来输出字符串，不能输出整数、小数、字符等，我们需要用另外一个函数，那就是 printf<br>printf 比 puts 更加强大，不仅可以输出字符串，还可以输出整数、小数、单个字符等；输出格式也可以自己定义，例如：<br>以十进制、八进制、十六进制形式输出；<br>要求输出的数字占 n 个字符的位置；<br>控制小数的位数。</p><p>printf 是 print format 的缩写，意思是“格式化打印”。这里所谓的“打印”就是在屏幕上显示内容，与“输出”的含义相同，所以我们一般称 printf 是用来格式化输出的。<br>先来看一个简单的例子：<br>printf(“C语言中文网”);<br>这个语句可以在屏幕上显示“C语言中文网”，与puts(“C语言中文网”);的效果类似。</p><p>输出变量 abc 的值：<br>int abc=999;<br>printf(“%d”, abc);<br>这里就比较有趣了。先来看%d，d 是 decimal 的缩写，意思是十进制数，%d 表示以十进制的形式输出。输出什么呢？输出变量 abc 的值。%d 与 abc 是对应的，也就是说，会用 abc 的值来替换 %d。</p><p>%d 与后面的变量是一一对应的，第一个 %d 对应第一个变量，第二个 %d 对应第二个变量……</p><p>%d称为格式控制符，它指明了以何种形式输出数据。格式控制符均以%开头，后跟其他字符。%d 表示以十进制形式输出一个整数。除了 %d，printf 支持更多的格式控制，例如：<br>%c：输出一个字符。c 是 character 的简写。<br>%s：输出一个字符串。s 是 string 的简写。<br>%f：输出一个小数。f 是 float 的简写。<br>除了这些，printf 支持更加复杂和优美的输出格式，考虑到读者的基础暂时不够，我们将在《printf的高级用法》一节中展开讲解。</p><p>我们把代码补充完整，体验一下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'@'</span>;  <span class="comment">//字符用单引号包围，字符串用双引号包围</span></span><br><span class="line">    <span class="keyword">float</span> money = <span class="number">93.96</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n=%d, c=%c, money=%f\n"</span>, n, c, money);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>n=100, c=@, money=93.959999</p><p>要点提示：<br>1) \n表示换行，在《C语言转义字符》一节中有具体讲解。<em>puts 输出完成后会自动换行</em>，而 <em>printf 不会，要自己添加换行符</em>。</p><p>2) //后面的为注释。注释用来说明代码是什么意思，让我们阅读更加方便，它也是代码的一部分。编译器会忽略注释内容。</p><h4 id="C语言中的整数（short-int-long）"><a href="#C语言中的整数（short-int-long）" class="headerlink" title="C语言中的整数（short,int,long）"></a>C语言中的整数（short,int,long）</h4><p>整数是编程中常用的一种数据，C语言中有三种整数类型，分别为 short、int 和 long。int 称为整型，short 称为短整型，long 称为长整型，它们的长度（所占字节数）关系为：<br>short &lt;= int &lt;= long<br>它们具体占用几个字节C语言并没有规定，C语言只做了宽泛的限制：<br>short 至少占用2个字节。<br>int 建议为一个机器字长。32位环境下机器字长为4字节，64位环境下机器字长为8字节。<br>short 的长度不能大于 int，long 的长度不能小于 int。</p><p>这就意味着，short 并不一定真的”短“，long 也并不一定真的”长“，它们有可能和 int 占用相同的字节数。决定整数长度的因素很多，包括硬件（CPU和数据总线）、操作系统、编译器等。</p><p>在16位环境下，short 为2个字节，int 为2个字节，long 为4个字节。16位环境多用于单片机和低级嵌入式系统，在PC和服务器上基本都看不到了。</p><p>对于32位的 Windows、Linux 和 OS X，short 为2个字节，int 为4个字节，long 也为4个字节。PC和服务器上的32位系统占有率也在慢慢下降，嵌入式系统使用32位越来越多。</p><p>在64位环境下，不同的操作系统会有不同的结果，如下所示（长度以字节计）：<br>操作系统    short   int long<br>Win64   2   4   4<br>类Unix系统（包括 Unix、Linux、OS X、BSD、Solaris 等）   2   4   8<br>目前我们使用较多的PC系统为 Win XP、Win 7、Win 8、Win 10、Mac OS X、Linux，short 和 int 的长度都是固定的，分别为2和4，大家可以放心使用，long 的长度在 Win64 和类Unix系统下会有所不同，使用时要注意移植性</p><p>获取某个数据类型的长度可以使用 sizeof 操作符，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">long</span> c = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">char</span> d = <span class="string">'X'</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">int</span> a_length = <span class="keyword">sizeof</span> a;</span><br><span class="line">    <span class="keyword">int</span> b_length = <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d, b=%d, c=%d, d=%d\n"</span>, a_length, b_length, <span class="keyword">sizeof</span>(c), <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Win7下的运行结果为：<br>a=2, b=4, c=4, d=1</p><p>sizeof 用来获取某个数据类型或变量所占用的字节数，如果后面跟的是变量名称，那么可以省略 ( )，如果跟的是数据类型，就必须带上 ( )。</p><p>需要注意的是，sizeof 是C语言中的操作符，不是函数，所以可以不带 ( )，后面会详细讲解。</p><h5 id="符号位"><a href="#符号位" class="headerlink" title="符号位"></a>符号位</h5><p>在数学中，数字有正负之分。在C语言中也是一样，short、int、long 都可以带上符号，例如：<br>short a = -10;  //负数<br>int b = +10;  //正数<br>long c = (-9) + (+12);  //负数和正数相加<br>如果不带正负号，默认就是正数。</p><p>符号也要在内存中体现出来。符号只有正负两种情况，用1位就足以表示，这1位就是最高位。以 int 为例，它占用32位的内存，0~30位表示数值，31 位表示正负号。如下图所示：</p><p>在编程语言中，计数往往是从0开始，例如字符串 “abc123”，我们称第 0 个字符是 a，第 1 个字符是 b，第 5 个字符是 3。这和我们平时从 1 开始计数的习惯不一样，大家要慢慢适应，培养编程思维。<br>在符号位中，用0表示正数，用1表示负数。例如 short 类型的 -10、+16 在内存中的表示如下：</p><p>如果不希望设置符号位，可以在数据类型前面加 unsigned，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> a = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> b = <span class="number">1002</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> c = <span class="number">9892320</span>;</span><br></pre></td></tr></table></figure></p><p>这样，short、int、long 中就没有符号位了，所有的位都用来表示数值。也就意味着，使用了 unsigned 只能表示正数，不能表示负数了。</p><p>如果是unsigned int，那么可以省略 int ，只写 unsigned，例如：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">unsigned n</span> = 100;</span><br></pre></td></tr></table></figure></p><p>它等价于：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>输出无符号数使用%u，代码如下<br>如果是unsigned int，那么可以省略 int ，只写 unsigned，例如：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">unsigned n</span> = 100;</span><br></pre></td></tr></table></figure></p><p>它等价于：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>输出无符号数使用%u，代码如下：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1234</span>;</span><br><span class="line">    unsigned a1=<span class="number">1234</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0x80000000</span>;  <span class="regexp">//</span> <span class="number">0x80000000</span> = <span class="number">0x7fffffff</span> + <span class="number">0x1</span></span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">0xffffffff</span>;</span><br><span class="line">    unsigned e=<span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%d, a(u)=%u\n"</span>, a, a);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a1=%d, a1(u)=%u\n"</span>, a1, a1);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"b=%d, b(u)=%u\n"</span>, b, b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"c=%d, c(u)=%u\n"</span>, c, c);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"d=%d, d(u)=%u\n"</span>, d, d);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"e=%d, e(u)=%u\n"</span>, e, e);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>a=1234, a(u)=1234<br>a1=1234, a1(u)=1234<br>b=2147483647, b(u)=2147483647<br>c=-2147483648, c(u)=2147483648<br>d=-1, d(u)=4294967295<br>e=-1, e(u)=4294967295</p><p>可以发现，无论变量声明为有符号数还是无符号数，只有当以 %u 格式输出时，才会作为无符号数处理；如果声明为 unsigned，却以 d% 输出，那么也是有符号数。</p><blockquote><p>d、e 的输出值之所以为 -1，与它们在内存中的存储形式有关，我们将在《C语言整数在内存中的存储》一节中详细介绍</p></blockquote><h5 id="取值范围和数据溢出"><a href="#取值范围和数据溢出" class="headerlink" title="取值范围和数据溢出"></a>取值范围和数据溢出</h5><p>short、int、long 占用的字节数不同，所能表示的数值范围也不同。以32位平台为例，下面是它们的取值范围：<br>数据类型    所占字节数   取值范围<br>short   2   -32768~32767，即 -215~(215-1)<br>unsigned short  2   0~65535，即 0~(216-1)<br>int 4   -2147483648~2147483647，即 -231~(231-1)<br>unsigned int    4   0~4294967295，即0~(232-1)<br>long    4   -2147483648~2147483647，即 -231~(231-1)<br>unsigned long   4   0~4294967295，即0~(232-1)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">0x100000000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%u\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br>a=0<br>变量 a 为 int 类型，占用4个字节（32位），能表示的最大值为 0xFFFFFFFF，而 0x100000000 = 0xFFFFFFFF + 1，占用33位，已超出 a 所能表示的最大值，会发生溢出，最高位被截去，剩下的32位都是0。也就是说，在 a 被输出前，其值已经变成了 0<br>整数的前缀</p><p>在程序中是根据前缀来区分十进制、八进制和十六机制的。</p><p>1) 十进制数由 0~9 十个数字组成，没有前缀。例如：<br>合法的十进制数：237、-568、65535、1627；<br>不合法的十进制数：023（不能有前导0）、23D（含有非十进制数码）。</p><p>2) 八进制数由 0~7 八个数字组成，必须以0开头，即以0作为八进制数的前缀。例如：<br>合法的八进制数：015（十进制为13）、-0101（十进制为-65）、0177777（十进制为65535）；<br>不合法的八进制数：256（无前缀0）、03A2（包含了非八进制数码）。</p><blockquote><p>注意前缀是数字0，而不是字母o。</p></blockquote><p>3) 十六进制数由数字0~9、字母A~F或a~f组成，前缀为0X或0x。例如：<br>合法的十六进制数：0X2A（十进制为42）、-0XA0（十进制为-160)、0xffff（十进制为65535）；<br>不合法的十六进制数：5A（无前缀0X）、0X3H（含有非十六进制数码）。</p><blockquote><p>在C语言中不能直接表示二进制，它没有特定的前缀</p></blockquote><h5 id="整数的后缀"><a href="#整数的后缀" class="headerlink" title="整数的后缀"></a>整数的后缀</h5><p>1) 可以用后缀L或l来表示长整型数。例如：</p><p>十进制长整型数：158L、358000L；<br>八进制长整型数：012L、077L、0200000L；<br>十六进制长整型数：0X15L (十进制为21)、0XA5L、0X10000L。</p><p>长整型数158L和基本整型数158 在数值上并无区别，但由于 158L 是长整型数，编译器将为它分配 sizeof(long) 字节的存储空间。</p><p>2) 可以用后缀U或u来表示无符号数，例如 358u、0x38Au等。</p><p>前缀、后缀可以同时使用以表示各种类型的整数。例如 0XA5Lu 表示十六进制无符号长整型数 A5，其十进制为165。</p><blockquote><p>实际开发中经常使用前缀，但较少使用后缀，因为将整数赋值给变量时就确定了它是否为 long 类型、是否为 unsigned 类型。</p></blockquote><h5 id="各种整数的输出"><a href="#各种整数的输出" class="headerlink" title="各种整数的输出"></a>各种整数的输出</h5><p>在使用 printf 输出整数时，不同的控制字符会有不同的输出格式。</p><p>1) 输出 int 使用%d，输出 short 使用 %hd，输出 long 使用 %ld。</p><p>使用 %d 输出 short，或使用 %ld 输出 int、short 时由于不会发生溢出，所以能够正确输出。而使用 %d 输出 long、或使用 %hd 输出 int、long 时可能会发生数据溢出，导致输出错误。请看下面的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a = <span class="number">100</span>, b = <span class="number">0x10000</span>;</span><br><span class="line">    <span class="keyword">long</span> c = <span class="number">0x10</span>, d = <span class="number">0x10000</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d, b=%d\n"</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%hd, d=%hd\n"</span>, c, d);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>a=100, b=0<br>c=16, d=0</p><p>变量a、b为 unsigned short 类型，占用2个字节，能表示的最大值为 0XFFFF。a 在输出时使用 %d，能容纳的数值比 a 大，自然不会发生溢出。而 b 被赋值 0x10000，0x10000&gt;0xFFFF，在赋值时就已经发生了溢出，其值为 0，所以 %d 也输出 0。</p><p>变量 c、d 为 long 类型，占用4个字节，能表示的最大值为 0XFFFFFFFF，它们在赋值时都没有溢出。当以 %hd 输出时，会截去较高的两个字节，只输出较低两个字节中的内容。c 的值为 0x10，存储在较低的两个字节中，所以 %hd 能够正确输出。而 d 的值为 0x10000，较低的两个字节全部为0，输出时它的值也就为 0。<br>实际开发中使用 %d 和 %ld 足以，几乎不使用 %hd。<br>2) 输出无符号数使用%u。上面已经讲过，不再赘述。</p><p>3) 输出十进制使用%d，输出八进制使用%o，输出十六进制使用%x或%X。如果希望带上前缀，可以加#，例如 %#d、%#o、%#x、%#X。请看下面的例子：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">0270</span>, c = 0X2F;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a(d)=%d, d(#d)=%#d\n"</span>, a, a);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a(o)=%o, d(#o)=%#o\n"</span>, b, b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"c(x)=%x, c(#x)=%#x, c(X)=%X, c(#X)=%#X\n"</span>, c, c, c, c);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p>a(d)=100, d(#d)=100<br>a(o)=270, d(#o)=0270<br>c(x)=2f, c(#x)=0x2f, c(X)=2F, c(#X)=0X2F</p><p>需要说明的是：</p><ul><li>十进制数没有前缀，所以 %d 和 %#d 的输出结果一样。</li><li>%o、%x、%X 都是以无符号形式输出。</li></ul><h4 id="C语言中的浮点数（float-double）"><a href="#C语言中的浮点数（float-double）" class="headerlink" title="C语言中的浮点数（float,double）"></a>C语言中的浮点数（float,double）</h4><p>小数也称实数或浮点数。例如，0.0、75.0、4.023、0.27、-937.198 都是合法的小数。这是常见的小数的表现形式，称为十进制形式。</p><p>除了十进制形式，也可以采用指数形式，例如 7.25×102、0.0368×105、100.22×10-2 等。任何小数都可以用指数形式来表示<br>在C语言中小数的指数形式为：<br>aEn 或 aen<br>a 为尾数部分，是一个十进制数，n 为指数部分，是一个十进制整数，E或e是固定的字符，其值为 a×10n。例如：</p><ul><li>2.1E5 = 2.1×105，其中2.1是尾数，5是指数。</li><li>3.7E-2 = 3.7×10-2，其中3.7是尾数，-2 是指数。</li><li>0.5E7 = 0.5×107，其中0.5是尾数，7是指数。</li></ul><p>C语言中小数的数据类型为 float 或 double：float 称为单精度浮点数，double 称为双精度浮点数。不像整数，小数的长度始终是固定的，float 占用4个字节，double 占用8个字节。</p><p>10 是固定的，不需要在内存中体现出来。正负号、指数(n)、尾数(a) 是变化的，需要占用内存空间来表示。<br>float、double 在内存中的形式如下所示：</p><p>输出 float 使用 %f 控制符，输出 double 使用 %lf 控制符，如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a=<span class="number">128.101</span>;</span><br><span class="line">    <span class="keyword">float</span> b=<span class="number">0.302f</span>;</span><br><span class="line">    <span class="keyword">float</span> c=<span class="number">1.23002398f</span>;</span><br><span class="line">    <span class="keyword">double</span> d=<span class="number">123</span>;</span><br><span class="line">    <span class="keyword">double</span> e = <span class="number">78.429</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%f \nb=%f \nc=%f \nd=%lf \ne=%lf\n"</span>, a, b, c, d, e);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>a=128.100998<br>b=0.302000<br>c=1.230024<br>d=123.000000<br>e=78.429000</p><p>对代码的说明：<br>1) %f 默认保留六位小数，不足六位以 0 补齐，超过六位按四舍五入截断。</p><p>2) 将整数赋值给 float 变量时会转换为小数。</p><p>3) 小数默认为 double 类型，加上后缀f才是float类型。</p><p>4) 由于内存有限，小数的精度受限，所以输出 a 时只能获得一个近似数。这点我们将在《C语言float、double的内存表示》中重点讲解。</p><h4 id="C语言中的字符（char）"><a href="#C语言中的字符（char）" class="headerlink" title="C语言中的字符（char）"></a>C语言中的字符（char）</h4><p>我们在《C语言在屏幕上显示内容》和《C语言转义字符》中提到了字符串，它是多个字符的集合，例如 “abc123”、”123\141\142\143”；当然也可以只包含一个字符，例如 “a”、”1”、”\63”。</p><p>不过为了使用方便，我们可以用 char 类型来专门表示一个字符，例如：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a=<span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">char</span> b=<span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'X'</span>;</span><br><span class="line"><span class="keyword">char</span> d=<span class="string">' '</span>;  <span class="comment">// 空格也是一个字符</span></span><br><span class="line"><span class="keyword">char</span> e=<span class="string">'\63'</span>;  <span class="comment">//也可以使用转义字符的形式</span></span><br></pre></td></tr></table></figure></p><p>char 称为字符类型，只能用单引号’ ‘来包围，不能用双引号” “包围。而字符串只能用双引号” “包围，不能用单引号’ ‘包围。</p><p>输出字符使用 %c，输出字符串使用 %s。</p><p>在《C语言转义字符》中讲到的转义字符是一种特殊字符，读者可以结合本节再回忆一下。<br>字符与整数</p><p>先看下面一段代码：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    char a = <span class="string">'E'</span>;</span><br><span class="line">    char b = <span class="number">70</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">71</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="string">'H'</span>;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%c, a=%d\n"</span>, a, a);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"b=%c, b=%d\n"</span>, b, b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"c=%c, c=%d\n"</span>, c, c);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"d=%c, d=%d\n"</span>, d, d);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>a=E, a=69<br>b=F, b=70<br>c=G, c=71<br>d=H, d=72</p><p>在ASCII码表中，E、F、G、H 的值分别是 69、70、71、72。</p><p>字符和整数没有本质的区别。可以给 char 变量一个字符，也可以给它一个整数；反过来，可以给 int 变量一个整数，也可以给它一个字符。</p><p>char 变量在内存中存储的是字符对应的 ASCII 码值。如果以 %c 输出，会根据 ASCII 码表转换成对应的字符；如果以 %d 输出，那么还是整数。</p><p>int 变量在内存中存储的是整数本身，当以 %c 输出时，也会根据 ASCII 码表转换成对应的字符。</p><p>也就是说，ASCII 码表将整数和字符关联起来了。不明白的读者请重温《ASCII编码与Unicode编码》一文，并猛击这里查看整数与字符的完整对应关系。</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p><em>C语言中没有字符串类型，只能使用间接的方法来表示</em>。可以借助下面的形式将字符串赋值给变量：<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *variableName = <span class="string">"string"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>char和*是固定的形式，variableNmae 为变量名称，”string” 是要赋值的字符串。<br>由于大家的基础还不够，这里暂时不深入探讨，大家暂时记住即可，我们会在《C语言指针》一节中详细介绍。<br>字符串使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'@'</span>;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"This is a string."</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"char: %c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string1: %s\n"</span>, str);</span><br><span class="line">    <span class="comment">//也可以直接输出字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"string2: %s\n"</span>, <span class="string">"This is another string."</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>char: @<br>string1: This is a string.<br>string2: This is another string.</p><h4 id="C语言标识符、关键字和注释"><a href="#C语言标识符、关键字和注释" class="headerlink" title="C语言标识符、关键字和注释"></a>C语言标识符、关键字和注释</h4><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>定义变量时，我们使用了诸如“a”“abc”“mn123”这样的名字，它们都是程序员自己起的，一般能够表达出变量的作用，这叫做标识符（Identifier）。</p><p>标识符就是程序员自己起的名字，除了变量名，后面还会讲到函数名、宏名、结构体名等。不过，名字也不能随便起，</p><blockquote><p>C语言规定，<em>标识符只能由字母(A~Z, a~z)、数字(0~9)和下划线(_)组成，并且第一个字符必须是字母或下划线</em>。</p></blockquote><p>以下标识符是合法的：<br>a, x,  x3, BOOK_1, sum5</p><p>以下标识符是非法的：<br>3s    不能以数字开头<br>s<em>T    出现非法字符</em><br>-3x    不能以减号(-)开头<br>bowy-1    出现非法字符减号(-)</p><p>在使用标识符时还必须注意以下几点：</p><ul><li>C语言虽然不限制标识符的长度，但是它受到不同编译器的限制，同时也受到具体机器的限制。例如在某个编译器中规定标识符前128位有效，当两个标识符前128位相同时，则被认为是同一个标识符。</li><li>在标识符中，大小写是有区别的，例如BOOK和book 是两个不同的标识符。</li><li>标识符虽然可由程序员随意定义，但标识符是用于标识某个量的符号，因此，命名应尽量有相应的意义，以便于阅读理解，作到“顾名思义”。</li></ul><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>关键字（Keywords）是由C语言规定的具有特定意义的字符串，通常也称为保留字，例如 int、char、long、float、unsigned 等。我们定义的标识符不能与关键字相同，否则会出现错误。</p><blockquote><p>你也可以将关键字理解为具有特殊含义的标识符，它们已经被系统使用，我们不能再使用了。<br>标准C语言中一共规定了32个关键字，大家可以参考C语言关键字及其解释[共32个]，后续我们会一一讲解</p></blockquote><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>注释（Comments）可以出现在代码中的任何位置，用来向用户提示或解释程度的意义。程序编译时，会忽略注释，不做任何处理，就好像它不存在一样。</p><p>C语言支持单行注释和多行注释：<br>单行注释以//开头，直到本行末尾（不能换行）；<br>多行注释以/<em>开头，以</em>/结尾，注释内容可以有一行或多行。</p><p>一个使用注释的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Powered by: c.biancheng.net</span></span><br><span class="line"><span class="comment">  Author: xiao p</span></span><br><span class="line"><span class="comment">  Date: 2015-6-26</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* puts 会在末尾自动添加换行符 */</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"http://c.biancheng.net"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C语言中文网\n"</span>);  <span class="comment">//printf要手动添加换行符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><a href="http://c.biancheng.net" target="_blank" rel="noopener">http://c.biancheng.net</a><br>C语言中文网</p><p>在调试程序的过程中可以将暂时不使用的语句注释掉，使编译器跳过不作处理，待调试结束后再去掉注释。</p><p>需要注意的是，多行注释 不能嵌套使用。例如下面的注释是错误的：</p><pre><code>/*C语言/*中文*/网*/</code></pre><p>而下面的注释是正确的：</p><pre><code>/*C语言中文网*/  /*c.biancheng.net*/</code></pre><h4 id="C语言加减乘除运算"><a href="#C语言加减乘除运算" class="headerlink" title="C语言加减乘除运算"></a>C语言加减乘除运算</h4><p>C语言也可以进行加减乘除运算，但是运算符号与数学中的略有不同，见下表。<br>    加法  减法  乘法  除法  求余数<br>数学  +   -   ×   ÷   无<br>C语言 +   -   *   /   %<br>加号、减号与数学中的一样，乘号、除号不同，另外C语言还多了一个求余数的运算符。</p><p>我们先来看一段代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">float</span> c=<span class="number">8.5</span>;</span><br><span class="line">    <span class="keyword">int</span> m=a+b;</span><br><span class="line">    <span class="keyword">float</span> n=b*c;</span><br><span class="line">    <span class="keyword">double</span> p=a/c;</span><br><span class="line">    <span class="keyword">int</span> q=b%a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"m=%d, n=%f, p=%lf, q=%d\n"</span>, m, n, p, q);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>m=112, n=850.000000, p=1.411765, q=4</p><p>你也可以让数字直接参与运算：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">float</span> c=<span class="number">8.9</span>;</span><br><span class="line">    <span class="keyword">int</span> m=a-b;  <span class="comment">// 变量参与运算</span></span><br><span class="line">    <span class="keyword">int</span> n=a+<span class="number">239</span>;  <span class="comment">// 有变量也有数字</span></span><br><span class="line">    <span class="keyword">double</span> p=<span class="number">12.7</span>*<span class="number">34.3</span>;  <span class="comment">// 数字直接参与运算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"m=%d, n=%d, p=%lf\n"</span>, m, n, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"m*2=%d, 6/3=%d, m*n=%ld\n"</span>, m*<span class="number">2</span>, <span class="number">6</span>/<span class="number">3</span>, m*n);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>m=-88, n=251, p=435.610000<br>m<em>2=-176, 6/3=2, m</em>n=-22088</p><p>对于除法，需要注意的是除数不能为 0，所以诸如int a=3/0;这样的语句是错误的。</p><h5 id="加减乘除的简写"><a href="#加减乘除的简写" class="headerlink" title="加减乘除的简写"></a>加减乘除的简写</h5><p>先来看一个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\n"</span>, a);</span><br><span class="line">    a=a+<span class="number">8</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\n"</span>, a);</span><br><span class="line">    a=a*b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%d\n"</span>, a);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>a=12<br>a=20<br>a=200</p><p>第一次输出 a 原来的值；a=a+8;相当于用a+8的值替换原来 a 的值，所以第二次输出 20；第三次用a*b的值替换第二次的值，所以是 200。</p><p>在C语言中，表达式a=a#b可以简写为a#=b，#表示 +、-、*、/、% 中的任何一种运算符。</p><p>上例中a=a+8;可以简写为a+=8;，a=a<em>b;可以简写为a</em>=b;。</p><p>下面的简写形式也是正确的：<br>复制纯文本新窗口</p><p>int a = 10, b = 20;<br>a += 10;  //相当于 a = a + 10;<br>a <em>= (b-10);  //相当于 a = a </em> (b-10);<br>a -= (a+20);  //相当于 a = a - (a+20);<br>注意：a#=b 仅是一种简写，不会影响效率。</p><h4 id="C语言自增-和自减-–"><a href="#C语言自增-和自减-–" class="headerlink" title="C语言自增(++)和自减(–)"></a>C语言自增(++)和自减(–)</h4><p>一个整数自身加一可以这样写：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a+=1;</span><br></pre></td></tr></table></figure></p><p>它等价于a=a+1;。</p><p>但是在C语言中还有一种更简单的写法，就是a++;或者++a;。这种写法叫做自加或自增；意思很明确，就是自身加一。</p><p>相应的，也有a–和–a，叫做自减，表示自身减一。</p><p><strong>++和–分别称为自增和自减运算符</strong>。</p><p>自增和自减的示例：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%d, b=%d\n"</span>, a, b);</span><br><span class="line">    ++a;</span><br><span class="line">    --b;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%d, b=%d\n"</span>, a, b);</span><br><span class="line">    a++;</span><br><span class="line">    b--;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%d, b=%d\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>a=10, b=20<br>a=11, b=19<br>a=12, b=18</p><p>自增自减完成后，会用新值替换旧值，并将新值保存在当前变量中。自增自减只能针对变量，不能针对数字，例如10++是错误的。</p><pre><code>值得注意的是，++ 在变量前面和后面是有区别的：++ 在前面叫做前自增（例如 ++a）。前自增先进行自增操作，再进行其他操作。++ 在后面叫做后自增（例如 a++）。后自增先进行其他操作，再进行自增操作。</code></pre><p>自减（–）也一样，有前自减和后自减之分。</p><p>请看下面的例子：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>, a1=++a;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">20</span>, b1=b++;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">30</span>, c1=--c;</span><br><span class="line">    <span class="keyword">int</span> d=<span class="number">40</span>, d1=d--;</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a=%d, a1=%d\n"</span>, a, a1);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"b=%d, b1=%d\n"</span>, b, b1);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"c=%d, c1=%d\n"</span>, c, c1);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"d=%d, d1=%d\n"</span>, d, d1);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>a=11, a1=11<br>b=21, b1=20<br>c=29, c1=29<br>d=39, d1=40</p><p>a、b、c、d 的输出结果相信大家没有疑问，下面重点分析a1、b1、c1、d1：<br>1) 对于a1=++a，先执行++a，结果为11，再将11赋值给a1，所以a1的最终值为11。而a经过自增，最终的值也为11。</p><p>2) 对于b1=b++，b的值并不会立马加1，而是先把b原来的值交给b1，然后再加1。b原来的值为20，所以b1的值也就为20。而b经过自增，最终值为21。</p><p>3) 对于c1=–c，先执行–c，结果为29，再将29赋值给c1，所以c1的最终值为29。而c经过自减，最终的值也为29。</p><p>4) 对于d1=d–，d的值并不会立马减1，而是先把d原来的值交给d1，然后再减1。d原来的值为40，所以d1的值也就为40。而d经过自减，最终值为39。</p><p>可以看出：a1=++a;会先进行自增操作，再进行赋值操作；而b1=b++;会先进行赋值操作，再进行自增操作。c1=–c;和d1=d–;也是如此。<br>自增自减非常方便，后续编程中会经常用到，大家要注意区分。<br>为了强化记忆，我们再来看一个自增自减的综合示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c=a-(b--);  <span class="comment">// ①</span></span><br><span class="line">    <span class="keyword">int</span> d=(++a)-(--b);  <span class="comment">// ②</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%d, d=%d\n"</span>, c, d);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>c=11, d=14</p><p>我们来分析一下：<br>1) 执行语句①时，会先进行a-b运算，结果是11，然后 b 再自减，就变成了 0，最后再将a-b的结果（也就是11）交给 c，所以 c 的值是 11。</p><p>2) 执行语句②之前，b 的值已经变成 0。对于d=(++a)-(–b)，a 会先自增，变成 13，然后 b 再自减，变成 -1，最后再进行13-(-1)，结果是14，交给 d，所以 d 最终是 14。</p><h4 id="C语言运算符的优先级和结合性"><a href="#C语言运算符的优先级和结合性" class="headerlink" title="C语言运算符的优先级和结合性"></a>C语言运算符的优先级和结合性</h4><p>先来看一个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">1</span>,c=<span class="number">2</span>;</span><br><span class="line">    a=b=c;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"12+3*5=%d\n"</span>, <span class="number">12</span>+<span class="number">3</span>*<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"a=%d, c=%d\n"</span>, a, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>12+3*5=27<br>a=2, c=2</p><p>1) 对于表达式12+3<em>5，很明显先进行乘法运算，计算3</em>5，结果为15，再进行加法运算，计算12+15，结果为27。也就是说，乘法的优先级比加法高，要先计算，这与数学中的规则是一样的。</p><p>所谓优先级，就是当有多个运算符在同一个表达式中出现时，先执行哪个运算符。如果不想按照默认的规则执行，可以加( )，例如(12+3)<em>5的结果为 75，(2+5)</em>(10-4)的结果为 42。大部分情况下，它们的规则和数学中是相同的。</p><p>2) 对于语句赋值语句a=b=c;，先执行b=c，再执行a=b，而不是反过来，这说明赋值操作符=具有右结合性。</p><p>所谓结合性，就是当一个运算符多次出现时，先执行哪个运算符。先执行右边的叫右结合性，先执行左边的叫左结合性。<br>表达式（Expression）和语句（Statement）的概念在C语言中并没有明确的定义：<br>表达式可以看做一个计算的公式，往往由数据、变量、运算符等组成，例如3*4+5、a=c=d等，它的结果必定是一个值；<br>语句的范围更加广泛，不一定是计算，不一定有值，可以是某个操作、某个函数、选择结构、循环等。</p><p>值得注意的是：以分号;结束的往往称为语句，而不是表达式，例如3<em>4+5;、a=c=d;等。<br>3) 像 +、-、</em>、/ 这样的运算符，它的两边都有数据，例如 3+4、a*3 等，有两个操作数，我们称这样的运算符为双目运算符。后面还会讲解单目运算符和三目运算符。</p><p>C语言中有几十种运算符，这里不一一说明，大家可以点击《C语言运算符的优先级和结合性一览表》查看完整列表</p><p>C语言的运算符众多，具有不同的优先级和结合性，我们将它们全部列了出来，方便大家对比和记忆：<br><img src="/images/" alt=""></p><p>注：同一优先级的运算符，运算次序由结合方向所决定。</p><p>上面的表无需死记硬背，很多运算符的规则和数学中是相同的，用得多，看得多自然就记得了。如果你是在记不住，可以使用( )。</p><p>一些容易出错的优先级问题<br><img src="/images/easyErrorC.jpg" alt=""></p><p>上表中，优先级同为1 的几种运算符如果同时出现，那怎么确定表达式的优先级呢？这是很多初学者迷糊的地方。下表就整理了这些容易出错的情况：<br>这些容易出错的情况，希望读者好好在编译器上调试调试，这样印象会深一些。一定要多调试，光靠看代码，水平是很难提上来的。调试代码才是最长水平的。</p><h4 id="C语言数据类型转换"><a href="#C语言数据类型转换" class="headerlink" title="C语言数据类型转换"></a>C语言数据类型转换</h4><p>数据类型转换就是将数据（变量、表达式的结果）从一种类型转换到另一种类型。例如，为了保存小数你可以将int类型的变量转换为double类型。</p><p>数据类型转换的一般格式为：</p><pre><code>(type_name) expression</code></pre><p>type_name为要转换到的数据类型，expression为表达式。例如：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">float</span>) a<span class="comment">;  //把a转换为实型</span></span><br><span class="line">(<span class="name">int</span>)(<span class="name">x+y</span>)<span class="comment">;  //把x+y的结果转换为整型</span></span><br><span class="line">(<span class="name">float</span>) <span class="number">100</span><span class="comment">;  //将一个常量转换为实型</span></span><br></pre></td></tr></table></figure></p><p>【示例】将整数转换为浮点数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> sum = <span class="number">17</span>, count = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">double</span> mean;</span><br><span class="line">   mean = (<span class="keyword">double</span>) sum / count;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Value of mean : %f\n"</span>, mean);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>Value of mean : 3.400000</p><p>需要注意的是，类型转换运算符( )的优先级高于/，(double) sum / count会先将 sum 转换为 double 类型，然后再进行除法运算。如果写作(double) (sum / count)，那么运行结果就是 3.000000。</p><p>这种由程序员显式进行的转换称为<strong>强制类型转换</strong>。除了强制类型转换，在不同数据类型的混合运算中编译器也会隐式地进行数据类型转换，称为<strong>自动类型转换</strong>。</p><p>自动类型转换遵循下面的规则：</p><ol><li>若参与运算的数据类型不同，则先转换成同一类型，然后进行运算。</li><li>转换按数据长度增加的方向进行，以保证精度不降低。例如int型和long型运算时，先把int量转成long型后再进行运算。</li><li>所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，再作运算。</li><li>char型和short型参与运算时，必须先转换成int型。</li><li>在赋值运算中，赋值号两边的数据类型不同时，需要把右边表达式的类型将转换为左边变量的类型。如果右边表达式的数据类型长度比左边长时，将丢失一部分数据，这样会降低精度。</li></ol><p>下图表示了类型自动转换的规则：<br><img src="/images/autoTranslate.png" alt=""></p><p>【示例】自动数据类型转换。<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">int main()&#123;</span><br><span class="line">    float PI=<span class="number">3</span>.<span class="number">14159</span><span class="comment">;</span></span><br><span class="line">    int <span class="built_in">s1</span>, r=<span class="number">5</span><span class="comment">;</span></span><br><span class="line">    double <span class="built_in">s2</span><span class="comment">;</span></span><br><span class="line">    <span class="built_in">s1</span> = r*r*PI<span class="comment">;</span></span><br><span class="line">    <span class="built_in">s2</span> = r*r*PI<span class="comment">;</span></span><br><span class="line">    printf(<span class="string">"s1=%d, s2=%f\n"</span>, <span class="built_in">s1</span>, <span class="built_in">s2</span>)<span class="comment">;</span></span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>s1=78, s2=78.539753</p><p>在计算表达式<code>r*r*PI</code>时，r 和 PI 都转换成double类型，表达式的结果也为double类型。但由于 s1 为整型，所以赋值运算的结果仍为整型，舍去了小数部分。<br>注意是将小数部分直接丢掉，而不是按照四舍五入向前舍入。</p><p>无论是强制转换或是自动转换，都只是为了本次运算的需要而对变量的数据长度进行的临时性转换，而不改变数据说明时对该变量定义的类型。请看下面的例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f=<span class="number">5.75</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(int)f=%d, f=%f\n"</span>,(<span class="keyword">int</span>)f, f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>(int)f=5, f=5.750000</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;GCC&quot;&gt;&lt;a href=&quot;#GCC&quot; class=&quot;headerlink&quot; title=&quot;GCC&quot;&gt;&lt;/a&gt;GCC&lt;/h4&gt;&lt;p&gt;Linux下使用最广泛的C/C++编译器是GCC，大多数的Linux发行版本都默认安装，不管是开发人员还是初学者，一般都将GCC作为Linux下首选的编译工具。&lt;/p&gt;
&lt;p&gt;保存文件后退出，打开终端并 cd 到当前目录，输入下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc test.c -o test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以直接将C代码编译链接为可执行文件。&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://yulongphp.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://yulongphp.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>30个有关Python的小技巧</title>
    <link href="http://yulongphp.github.io/2015/04/25/30%E4%B8%AA%E6%9C%89%E5%85%B3Python%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yulongphp.github.io/2015/04/25/30个有关Python的小技巧/</id>
    <published>2015-04-25T02:28:04.000Z</published>
    <updated>2018-08-22T09:43:49.627Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘自 <a href="http://www.phpchina.com/forum.php" target="_blank" rel="noopener">PHPchina.com</a></p><hr><h3 id="1-拆箱"><a href="#1-拆箱" class="headerlink" title="1. 拆箱"></a>1. 拆箱</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = (<span class="number">2</span> * i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, (b, c), d = [<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-拆箱变量交换"><a href="#2-拆箱变量交换" class="headerlink" title="2. 拆箱变量交换"></a>2. 拆箱变量交换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = b, a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="3-扩展拆箱（只兼容python3）"><a href="#3-扩展拆箱（只兼容python3）" class="headerlink" title="3. 扩展拆箱（只兼容python3）"></a>3. 扩展拆箱（只兼容python3）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-负数索引"><a href="#4-负数索引" class="headerlink" title="4.  负数索引"></a>4.  负数索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>]</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-切割列表"><a href="#5-切割列表" class="headerlink" title="5. 切割列表"></a>5. 切割列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="6-负数索引切割列表"><a href="#6-负数索引切割列表" class="headerlink" title="6. 负数索引切割列表"></a>6. 负数索引切割列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-4</span>:<span class="number">-2</span>]</span><br><span class="line">[<span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="7-指定步长切割列表"><a href="#7-指定步长切割列表" class="headerlink" title="7.指定步长切割列表"></a>7.指定步长切割列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">3</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">8</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="8-负数步长切割列表"><a href="#8-负数步长切割列表" class="headerlink" title="8. 负数步长切割列表"></a>8. 负数步长切割列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-2</span>]</span><br><span class="line">[<span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="9-列表切割赋值"><a href="#9-列表切割赋值" class="headerlink" title="9. 列表切割赋值"></a>9. 列表切割赋值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">3</span>] = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">-1</span>] = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="10-命名列表切割方式"><a href="#10-命名列表切割方式" class="headerlink" title="10. 命名列表切割方式"></a>10. 命名列表切割方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE = slice(<span class="number">-3</span>, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LASTTHREE</span><br><span class="line">slice(<span class="number">-3</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[LASTTHREE]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="11-列表以及迭代器的压缩和解压缩"><a href="#11-列表以及迭代器的压缩和解压缩" class="headerlink" title="11. 列表以及迭代器的压缩和解压缩"></a>11. 列表以及迭代器的压缩和解压缩</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = zip(a, b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">3</span>, <span class="string">'c'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*z)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)]</span><br></pre></td></tr></table></figure><hr><h2 id="12-列表相邻元素压缩器"><a href="#12-列表相邻元素压缩器" class="headerlink" title="12. 列表相邻元素压缩器"></a>12. 列表相邻元素压缩器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(*([iter(a)] * <span class="number">2</span>))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*([iter(a)] * k))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(a[::<span class="number">2</span>], a[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(a[::<span class="number">3</span>], a[<span class="number">1</span>::<span class="number">3</span>], a[<span class="number">2</span>::<span class="number">3</span>])</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent = <span class="keyword">lambda</span> a, k: zip(*(a[i::k] <span class="keyword">for</span> i <span class="keyword">in</span> range(k)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>group_adjacent(a, <span class="number">1</span>)</span><br><span class="line">[(<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">3</span>,), (<span class="number">4</span>,), (<span class="number">5</span>,), (<span class="number">6</span>,)]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 13. 在列表中用压缩器和迭代器滑动取值窗口</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">n_grams</span><span class="params">(a, n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    z = [iter(a[i:]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> zip(*z)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">3</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">2</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">5</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n_grams(a, <span class="number">4</span>)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)]</span><br></pre></td></tr></table></figure><hr><h2 id="14-用压缩器反转字典"><a href="#14-用压缩器反转字典" class="headerlink" title="14. 用压缩器反转字典"></a>14. 用压缩器反转字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.items()</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'c'</span>, <span class="number">3</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'d'</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>zip(m.values(), m.keys())</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">3</span>, <span class="string">'c'</span>), (<span class="number">2</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'d'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mi = dict(zip(m.values(), m.keys()))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mi</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="comment">## 15. 列表展开</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain.from_iterable(a))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(a, [])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l <span class="keyword">in</span> a <span class="keyword">for</span> x <span class="keyword">in</span> l]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> l1 <span class="keyword">in</span> a <span class="keyword">for</span> l2 <span class="keyword">in</span> l1 <span class="keyword">for</span> x <span class="keyword">in</span> l2]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flatten = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> l <span class="keyword">in</span> x <span class="keyword">for</span> y <span class="keyword">in</span> flatten(l)] <span class="keyword">if</span> type(x) <span class="keyword">is</span> list <span class="keyword">else</span> [x]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flatten(a)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 16. 生成器表达式</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>))</span><br><span class="line"><span class="number">2025</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">1</span>)</span><br><span class="line"><span class="number">408</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 17. 字典推导</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">9</span>, <span class="number">4</span>: <span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;x: <span class="string">'A'</span> + str(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&#123;<span class="number">0</span>: <span class="string">'A0'</span>, <span class="number">1</span>: <span class="string">'A1'</span>, <span class="number">2</span>: <span class="string">'A2'</span>, <span class="number">3</span>: <span class="string">'A3'</span>, <span class="number">4</span>: <span class="string">'A4'</span>, <span class="number">5</span>: <span class="string">'A5'</span>, <span class="number">6</span>: <span class="string">'A6'</span>, <span class="number">7</span>: <span class="string">'A7'</span>, <span class="number">8</span>: <span class="string">'A8'</span>, <span class="number">9</span>: <span class="string">'A9'</span>&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 18. 用字典推导反转字典</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line">&#123;<span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> m.items()&#125;</span><br><span class="line">&#123;<span class="number">1</span>: <span class="string">'a'</span>, <span class="number">2</span>: <span class="string">'b'</span>, <span class="number">3</span>: <span class="string">'c'</span>, <span class="number">4</span>: <span class="string">'d'</span>&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"><span class="comment">## 19. 命名元组</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = collections.namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</span><br><span class="line"><span class="number">2.0</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 20. 继承命名元组</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(collections.namedtuple<span class="params">(<span class="string">'PointBase'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__ = ()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> Point(x=self.x + other.x, y=self.y + other.y)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">1.0</span>, y=<span class="number">2.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = Point(x=<span class="number">2.0</span>, y=<span class="number">3.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p + q</span><br><span class="line">Point(x=<span class="number">3.0</span>, y=<span class="number">5.0</span>)</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 21. 操作集合</span></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">set([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</span><br><span class="line">set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line">``` </span><br><span class="line">------</span><br><span class="line"><span class="comment">## 22. 操作多重集合</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = collections.Counter([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A | B</span><br><span class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A &amp; B</span><br><span class="line">Counter(&#123;<span class="number">2</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A + B</span><br><span class="line">Counter(&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">3</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A - B</span><br><span class="line">Counter(&#123;<span class="number">1</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B - A</span><br><span class="line">Counter(&#123;<span class="number">3</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><hr><h2 id="23-统计在可迭代器中最常出现的元素"><a href="#23-统计在可迭代器中最常出现的元素" class="headerlink" title="23. 统计在可迭代器中最常出现的元素"></a>23. 统计在可迭代器中最常出现的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A = collections.Counter([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">Counter(&#123;<span class="number">3</span>: <span class="number">4</span>, <span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">1</span>)</span><br><span class="line">[(<span class="number">3</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.most_common(<span class="number">3</span>)</span><br><span class="line">[(<span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><hr><h2 id="24-两端都可操作的队列"><a href="#24-两端都可操作的队列" class="headerlink" title="24. 两端都可操作的队列"></a>24. 两端都可操作的队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q = collections.deque()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.appendleft(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extend([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.extendleft([<span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q</span><br><span class="line">deque([<span class="number">6</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.pop()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.popleft()</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q</span><br><span class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q</span><br><span class="line">deque([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q.rotate(<span class="number">-3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Q</span><br><span class="line">deque([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><hr><h2 id="25-有最大长度的双端队列"><a href="#25-有最大长度的双端队列" class="headerlink" title="25. 有最大长度的双端队列"></a>25. 有最大长度的双端队列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>last_three = collections.deque(maxlen=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    last_three.append(i)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">', '</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> last_three)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"><span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"><span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span></span><br><span class="line"><span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span></span><br><span class="line"><span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br></pre></td></tr></table></figure><hr><h2 id="26-可排序词典"><a href="#26-可排序词典" class="headerlink" title="26. 可排序词典"></a>26. 可排序词典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.OrderedDict((str(x), x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">', '</span>.join(m.keys())</span><br><span class="line"><span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="27-默认词典"><a href="#27-默认词典" class="headerlink" title="27. 默认词典"></a>27. 默认词典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = dict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'a'</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(str)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>] += <span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = collections.defaultdict(<span class="keyword">lambda</span>: <span class="string">'[default value]'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'a'</span>]</span><br><span class="line"><span class="string">'[default value]'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m[<span class="string">'b'</span>]</span><br><span class="line"><span class="string">'[default value]'</span></span><br></pre></td></tr></table></figure><hr><h2 id="28-默认字典的简单树状表达"><a href="#28-默认字典的简单树状表达" class="headerlink" title="28. 默认字典的简单树状表达"></a>28. 默认字典的简单树状表达</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tree = <span class="keyword">lambda</span>: collections.defaultdict(tree)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root = tree()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'id'</span>] = <span class="string">'file'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'value'</span>] = <span class="string">'File'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'value'</span>] = <span class="string">'New'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'new'</span>][<span class="string">'onclick'</span>] = <span class="string">'new();'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'value'</span>] = <span class="string">'Open'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'open'</span>][<span class="string">'onclick'</span>] = <span class="string">'open();'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'value'</span>] = <span class="string">'Close'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="string">'menu'</span>][<span class="string">'menuitems'</span>][<span class="string">'close'</span>][<span class="string">'onclick'</span>] = <span class="string">'close();'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> json.dumps(root, sort_keys=<span class="keyword">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">','</span>, <span class="string">': '</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"menu"</span>: &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"file"</span>,</span><br><span class="line">        <span class="string">"menuitems"</span>: &#123;</span><br><span class="line">            <span class="string">"close"</span>: &#123;</span><br><span class="line">                <span class="string">"onclick"</span>: <span class="string">"close();"</span>,</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"Close"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"new"</span>: &#123;</span><br><span class="line">                <span class="string">"onclick"</span>: <span class="string">"new();"</span>,</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"New"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"open"</span>: &#123;</span><br><span class="line">                <span class="string">"onclick"</span>: <span class="string">"open();"</span>,</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"Open"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"value"</span>: <span class="string">"File"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="29-对象到唯一计数的映射"><a href="#29-对象到唯一计数的映射" class="headerlink" title="29. 对象到唯一计数的映射"></a>29. 对象到唯一计数的映射</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools, collections</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map = collections.defaultdict(itertools.count().next)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'c'</span>]</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>value_to_numeric_map[<span class="string">'b'</span>]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="30-最大和最小的几个列表元素"><a href="#30-最大和最小的几个列表元素" class="headerlink" title="30. 最大和最小的几个列表元素"></a>30. 最大和最小的几个列表元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">100</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nsmallest(<span class="number">5</span>, a)</span><br><span class="line">[<span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">5</span>, a)</span><br><span class="line">[<span class="number">100</span>, <span class="number">100</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">98</span>]</span><br></pre></td></tr></table></figure><hr><h2 id="31-两个列表的笛卡尔积"><a href="#31-两个列表的笛卡尔积" class="headerlink" title="31. 两个列表的笛卡尔积"></a>31. 两个列表的笛卡尔积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]):</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">4</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</span><br><span class="line">...</span><br><span class="line"><span class="number">0000</span></span><br><span class="line"><span class="number">0001</span></span><br><span class="line"><span class="number">0010</span></span><br><span class="line"><span class="number">0011</span></span><br><span class="line"><span class="number">0100</span></span><br><span class="line"><span class="number">0101</span></span><br><span class="line"><span class="number">0110</span></span><br><span class="line"><span class="number">0111</span></span><br><span class="line"><span class="number">1000</span></span><br><span class="line"><span class="number">1001</span></span><br><span class="line"><span class="number">1010</span></span><br><span class="line"><span class="number">1011</span></span><br><span class="line"><span class="number">1100</span></span><br><span class="line"><span class="number">1101</span></span><br><span class="line"><span class="number">1110</span></span><br><span class="line"><span class="number">1111</span></span><br></pre></td></tr></table></figure><hr><h2 id="32-列表组合和列表元素替代组合"><a href="#32-列表组合和列表元素替代组合" class="headerlink" title="32. 列表组合和列表元素替代组合"></a>32. 列表组合和列表元素替代组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</span><br><span class="line">...</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">125</span></span><br><span class="line"><span class="number">134</span></span><br><span class="line"><span class="number">135</span></span><br><span class="line"><span class="number">145</span></span><br><span class="line"><span class="number">234</span></span><br><span class="line"><span class="number">235</span></span><br><span class="line"><span class="number">245</span></span><br><span class="line"><span class="number">345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> itertools.combinations_with_replacement([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> c)</span><br><span class="line">...</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><hr><h2 id="33-列表元素排列组合"><a href="#33-列表元素排列组合" class="headerlink" title="33. 列表元素排列组合"></a>33. 列表元素排列组合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.permutations([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">''</span>.join(str(x) <span class="keyword">for</span> x <span class="keyword">in</span> p)</span><br><span class="line">...</span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">1243</span></span><br><span class="line"><span class="number">1324</span></span><br><span class="line"><span class="number">1342</span></span><br><span class="line"><span class="number">1423</span></span><br><span class="line"><span class="number">1432</span></span><br><span class="line"><span class="number">2134</span></span><br><span class="line"><span class="number">2143</span></span><br><span class="line"><span class="number">2314</span></span><br><span class="line"><span class="number">2341</span></span><br><span class="line"><span class="number">2413</span></span><br><span class="line"><span class="number">2431</span></span><br><span class="line"><span class="number">3124</span></span><br><span class="line"><span class="number">3142</span></span><br><span class="line"><span class="number">3214</span></span><br><span class="line"><span class="number">3241</span></span><br><span class="line"><span class="number">3412</span></span><br><span class="line"><span class="number">3421</span></span><br><span class="line"><span class="number">4123</span></span><br><span class="line"><span class="number">4132</span></span><br><span class="line"><span class="number">4213</span></span><br><span class="line"><span class="number">4231</span></span><br><span class="line"><span class="number">4312</span></span><br><span class="line"><span class="number">4321</span></span><br></pre></td></tr></table></figure><hr><h2 id="34-可链接迭代器"><a href="#34-可链接迭代器" class="headerlink" title="34. 可链接迭代器"></a>34. 可链接迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> itertools.chain(itertools.combinations(a, <span class="number">2</span>), itertools.combinations(a, <span class="number">3</span>)):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> p</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> subset <span class="keyword">in</span> itertools.chain.from_iterable(itertools.combinations(a, n) <span class="keyword">for</span> n <span class="keyword">in</span> range(len(a) + <span class="number">1</span>))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> subset</span><br><span class="line">...</span><br><span class="line">()</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line">(<span class="number">3</span>,)</span><br><span class="line">(<span class="number">4</span>,)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="35-根据文件指定列类聚"><a href="#35-根据文件指定列类聚" class="headerlink" title="35. 根据文件指定列类聚"></a>35. 根据文件指定列类聚</h2><pre><code class="python"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools<span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'contactlenses.csv'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> infile:<span class="meta">... </span>    data = [line.strip().split(<span class="string">','</span>) <span class="keyword">for</span> line <span class="keyword">in</span> infile]...<span class="meta">&gt;&gt;&gt; </span>data = data[<span class="number">1</span>:]<span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_data</span><span class="params">(rows)</span>:</span><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'\n'</span>.join(<span class="string">'\t'</span>.join(<span class="string">'{: &lt;16}'</span>.format(s) <span class="keyword">for</span> s <span class="keyword">in</span> row) <span class="keyword">for</span> row <span class="keyword">in</span> rows)...<span class="meta">&gt;&gt;&gt; </span>print_data(data)young               myope                   no                      reduced                 noneyoung               myope                   no                      normal                  softyoung               myope                   yes                     reduced                 noneyoung               myope                   yes                     normal                  hardyoung               hypermetrope            no                      reduced                 noneyoung               hypermetrope            no                      normal                  softyoung               hypermetrope            yes                     reduced                 noneyoung               hypermetrope            yes                     normal                  hardpre-presbyopic      myope                   no                      reduced                 nonepre-presbyopic      myope                   no                      normal                  softpre-presbyopic      myope                   yes                     reduced                 nonepre-presbyopic      myope                   yes                     normal                  hardpre-presbyopic      hypermetrope            no                      reduced                 nonepre-presbyopic      hypermetrope            no                      normal                  softpre-presbyopic      hypermetrope            yes                     reduced                 nonepre-presbyopic      hypermetrope            yes                     normal                  nonepresbyopic          myope                   no                      reduced                 nonepresbyopic          myope                   no                      normal                  nonepresbyopic          myope                   yes                     reduced                 nonepresbyopic          myope                   yes                     normal                  hardpresbyopic          hypermetrope            no                      reduced                 nonepresbyopic          hypermetrope            no                      normal                  softpresbyopic          hypermetrope            yes                     reduced                 nonepresbyopic          hypermetrope            yes                     normal                  none<span class="meta">&gt;&gt;&gt; </span>data.sort(key=<span class="keyword">lambda</span> r: r[<span class="number">-1</span>])<span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> value, group <span class="keyword">in</span> itertools.groupby(data, <span class="keyword">lambda</span> r: r[<span class="number">-1</span>]):<span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'-----------'</span><span class="meta">... </span>    <span class="keyword">print</span> <span class="string">'Group: '</span> + value<span class="meta">... </span>    print_data(group)...-----------Group: hardyoung               myope                   yes                     normal                  hardyoung               hypermetrope            yes                     normal                  hardpre-presbyopic      myope                   yes                     normal                  hardpresbyopic          myope                   yes                     normal                  hard-----------Group: noneyoung               myope                   no                      reduced                 noneyoung               myope                   yes                     reduced                 noneyoung               hypermetrope            no                      reduced                 noneyoung               hypermetrope            yes                     reduced                 nonepre-presbyopic      myope                   no                      reduced                 nonepre-presbyopic      myope                   yes                     reduced                 nonepre-presbyopic      hypermetrope            no                      reduced                 nonepre-presbyopic      hypermetrope            yes                     reduced                 nonepre-presbyopic      hypermetrope            yes                     normal                  nonepresbyopic          myope                   no                      reduced                 nonepresbyopic          myope                   no                      normal                  nonepresbyopic          myope                   yes                     reduced                 nonepresbyopic          hypermetrope            no                      reduced                 nonepresbyopic          hypermetrope            yes                     reduced                 nonepresbyopic          hypermetrope            yes                     normal                  none-----------Group: softyoung               myope                   no                      normal                  softyoung               hypermetrope            no                      normal                  softpre-presbyopic      myope                   no                      normal                  softpre-presbyopic      hypermetrope            no                      normal                  softpresbyopic          hypermetrope            no                      normal                  soft</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文摘自 &lt;a href=&quot;http://www.phpchina.com/forum.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHPchina.com&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-拆箱&quot;&gt;&lt;a href=&quot;#1-拆箱&quot; class=&quot;headerlink&quot; title=&quot;1. 拆箱&quot;&gt;&lt;/a&gt;1. 拆箱&lt;/h3&gt;
    
    </summary>
    
      <category term="python" scheme="http://yulongphp.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://yulongphp.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>debain 解决无法显示中文</title>
    <link href="http://yulongphp.github.io/2015/03/30/debain-%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/"/>
    <id>http://yulongphp.github.io/2015/03/30/debain-解决无法显示中文/</id>
    <published>2015-03-30T07:34:11.000Z</published>
    <updated>2018-08-22T09:43:49.630Z</updated>
    
    <content type="html"><![CDATA[<p>首先先配置编码：<code>vim /etc/locale.gen</code><br>去掉前面的#</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line"></span><br><span class="line">zh_CN GB2312</span><br><span class="line"></span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line"></span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br></pre></td></tr></table></figure><p>然后编辑：<code>vim /etc/default/locale</code></p><p>设置:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">LANG</span>=en_US.UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>然后安装语言包:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">apt-get install ttf-arphic-uming</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apt-get install xfonts-intl-chinese</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apt-get install xfonts-wqy</span></span><br></pre></td></tr></table></figure></p><p>到这里应该就可以显示中文了，没停下来查看，马不停蹄的安装输入法了<br>最后安装 <code>scim</code> 输入法相关：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">apt-get install scim</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apt-get install scim-chinese</span></span><br><span class="line"><span class="meta">#</span><span class="bash">apt-get install scim-pinyin</span></span><br></pre></td></tr></table></figure></p><p>最后重启了下就ok了，输入法通过 <code>ctrl+space</code>  切换</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先先配置编码：&lt;code&gt;vim /etc/locale.gen&lt;/code&gt;&lt;br&gt;去掉前面的#&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="debian" scheme="http://yulongphp.github.io/tags/debian/"/>
    
  </entry>
  
  <entry>
    <title>python Tcl/Tk包问题</title>
    <link href="http://yulongphp.github.io/2015/03/27/python-Tcl-Tk%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://yulongphp.github.io/2015/03/27/python-Tcl-Tk包问题/</id>
    <published>2015-03-27T06:47:32.000Z</published>
    <updated>2018-08-22T09:43:49.627Z</updated>
    
    <content type="html"><![CDATA[<p>今天在学python的时候使用Tkinter包的时候出现以下问题:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">File</span> <span class="string">"/usr/local/lib/python2.7/lib-tk/Tkinter.py"</span>, <span class="built_in">line</span> <span class="number">39</span>, in &lt;<span class="keyword">module</span>&gt;</span><br><span class="line">    <span class="keyword">import</span> _tkinter # If <span class="keyword">this</span> fails your Python may <span class="keyword">not</span> be configured <span class="built_in">for</span> Tk</span><br><span class="line">ImportError: No <span class="keyword">module</span> named _tkinter</span><br></pre></td></tr></table></figure></p><a id="more"></a> <p>然后就给python重新安装了一遍 结果发现：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">running</span> install</span><br><span class="line"><span class="built_in">running</span> build</span><br><span class="line"><span class="built_in">running</span> build_ext</span><br><span class="line">INFO: Can't locate Tcl/Tk libs <span class="keyword">and</span>/<span class="keyword">or</span> headers</span><br><span class="line"></span><br><span class="line">Python build finished, <span class="keyword">but</span> <span class="keyword">the</span> necessary bits <span class="keyword">to</span> build these modules were <span class="keyword">not</span> found:</span><br><span class="line">_bsddb             _curses            _curses_panel   </span><br><span class="line">_sqlite3           _tkinter           bsddb185        </span><br><span class="line">dbm                dl                 gdbm            </span><br><span class="line">imageop            sunaudiodev                        </span><br><span class="line">To find <span class="keyword">the</span> necessary bits, look <span class="keyword">in</span> setup.py <span class="keyword">in</span> detect_modules() <span class="keyword">for</span> <span class="keyword">the</span> module's <span class="built_in">name</span>.</span><br></pre></td></tr></table></figure></p><p>是少了 <code>Tcl/Tk</code>，于是就直接 <code>apt-get install tcl</code> <code>apt-get install tk</code> 安装了 <code>tcl</code> 和 <code>tk</code> 库 ，然后又执行 <code>python setup.py install</code>  安装  <code>python</code>：</p><p>结果还是不行，还是提示<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can't locate Tcl/Tk libs<span class="built_in"> and/or </span>headers</span><br></pre></td></tr></table></figure></p><p>郁闷呀;</p><p>然后就又百度了下 找到一篇博客：<a href="http://www.linuxdiyf.com/viewarticle.php?id=55587" target="_blank" rel="noopener">http://www.linuxdiyf.com/viewarticle.php?id=55587</a> 讲的比较详细：</p><p>原来 <code>setup.py</code> 安装的时候要寻找 <code>tcl.h</code> 和 <code>tk.h</code> 两个头文件，但是我用 <code>find / -name tcl.h</code> 在整个 <code>linux</code> 范围内都没有找到这个头文件。</p><p>再仔细看python.org/topics/tkinter/给出的指导：</p><p><em>You may have to install Tcl and Tk(when using RPM, install the –devel RPM as well) and /or edit the setup.py script to point to the right locations where Tcl/Tk is installed. If you install Tcl/Tk in the default locations, simply rerunning “make” should build the _tkinter extension. </em></p><p>所以我要安装 <code>tcl-devel</code>（我的系统是 <code>debian</code> 安装的是 <code>tcl-dev</code>）和 <code>tk-devel</code> （我的系统是 <code>debian</code> 安装的是 <code>tk-dev</code>）才能有头文件，安装 <code>tcl/tk</code>，只是把静态或者动态库考到 <code>lib</code> 目录下，只有 <code>tcl-devel（tc-dev）</code>，<code>tk-devel（tk-dev）</code> 才会把头文件放到 <code>/usr/include</code> 里边，而 <code>_tkinter</code> 要编译必须找到这些头文件。</p><p>然后我就执行了<br><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install tcl-<span class="built_in">dev</span>    </span><br><span class="line"></span><br><span class="line">apt-<span class="built_in">get</span> install tk-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure></p><p>安装完这两个包后问题就解决了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在学python的时候使用Tkinter包的时候出现以下问题:&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/usr/local/lib/python2.7/lib-tk/Tkinter.py&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;39&lt;/span&gt;, in &amp;lt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; _tkinter # If &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; fails your Python may &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; be configured &lt;span class=&quot;built_in&quot;&gt;for&lt;/span&gt; Tk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ImportError: No &lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt; named _tkinter&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yulongphp.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://yulongphp.github.io/tags/python/"/>
    
      <category term="tcl" scheme="http://yulongphp.github.io/tags/tcl/"/>
    
      <category term="tk" scheme="http://yulongphp.github.io/tags/tk/"/>
    
  </entry>
  
  <entry>
    <title>如何使用sublime编辑器运行python程序</title>
    <link href="http://yulongphp.github.io/2015/03/25/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8sublime%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yulongphp.github.io/2015/03/25/如何使用sublime编辑器运行python程序/</id>
    <published>2015-03-25T03:36:13.000Z</published>
    <updated>2018-08-22T09:43:49.634Z</updated>
    
    <content type="html"><![CDATA[<p>现在越发喜欢sublime编辑器了，不仅界面友好美观、文艺，可扩展性还特别强。<br>sublime本身是不具备运行python程序的能力的，需要做些设置才可以。<br>以下是安装好sublime后设置的步骤：</p><a id="more"></a><p>点击“Preference”—–》“Browse Packages”———-》“python”，编辑Python.sublime-build文件，添加python应用程序的路径，我的是安装到了c:\Python27路径中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"cmd"</span>:[<span class="string">"python.exe"</span>, <span class="string">"-u"</span>, <span class="string">"<span class="variable">$file</span>"</span>],</span><br><span class="line"> <span class="string">"path"</span>:<span class="string">"C:/Python27"</span>,</span><br><span class="line"> <span class="string">"file_regex"</span>: <span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line"> <span class="string">"selector"</span>: <span class="string">"source.python"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意:<br>:  1、代码路径和环境变量的路径中不要带中文，对中文支持还不好。<br>:  2、写完程序后，需要先保存一下，才能够运行。运行时按<code>ctrl+b</code>。</p><p>做到以上这些，就没问题了</p><p><a href="http://blog.chinaunix.net/uid-27571599-id-3481855.html" target="_blank" rel="noopener">博客原文</a>：<a href="http://blog.chinaunix.net/uid-27571599-id-3481855.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-27571599-id-3481855.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在越发喜欢sublime编辑器了，不仅界面友好美观、文艺，可扩展性还特别强。&lt;br&gt;sublime本身是不具备运行python程序的能力的，需要做些设置才可以。&lt;br&gt;以下是安装好sublime后设置的步骤：&lt;/p&gt;
    
    </summary>
    
      <category term="sublime" scheme="http://yulongphp.github.io/categories/sublime/"/>
    
    
      <category term="python" scheme="http://yulongphp.github.io/tags/python/"/>
    
      <category term="sublime" scheme="http://yulongphp.github.io/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>Python交互模式下方向键出现乱码</title>
    <link href="http://yulongphp.github.io/2015/03/09/Python%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%96%B9%E5%90%91%E9%94%AE%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/"/>
    <id>http://yulongphp.github.io/2015/03/09/Python交互模式下方向键出现乱码/</id>
    <published>2015-03-09T08:18:39.000Z</published>
    <updated>2018-08-22T09:43:49.630Z</updated>
    
    <content type="html"><![CDATA[<p>解决办法如下：</p><h3 id="1、安装readline模块"><a href="#1、安装readline模块" class="headerlink" title="1、安装readline模块"></a>1、安装readline模块</h3><p>readline库是bash shell用的库，包含许多功能，如命令行自动补全等。<br>ubuntu下安装的命令：<code>sudo apt-get install libreadline-dev</code></p><a id="more"></a><h3 id="2、重新安装python"><a href="#2、重新安装python" class="headerlink" title="2、重新安装python"></a>2、重新安装python</h3><p>在python的安装目录下，执行：<code>make;sudo make install</code></p><p>现在去试试看行了不，如果还是不行，就使用 <code>python</code> 自带的 <code>readline</code> 模块<br>切换到 <code>python</code> 安装目录下的 <code>Modules</code> 目录，编辑 <code>Setup</code> 文件<br>取消<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#readline</span> readline<span class="selector-class">.c</span> -lreadline -ltermcap`</span><br></pre></td></tr></table></figure></p><p>行的注释符#</p><p>再重新安装python（执行2的操作）</p><p><em>ps ： 在<code>fedora</code>下可能会出现<code>readline/readline.h:</code>没有那个文件或目录的问题(公司的是<code>ubuntu11.10</code>，我自己的机器装的是<code>fedora14</code>,出现了这个问题)<br>解决办法：</em></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> libtermcap-devel ncurses-devel libevent-devel readline-devel</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解决办法如下：&lt;/p&gt;
&lt;h3 id=&quot;1、安装readline模块&quot;&gt;&lt;a href=&quot;#1、安装readline模块&quot; class=&quot;headerlink&quot; title=&quot;1、安装readline模块&quot;&gt;&lt;/a&gt;1、安装readline模块&lt;/h3&gt;&lt;p&gt;readline库是bash shell用的库，包含许多功能，如命令行自动补全等。&lt;br&gt;ubuntu下安装的命令：&lt;code&gt;sudo apt-get install libreadline-dev&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yulongphp.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://yulongphp.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>debian/ubuntu如何增加sudo权限</title>
    <link href="http://yulongphp.github.io/2015/03/09/%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0sudo%E6%9D%83%E9%99%90/"/>
    <id>http://yulongphp.github.io/2015/03/09/如何增加sudo权限/</id>
    <published>2015-03-09T08:15:39.000Z</published>
    <updated>2018-08-22T09:43:49.634Z</updated>
    
    <content type="html"><![CDATA[<p>安装好Debian后还不能使用sudo<br>如果没有安装sudo，则在root用户下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install sudo</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在root设置sudoers配制文件<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +w <span class="regexp">/etc/</span>sudoers</span><br><span class="line"></span><br><span class="line">vim <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure></p><p>添加一行<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>) <span class="keyword">ALL</span></span><br></pre></td></tr></table></figure></p><p>其中<strong>username</strong>是你的用户名，保存<br>更改sudoers文件权限<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">0440</span> <span class="regexp">/etc/</span>sudoers</span><br></pre></td></tr></table></figure></p><p>退出root</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装好Debian后还不能使用sudo&lt;br&gt;如果没有安装sudo，则在root用户下&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install sudo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="debian" scheme="http://yulongphp.github.io/categories/debian/"/>
    
    
      <category term="debian" scheme="http://yulongphp.github.io/tags/debian/"/>
    
      <category term="ubuntu" scheme="http://yulongphp.github.io/tags/ubuntu/"/>
    
      <category term="sudo" scheme="http://yulongphp.github.io/tags/sudo/"/>
    
  </entry>
  
</feed>
