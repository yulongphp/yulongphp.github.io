<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mryy的博客</title>
  
  <subtitle>生活不仅只是敲代码，还有...调bug...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yulongphp.github.io/"/>
  <updated>2019-07-01T10:48:14.364Z</updated>
  <id>http://yulongphp.github.io/</id>
  
  <author>
    <name>yulong yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yulongphp.github.io/2019/06/29/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/"/>
    <id>http://yulongphp.github.io/2019/06/29/mysql实战45讲/</id>
    <published>2019-06-29T08:40:55.970Z</published>
    <updated>2019-07-01T10:48:14.364Z</updated>
    
    <content type="html"><![CDATA[<p>0x01 一条SQL查询语句是如何执行的?</p><pre><code>    mysql逻辑架构图：    ![](/images/mysql_jiagou.png)    大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。    Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核 心服务功能，以及所有的内置函数(如日期、时间、数学和加密函数等)，所有跨存储引 擎的功能都在这一层实现，比如存储过程、触发器、视图等。    而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、 MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。    不同的存储引擎共用一个Server 层，也就是从连接器到执行器的部分。1. 连接器：    第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。    连接器负责跟客户端建立连接、获取权限、维持和管理连接。    一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。    数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。    建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。    但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因 为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断 开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉 (OOM)，从现象看就是 MySQL 异常重启了    怎么解决这个问题呢?你可以考虑以下两种方案。        1）. 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后， 断开连接，之后要查询再重连。        2）. 如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执 行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权 限验证，但是会将连接恢复到刚刚创建完时的状态。2. 查询缓存    MySQL 拿到一个查询请求后，会先到查询缓存看看，如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。    1）大多数情况下建议不要使用查询缓存，为什么呢?        因为查询缓存往往弊大于利。        查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。        MySQL 也提供了“按需使用”的方式。        将参数 query_cache_type 设置 成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓 存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样:        mysql&gt; select SQL_CACHE * from T where ID=10;        MySQL 8.0 版本直接将查询缓存的整块功能删掉了    如果没有命中查询缓存，就开始真正执行语句了。3.分析器    分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句， MySQL 需要识别出里面的字符串分别是什么，代表什么。    MySQL 从你输入的&quot;select&quot;这个关键字识别出来，这是一个查询语句。它也要把字符 串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。    词法分析以后会做语法分析，根据词法分析的结果判断sql是否满足语法。    一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。4.优化器    经过了分析器，MySQL就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。    优化器是在表里面有多个索引的时候，决定使用哪个索引;或者在一个语句有多表关联 (join)的时候，决定各个表的连接顺序。5.执行器    优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。    开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误(在工程实现上，如果命中查询缓存，会在查询缓存返回结 果的时候，做权限验证。查询也会在优化器之前调precheck 验证权限)。    如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。    mysql&gt; select * from T where ID=10;    比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的:        1. 调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如 果是则将这行存在结果集中;        2. 调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。 3. 执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。    至此，这个语句就执行完成了。    对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。    你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程 中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。    在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此引擎扫描行数跟 rows_examined 并不是完全相同的。我们后面会专门有一篇文章来讲存储引擎的内部机 制，里面会有详细的说明。小结    如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误: “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢?    答案是分析器。    Connect_timeout 指的是“连接过程中”的等待时间， wait_timeout指的是“连接完成后，使用过程中”的等待时间一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</code></pre><p>0x02 日志系统:一条SQL更新语句是如何执行的?<br>    在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语 句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因.</p><pre><code>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这 个索引。然后，执行器负责具体执行，找到这一行，然后更新.与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论 的主角:redo log(重做日志)和 binlog(归档日志)。如果接触 MySQL，那这两个词 肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。1. 重要的日志模块:redo log(innodb 特有的日志)    《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。    如果有人要赊账或者还账的话，掌柜一般有两种做法:        一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉;        另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。    在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。    同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这 个问题，MySQL的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。    而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称 是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。    具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log(粉 板)里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时 候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就 像打烊以后掌柜做的事。    与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文 件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末 尾就又回到开头循环写，如下面这个图所示。    ![](/images/WAL_log.png)    write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件 开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录 更新到数据文件。    write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如 果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下 来先擦掉一些记录，把 checkpoint 推进一下。    有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢 失，这个能力称为crash-safe。    要理解 crash-safe 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉 板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通 过账本和粉板上的数据明确赊账账目。2. 重要的日志模块:binlog    MySQL 整体来看，其实就有两块:一块是 Server 层，它主要做的是 MySQL 功能层面的事情;还有一块是引擎层，负责存储相关的具体事宜。 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog(归档日志)    我想你肯定会问，为什么会有两份日志呢?        因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司 以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。    这两种日志有以下三点不同。        1. redo log 是 InnoDB 引擎特有的;binlog 是 MySQL 的 Server 层实现的，所有引擎 都可以使用。        2. redo log 是物理日志，记录的是“在某个数据页上做了什么修改”;binlog 是逻辑日 志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。        3. redo log 是循环写的，空间固定会用完;binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。3. 执行流程    有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。        1. 执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器;否则，需要先从磁 盘读入内存，然后再返回。        2. 执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到 新的一行数据，再调用引擎接口写入这行新数据。        3. 引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。        4. 执行器生成这个操作的 binlog，并把 binlog 写入磁盘。        5. 执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交(commit)状态，更新完成。    update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的， 深色框表示是在执行器中执行的。    ![](/images/update_liucheng.png)    你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤: prepare 和 commit，这就是&quot;两阶段提交4. 两阶段提交    为什么必须有“两阶段提交”呢?这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起:怎样让数据库恢复到半个月内任意一秒的状态?    前面我们说过了，binlog 会记录所有的逻辑操作，并且是采用“追加写”的形式。如果你 的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天 一备，也可以是一周一备。    当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做:        首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库;        然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的 那个时刻。    这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。    好了，说完了数据恢复过程，我们回来说说，为什么日志需要“两阶段提交”。这里不妨用反证法来进行解释。    由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。    仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执 行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash， 会出现什么情况呢?        1. 先写 redo log 后写 binlog。假设在 redo log 写完，binlog 还没有写完的时候， MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍 然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。        但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。 然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢 失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不 同。        2. 先写 binlog 后写 redo log。如果在binlog写完之后crash，由于 redo log 还没 写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录 了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事 务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。    可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致.    不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是 需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上 应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情 况。    简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两 个状态保持逻辑上的一致。小结    MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。    redo log 用于保证 crash-safe 能力innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1， 这样可以保证 MySQL 异常重启之后数据不丢失。    sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个 参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。    我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维 持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。    定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢?或者说，它影响了这个数据库系统的哪个指标?        好处是“最长恢复时间”更短。        在一天一备的模式里，最坏情况下需要应用一天的 binlog。比如，你每天 0 点做一次全量 备份，而要恢复出一个到昨天晚上 23 点的备份。        一周一备最坏情况就要应用一周的 binlog 了。        系统的对应指标就：RTO(恢复目标时间)        当然这个是有成本的，因为更频繁全量备份需要消耗更多存储空间，所以这个 RTO 是成 本换来的，就需要你根据业务重要性来评估了。    Redo log是记录这个数据页 “做了什么改动”。    Binlog有两种模式，statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。</code></pre><p>0x03 事务隔离:为什么你改了我还看不见?<br>    事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。你现在知道，MySQL 是一个支持多引擎的系统，但并 不是所有的引擎都支持事务。比如 MySQL 原生的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。</p><pre><code>1. 隔离性与隔离级别    提到事务，你肯定会想到 ACID(Atomicity、Consistency、Isolation、Durability，即 原子性、一致性、隔离性、持久性)，今天我们就来说说其中 I，也就是“隔离性”。    当数据库上有多个事务同时执行的时候，就可能出现脏读(dirty read)、不可重复读 (non-repeatable read)、幻读(phantom read)的问题，为了解决这些问题，就有 了“隔离级别”的概念。    在谈隔离级别之前，你首先要知道，你隔离得越严实，效率就会越低。因此很多时候，我 们都要在二者之间寻找一个平衡点。SQL 标准的事务隔离级别包括:读未提交(read uncommitted)、读提交(read committed)、可重复读(repeatable read)和串行 化(serializable )。下面我逐一为你解释:        读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。        读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。        可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。        串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行.    其中“读提交”和“可重复读”比较难理解，所以我用一个例子说明这几种隔离级别。假 设数据表 T 中只有一列，其中一行的值为 1，下面是按照时间顺序执行两个事务的行为。    1 mysql&gt; create table T(c int) engine=InnoDB;     2 insert into T(c) values(1);    ![](/images/transation.png)    我们来看看在不同的隔离级别下，事务 A 会有哪些不同的返回结果，也就是图里面 V1、 V2、V3 的返回值分别是什么。        若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。        若隔离级别是“读提交”，则 V1 是 1，V2 的值是 2。事务 B 的更新在提交后才能被 A 看到。所以， V3 的值也是 2。        若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就 是这个要求:事务在执行期间看到的数据前后必须是一致的。        若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事 务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值 是 2。    在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。在“可重复 读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。 在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。这里需要 注意的是，“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念;而“串行 化”隔离级别下直接用加锁的方式来避免并行访问。    Oracle 数据库的默认隔离 级别其实就是“读提交”，因此对于一些从 Oracle 迁移到 MySQL 的应用，为保证数据 库隔离级别的一致，你一定要记得将 MySQL 的隔离级别设置为“读提交”.    我想你可能会问那什么时候需要“可重复读”的场景呢?我们来看一个数据校对逻辑的案例。        假设你在管理一个个人银行账户表。一个表存了每个月月底的余额，一个表存了账单明细。这时候你要做数据校对，也就是判断上个月的余额和当前余额的差额，是否与本月的账单明细一致。你一定希望在校对过程中，即使有用户发生了一笔新的交易，也不影响你的校对结果。        这时候使用“可重复读”隔离级别就很方便。事务启动时的视图可以认为是静态的，不受其他事务更新的影响。2. 事务隔离的实现    理解了事务的隔离级别，我们再来看看事务隔离具体是怎么实现的。这里我们展开说明“可重复读”。    在 MySQL 中，实际上每条记录在更新的时候都会同时记录一条回滚操作。记录上的最新 值，通过回滚操作，都可以得到前一个状态的值。    假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。    ![](/images/rollback_log.png)    当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。 如图中看到的，在视图 A、B、C 里面，这一个记录的值分别是 1、2、4，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制(MVCC)。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。    同时你会发现，即使现在有另外一个事务正在将 4 改成 5，这个事务跟 read-view A、 B、C 对应的事务是不会冲突的。    你一定会问，回滚日志总不能一直保留吧，什么时候删除呢?答案是，在不需要的时候才删除。也就是说，系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志会被删除。    什么时候才不需要了呢?就是当系统里没有比这个回滚日志更早的 read-view 的时候。    基于上面的说明，我们来讨论一下为什么建议你尽量不要使用长事务。    长事务意味着系统里面会存在很老的事务视图。由于这些事务随时可能访问数据库里面的任何数据，所以这个事务提交之前，数据库里面它可能用到的回滚记录都必须保留，这就会导致大量占用存储空间。    在 MySQL 5.5 及以前的版本，回滚日志是跟数据字典一起放在 ibdata 文件里的，即使长 事务最终提交，回滚段被清理，文件也不会变小。我见过数据只有 20GB，而回滚段有 200GB 的库。最终只好为了清理回滚段，重建整个库。    除了对回滚段的影响，长事务还占用锁资源，也可能拖垮整个库。3. 事务的启动方式    MySQL 的事务启动方式有以下几 种:        1. 显式启动事务语句， begin 或 start transaction。配套的提交语句是 commit，回滚语 句是 rollback。        2. set autocommit=0，这个命令会将这个线程的自动提交关掉。意味着如果你只执行一 个 select 语句，这个事务就启动了，而且并不会自动提交。这个事务持续存在直到你主动执行 commit 或 rollback 语句，或者断开连接    有些客户端连接框架会默认连接成功后先执行一个 set autocommit=0 的命令。这就导致 接下来的查询都在事务中，如果是长连接，就导致了意外的长事务。    因此，我会建议你总是使用 set autocommit=1, 通过显式语句的方式来启动事务。    但是有的开发同学会纠结“多一次交互”的问题。对于一个需要频繁使用事务的业务，第二种方式每个事务在开始时都不需要主动执行一次 “begin”，减少了语句的交互次数。 如果你也有这个顾虑，我建议你使用 commit work and chain 语法。    在 autocommit 为 1 的情况下，用 begin 显式启动的事务，如果执行 commit 则提交事 务。如果执行 commit work and chain，则是提交事务并自动启动下一个事务，这样也省 去了再次执行 begin 语句的开销。同时带来的好处是从程序开发的角度明确地知道每个语 句是否处于事务中。    你可以在 information_schema 库的 innodb_trx 这个表中查询长事务，比如下面这个语 句，用于查找持续时间超过 60s 的事务。    mysql&gt; select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60小结    如何避免长事务对业务的影响?    从应用开发端来看:        1. 确认是否使用了 set autocommit=0。这个确认工作可以在测试环境中开展，把 MySQL 的 general_log 开起来，然后随便跑一个业务逻辑，通过 general_log 的日志 来确认。一般框架如果会设置这个值，也就会提供参数来控制行为，你的目标就是把它 改成 1。        2. 确认是否有不必要的只读事务。有些框架会习惯不管什么语句先用 begin/commit 框起 来。我见过有些是业务并没有这个需要，但是也把好几个 select 语句放到了事务中。这 种只读事务可以去掉。        3. 业务连接数据库的时候，根据业务本身的预估，通过 SET MAX_EXECUTION_TIME 命 令，来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。    从数据库端来看:        1. 监控 information_schema.Innodb_trx 表，设置长事务阈值，超过就报警 / 或者 kill;        2. Percona 的 pt-kill 这个工具不错，推荐使用;        3. 在业务功能测试阶段要求输出所有的 general_log，分析日志行为提前发现问题;        4. 如果使用的是 MySQL 5.6 或者更新版本，把innodb_undo_tablespaces 设置成2(或更大的值)。如果真的出现大事务导致回滚段过大，这样设置后清理起来更方便。</code></pre><p>0x04 深入浅出索引<br>    索引的出现其实就是为了提高数据查询的效率，就像书的目录一样。</p><pre><code>1. 索引的常见模型    索引的出现是为了提高查询效率，但是实现索引的方式却有很多种，所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多，这里我先给你介绍三种常见、也比较简单的数据结构，它们分别是哈希表、有序数组和搜索树。    哈希表:        一种以键 - 值(key-value)存储数据的结构.        可能会出现hash冲突，链表解决。        无序，插入很快，只需要往后追加。        区间查询速度很慢。        哈希表这种结构适用于只有等值查询的场景，比如memcache    有序数组：        有序数组在等值查询和范围查询场景中的性能就都非常优秀        有序，二分查找很快，时间复杂度O(log(N))        支持范围查询，先二分找左区间，然后向右遍历，知道右区间，退出循环        更新数据成本比较高，插入一个记录需要挪动后面所有记录        有序数组索引只适用于静态存储引擎，比如去年某城市的人口信息，这类不会再修改的数据    二叉搜索树（N叉树）：        特点：每个节点的左儿子小于父节点，父节点又小于右儿子        为了维持O(log(N))的查询复杂度，就需要保持这棵树是平衡二叉树。为了做这个保证，更新的时间复杂度也是O(log(N))。        树可以有二叉，也可以有多叉。多叉树就是每个节点有多个儿子，儿子之间的大小保证从左到右递增。        二叉树是搜索效率最高的，但是实际上大多数的数据库存储却并不使用二叉树。其原因是，索引不止存在内存中，还要写到磁盘上。        你可以想象一下一棵 100 万节点的平衡二叉树，树高 20。一次查询可能需要访问 20 个数 据块。在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是 说，对于一个 100 万行的表，如果使用二叉树来存储，单独访问一个行可能需要 20 个 10 ms 的时间，这个查询可真够慢的。        为了让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块。那么，我们就 不应该使用二叉树，而是要使用“N 叉”树。这里，“N 叉”树中的“N”取决于数据块 的大小。        (高度为K的二叉树中，最多有2^(k+1)-1个结点)        以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。这棵树高是 4 的时候，就可以存 1200 的 3 次方个值，这已经 17 亿了。考虑到树根的数据块总是在内存中的，一 个 10 亿行的表上一个整数字段的索引，查找一个值最多只需要访问 3 次磁盘。其实，树 的第二层也有很大概率在内存中，那么访问磁盘的平均次数就更少了。        N 叉树由于在读写上的性能优点，以及适配磁盘的访问模式，已经被广泛应用在数据库引擎中了。    不管是哈希还是有序数组，或者 N 叉树，它们都是不断迭代、不断优化的产物或者解决方 案。数据库技术发展到今天，跳表、LSM 树等数据结构也被用于引擎设计中，这里我就不 再一一展开了。    在 MySQL 中，索引是在存储引擎层实现的，所以并没有统一的索引标准，即不同存储引 擎的索引的工作方式并不一样。而即使多个存储引擎支持同一种类型的索引，其底层的实 现也可能不同。由于 InnoDB 存储引擎在 MySQL 数据库中使用最为广泛，所以下面我就 以 InnoDB 为例，和你分析一下其中的索引模型。2. InnoDB的索引模型    在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表，InnoDB使用了B+树索引模型，所有的数据都是在存储在B+树中的。    每一个索引在 InnoDB 里面对应一棵 B+ 树。    InnoDB 的索引组织结构：    ![](/images/innodb_index.png)    根据叶子节点的内容，索引类型分为主键索引和非主键索引。    主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引 (clustered index)。    非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引 (secondary index)。    基于主键索引和普通索引的查询有什么区别?        如果语句是 select * from T where ID=500，即主键查询方式，则只需要搜索 ID 这棵 B+ 树;        如果语句是 select * from T where k=5，即普通索引查询方式，则需要先搜索 k 索引 树，得到 ID 的值为 500，再到 ID 索引树搜索一次。这个过程称为回表。    基于非主键索引的查询需要多扫描一棵索引树。因此，我们在应用中应该尽量使用主键查询。3. 索引维护    B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。    根据B+树的算法，需要申请一个新的数据页，挪动部分数据过去，这个过程称为页分裂。    页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个 页中，整体空间利用率降低大约 50%。    有分裂就有合并，相邻的两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。    哪些场景下应该使用自增主键，而哪些场景下不应该?        自增主键的插入数据模式，正符合了我们前面提到的递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。        而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。        除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份证号做主键，还是用自增字段做主键呢?        由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级 索引的叶子节点占用约 20 个字节，而如果用整型做主键，则只要 4 个字节，如果是长整 型(bigint)则是 8 个字节    主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。    从性能和存储空间方面考量，自增主键往往是更合理的选择。    什么场景适合用业务字段直接做主键的呢?        1. 只有一个索引;        2. 该索引必须是唯一索引。    你一定看出来了，这就是典型的 KV 场景。     由于没有其他索引，所以也就不用考虑其他索引的叶子节点大小的问题。    这时候我们就要优先考虑上一段提到的“尽量使用主键查询”原则，直接将这个索引设置为主键，可以避免每次查询需要搜索两棵树。小结    B+ 树能够很好地配合磁盘的读写特性，减少单次查询的 磁盘访问次数。    由于 InnoDB 是索引组织表，一般情况下建议创建一个自增主键，这样非主键索引占用的空间最小。    但事无绝对，也有使用业务逻辑字段做主键的应用场景。    通过两个 alter 语句重建索引 k，以及通过两个 alter 语句重建主键索引是 否合理。        1 alter table T drop index k;         2 alter table T add index(k);        1 alter table T drop primary key;        2 alter table T add primary key(id);    重建索引 k 的做法是合理的，可以达到省空间的目的。    重建主键的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。所以连着执行这两个语句的话，第一个 语句就白做了。这两个语句，你可以用这个语句代替 : alter table T engine=InnoDB。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0x01 一条SQL查询语句是如何执行的?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    mysql逻辑架构图：
    ![](/images/mysql_jiagou.png)

    大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。

    Serve
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 性能监控那些令人激赏的命令行工具</title>
    <link href="http://yulongphp.github.io/2019/06/27/mysql%E6%80%BB%E7%BB%93/"/>
    <id>http://yulongphp.github.io/2019/06/27/mysql总结/</id>
    <published>2019-06-27T07:30:00.000Z</published>
    <updated>2019-07-02T05:57:03.779Z</updated>
    
    <content type="html"><![CDATA[<p>一. MyISAM 和 Innodb区别？<br>    1) MyISAM只能加全局锁做全库逻辑备份<br>    2) 不支持行锁, 意味着并发控制只能使用表锁，同一张表上任何时刻只能有一个更新在执行<br>    3) 不支持外键<br>    4）count(*) 直接读取保存好的总行数  有where条件的话也是扫描全表<br>    5） 支持全文索引，压缩索引<br>    6）MyISAM的索引和数据是分开的，并且索引是有压缩的，内存使用率就对应提高了不少。能加载更多索引<br>    7）不支持事务和mvcc（多版本并发控制）<br>    8）查询比较多的业务<br>    9）非聚集索引，索引存储的是物理地址<br>    10）允许没有任何索引和主键的表存在，索引都是保存行的地址<br>    11）frm是表定义文件，myd是数据文件，myi是索引文件</p><pre><code>1）Innodb可以在REPEATABLE READ(可重复读)隔离级别，用mysqldump工具加-single-transation参数做全库备份，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持， 这个过程中数据是可以正常更新的.2）支持行锁3）支持外键4) Crash Safe (redo log)5) 支持事务和mvcc（多版本并发控制）6) 可以在线热备份7) count(*) 需要扫描全表8）DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。10）聚集索引，非聚集索引 覆盖索引11）数据文件就是索引文件 12）不支持全文索引， 可以适用sphinx插件支持全文索引，并且效果更好  13） Innodb存储文件有frm、ibd frm表定义文件 ibd数据文件14 ）InnoDB表必须有主键（用户没有指定的话会自己找或生产一个主键）如何选择：    1. 是否要支持事务，如果要请选择innodb，如果不需要可以考虑MyISAM；    2. 如果表中绝大多数都只是读查询，可以考虑MyISAM，如果既有读也有写，请使用InnoDB。    3. 系统奔溃后，MyISAM恢复起来更困难，能否接受；    4. MySQL5.5版本开始Innodb已经成为Mysql的默认引擎(之前是MyISAM)，说明其优势是有目共睹的，如果你不知道用什么，那就用InnoDB，至少不会差。</code></pre><p>二. cgi和fastcgi区别<br>    CGI<br>        什么是cgi？<br>            1）CGI（Common Gateway Interface）全称是“通用网关接口”，是一种让客户端（web浏览器）与Web服务器（nginx等）程序进行通信（数据传输）的协议。<br>                用来规范web服务器传输到php解释器中的数据类型以及数据格式，包括URL、查询字符串、POST数据、HTTP header等，也就是为了保证web server传递过来的数据是标准格式的。<br>            2）CGI可以用任何一种具有标准输入、输出和环境变量的语言编写，如php、perl、tcl等。<br>                不同类型语言写的程序只要符合cgi标准，就能作为一个cgi程序与web服务器交互，早期的cgi大多都是c或c++编写的。<br>            3）一般说的CGI指的是用各种语言编写的能实现该功能的程序。<br>        工作原理：<br>            1）每次当web server收到index.php这种类型的动态请求后，会启动对应的CGI程序（PHP的解析器）；<br>            2）PHP解析器会解析php.ini配置文件，初始化运行环境，然后处理请求，处理完成后将数据按照CGI规定的格式返回给web server然后退出进程；<br>            3）最后web server再把结果返回给浏览器。<br>        CGI程序的特点<br>            1）高并发时的性能较差：<br>                CGI程序的每一次web请求都会有启动和退出过程，也就是最为人诟病的fork-and-execute模式（每次HTTP服务器遇到动态请求时都需要重新启动脚本解析器来解析php.ini，重新载入全部DLL扩展并重初始化全部数据结构，然后把结果返回给HTTP服务器），很明显，这样的接口方式会导致php的性能很差，在处理高并发访问时，几乎是不可用的。<br>            2）传统的CGI接口方式安全性较差<br>            3）CGI对php.ini的配置很敏感，在开发和调试的时候相当方便<br>        CGI程序的应用领域<br>            因为CGI为每一次请求增加一个进程，效率很低，所以基本已经不在生产部署时采用。<br>            但由于CGI对php配置的敏感性，通常被用在开发和调试阶段<br>    FASTCGI<br>        什么是fastcgi?<br>            通过CGI程序的工作原理可以看出：CGI程序性能较差，安全性较低，为了解决这些问题产生了FastCGI。<br>            1）FastCGI（Fast Common Gateway Interface）全称是“快速通用网关接口”<br>                是通用网关接口（CGI）的增强版本，由CGI发展改进而来，主要用来提高CGI程序性能，<br>                类似于CGI，FastCGI也是一种让交互程序与Web服务器通信的协议<br>            2）FastCGI致力于减少网页服务器与CGI程序之间互动的开销，从而使服务器可以同时处理更多的网页请求（提高并发访问）。<br>            3）同样的，一般说的FastCGI指的也是用各种语言编写的能实现该功能的程序<br>        工作原理:<br>            1）Web Server启动同时，加载FastCGI进程管理器（nginx的php-fpm或者IIS的ISAPI或Apache的Module)<br>            2）FastCGI进程管理器读取php.ini配置文件，对自身进行初始化，启动多个CGI解释器进程(php-cgi)，等待来自Web Server的连接。<br>            3）当Web Server接收到客户端请求时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server会将相关环境变量和标准输入发送到FastCGI子进程php-cgi进行处理<br>            4）FastCGI子进程完成处理后将数据按照CGI规定的格式返回给Web Server，然后关闭FastCGI子进程或者等待下一次请求<br>        FastCGI对进程的管理方式<br>            Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。<br>            当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。<br>            这样就避免了重复的劳动，效率自然提高。<br>            而且当worker不够用时，master可以根据配置预先启动几个worker等着；<br>            当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。</p><p>三. 天下无难试之Redis面试刁难大全</p><pre><code>1. Redis有哪些数据结构？    字符串String、字典Hash、列表List、集合Set、有序集合SortedSet。    如果你是Redis中高级用户，还需要加上下面几种数据结构HyperLogLog、Geo、Pub/Sub。    如果你说还玩过Redis Module，像BloomFilter，RedisSearch，Redis-ML，面试官得眼睛就开始发亮了。2. 使用过Redis分布式锁么，它是什么回事？    先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。    这时候对方会告诉你说你回答得不错，然后接着问如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？    这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。3. 假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？    使用keys指令可以扫出指定模式的key列表。    对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？    这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。4. 使用过Redis做异步队列么，你是怎么用的？    一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。    如果对方追问可不可以不用sleep呢？list还有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。    如果对方追问能不能生产一次消费多次呢？使用pub/sub主题订阅者模式，可以实现1:N的消息队列。    如果对方追问pub/sub有什么缺点？在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。    如果对方追问redis如何实现延时队列？我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。    到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。5. 如果有大量的key需要设置同一时间过期，一般需要注意什么？    如果大量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。6. Redis如何做持久化的？    bgsave做镜像全量持久化，aof做增量持久化。因为bgsave会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要aof来配合使用。在redis实例重启时，优先使用aof来恢复内存的状态，如果没有aof日志，就会使用rdb文件来恢复。    如果再问aof文件过大恢复时间过长怎么办？你告诉面试官，Redis会定期做aof重写，压缩aof文件日志大小。如果面试官不够满意，再拿出杀手锏答案，Redis4.0之后有了混合持久化的功能，将bgsave的全量和aof的增量做了融合处理，这样既保证了恢复的效率又兼顾了数据的安全性。这个功能甚至很多面试官都不知道，他们肯定会对你刮目相看。    如果对方追问那如果突然机器掉电会怎样？取决于aof日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能的要求下每次都sync是不现实的，一般都使用定时sync，比如1s1次，这个时候最多就会丢失1s的数据。    如果对方追问bgsave的原理是什么？你给出两个词汇就可以了，fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。7. Pipeline有什么好处，为什么要用pipeline？    可以将多次IO往返的时间缩减为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是pipeline批次指令的数目。8. Redis的同步机制了解么？    Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。9. 是否使用过Redis集群，集群的原理是什么？    Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。    Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</code></pre><p>四 、去除当前日志格式client_id 参数值排名前10位？<br>    [14/Dec/2017:17:19:17 +0800] “GET /access?client_id=user&amp;client_secret=137u1S0Xe4C5I01T3w7l70Gv HTTP/1.1” 200 132 - “0.097” “0.097”<br>    &gt; grep ‘access’ oauth.xidibuy.com |awk -F ‘=’ ‘{print $2}’ | cut -d ‘&amp;’ -f 1 | sort | uniq -c | sort -rn<br>1548301 dealer<br> 255730 mobile<br>  39440 pc_admin<br>  21445 wxapp<br>  14033 user<br>   5274 internal_open_api</p><p>五、设计模式<br>单例：<br>    class DB{<br>        private static $db = null;<br>        private function _construct(){</p><pre><code>    }    public static function getInstance(){        if(!self::db instance of DB){            self::$db = new self();        }        return self::$db;    }    private staticc function __clone(){    }}</code></pre><p>适配器：<br>    interface IDatabase{<br>        function connect($host, $user, $passwd, $dbname);<br>        function query($sql);<br>        function close();<br>    }<br>    class Mysql implements IDatabase{<br>        function connect($host, $user, $passwd, $dbname);<br>        function query($sql);<br>        function close();<br>    }<br>    class PDO implements IDatabase{<br>        function connect($host, $user, $passwd, $dbname);<br>        function query($sql);<br>        function close();<br>    }<br>观察者：<br>    //事件产生者(被观察者)<br>    abstract class EventGenerator {<br>        //保存众多观察者实例<br>        private $observers = array();<br>        function addObserver(Observer $observer){<br>            $this-&gt;observers[] = $observer;<br>        }</p><pre><code>    function notify(){        foreach($this-&gt;observers as $observer){            $observer-&gt;update();        }    }} //具体事件class Event extends EventGenerator{    function trigger(){        echo &quot;Event\n&quot;;        $this-&gt;notify();    }}//观察者接口interface Observer {    function update($event_info = null);}//观察者1class  Observer1 implements Observer{    function update($event_info = null) {        echo &quot;逻辑1\n&quot;;    }}//观察者2class  Observer2 implements Observer{    function update($event_info = null) {        echo &quot;逻辑2\n&quot;;    }}$event = new Event;$event-&gt;addObserver(new Observer1);$event-&gt;addObserver(new Observer1);$event-&gt;trigger();</code></pre><p>六、排序<br> 二分查找：<br>    function binSearch($arr, $f){<br>        $c = count($arr);<br>        $l = 0;<br>        $h = $c - 1;<br>        while($l &lt;= $h){<br>            $m = floor(($l+$h)/2);<br>            echo $l,’=’,$h,’=’,$m,”\n”;<br>            if($f &gt; $arr[$m]){<br>                $l = $m + 1;<br>            }elseif($f &lt; $arr[$m]){<br>                $h = $m - 1;<br>            }else{<br>                return $m;<br>            }<br>        }<br>        return -1;<br>    }<br>快速排序：<br>    def quickSort(arr){<br>        if len(arr) &lt; 2:<br>            return arr<br>        else :<br>            min = [x for x in arr[1:] if x &lt; arr[0]]<br>            max = [x for x in arr[1:] if x &gt;= arr[0]]<br>            return quickSort(min) + [arr[0]] + quickSort(max)<br>    }<br>反转链表：<br>    def reverseList(self, head):<br>        cur, prev = head, None<br>        while cur:<br>            cur.next, prev, cur = prev, cur, cur.next<br>        return prev</p><p>链表有环：<br>    def hasCycle(self, head){<br>        fast = slow = head<br>        while slow and fast and fast.next:<br>            slow = slow.next<br>            fast = fast.next.next<br>            if slow iss fast:<br>                return true<br>        return false<br>    }</p><p>七、 分布式锁</p><p>八、 消息队列好处，问题<br>九、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一. MyISAM 和 Innodb区别？&lt;br&gt;    1) MyISAM只能加全局锁做全库逻辑备份&lt;br&gt;    2) 不支持行锁, 意味着并发控制只能使用表锁，同一张表上任何时刻只能有一个更新在执行&lt;br&gt;    3) 不支持外键&lt;br&gt;    4）count(*) 
      
    
    </summary>
    
      <category term="mysql" scheme="http://yulongphp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yulongphp.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yulongphp.github.io/2019/06/27/%E9%AB%98%E6%80%A7%E8%83%BDmysql/"/>
    <id>http://yulongphp.github.io/2019/06/27/高性能mysql/</id>
    <published>2019-06-26T16:29:48.067Z</published>
    <updated>2019-06-29T08:40:32.657Z</updated>
    
    <content type="html"><![CDATA[<p>什么是事务？<br>事务就是一组原子行为的sql查询，或者说一个独立的工作单元。如果数据库引擎能成功的多数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。<br>也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。</p><p>什么是ACID？<br>原子性，一致性，隔离性，持久性。<br>原子性：一个事务必须被视为一个不可分割的，最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。<br>一致性：数据库总是从一个一致性的状态转换到另一个一致性的状态。<br>隔离型：通常来说，一个事务所做的修改在最终提交以前，对其他事务是不可见的。<br>持久性：一旦事务提交，则其所做的修改就会永久保存到数据库中</p><p>mysql存储引擎的优势？<br>用户可以根据业务是否需要事务处理，来选择合适的存储引擎。对于一些不需要事务的查询类应用，选择一个非事务型的存储引擎，可以获得更高的性能。即使存储引擎不支持事务，也可以通过lock tables语句为应用提供一定程度的保护，这些选择用户都可以自主决定</p><p>什么是隔离级别？<br>mysql标准中定义了四种隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。较低级别的隔离通常可以执行更高的并发，系统的开销也更低。<br>READ UNCOMMITED（未提交读）<br>    事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的是数据，这也被称为脏读。这个级别会导致很多问题提，从性能上来说，不会比其他的级别好太多，但却缺乏其他级别的很多好处，除非真的有非常必要的理由，在实际应用中一般很少使用<br>READ COMMITED（提交读/不可重复读）<br>    大多数是数据库系统默认隔离级别都是此级别（mysql不是）。满足隔离性的简单定义：一个事务开始时，只能看见已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的，也叫做不可重复读，因为两次执行同样的查询，可能会得到不一样的结果。<br>REPEATABLEREAD （可重复读）<br>    解决了脏读的问题。保证了在同一个事务中多次读取同样记录的结果是一致的。但是理论上，可重复读隔离级别还是无法解决另一个幻读的问题。所谓幻读，指的是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行。Innodb和XtraDB通过多版本并发控制解决了幻读的问题。<br>    可重复读是mysql的默认事务隔离级别<br>SERIALIZABLE （可串行化）<br>    最高级别。他通过强制事务串行执行，避免了幻读的问题。简单来说，会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用的问题。只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才用此级别。</p><p>隔离级别                      脏读可能性                  不可重复读可能性                幻读可能性               加锁读<br>READ UNCOMMITED                 yes                         yes                         yes                  no<br>READ COMMITED                   no                          yes                         yes                  no<br>REPEATABLEREAD                  no                          no                          yes                  no<br>SERIALIZABLE                    no                          no                          no                   yes</p><p>什么是死锁？<br>    死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时，也会产生死锁。</p><p>例如：<br>    事务1:<br>        update stock set num = 1 where id = 4;<br>        update stock set num = 2 where id = 3;</p><pre><code>事务2:    update stock set num = 5 where id = 3;    update stock set num = 6 where id = 4;如果凑巧，两个事务都执行了第一条语句，更新了一行数据，同时也锁定了该行数据，接着每个事务都尝试执行第二条语句，却发现该行已经被对方锁定，然后两个事务都等待对方释放锁，同时又都持有对方需要的锁，则陷入死循环。除非有外部因素介入才可能解除死锁。为了解决这种问题，数据库系统实现各种死锁检测和死锁超时机制。越复杂的系统，比如Innodb存储引擎，越能检测到死锁的循环依赖，并立即返回一个错误。这种解决方式很有效，否则会导致出现非常慢的查询。还有一种方式，当查询的时间达到锁等待的超时是死时间后放弃锁请求，这种通常来说不太好InnoDB目前处理死锁的方法是：将持有最少行级排他锁的事务进行回滚（比较简单的死锁回滚算法）死锁产生的双重原因：有些是因为真正的数据冲突，这种情况通常很难避免。有些则完全是由于存储引擎的实现方式导致</code></pre><p>事务日志<br>    事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志采用的是追加的方式，因此写日志的操作是磁盘<br>上一小块区域内的顺序I/O,而不像随机I/O需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志(Write-Ahead Logging),修改数据需要写两次磁盘。<br>    如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。具体的恢复方式则视存储引擎而定。</p><p>mysql提供了两种支持事务型的存储引擎：InnoDB 和 NDB Cluster</p><p>mysql 默认采用自动提交模式：也就是说，如果不是显式的开始一个事务，则每个查询都被当作一个事务执行提交操作。<br>    可以通过设置AUTOCOMMIT变量来启用或者禁用自动提交<br>        show variables like ‘autocommit’; // 查询是否开启<br>        set autocommit=1; // 1或ON表示启用，0或OFF表示禁用 等于0时所有的查询都在一个事务中，直到显示的commit或者rollback，该事务结束，同时又开始另一个新事务。<br>    修改autocommit对非事务型的表比如MyISAM或者内存表，不会有任何影响，对这种表来说，相当于一直处于开启状态<br>    ALTER table、LOCK TABLES 等语句在执行之前会强制执行commit提交当前的活动事务</p><p>mysql可以通过 set transaction isolation level 命令设置隔离级别。新的隔离级别会在下一个事务开始时候生效。<br>        也可以在配置文件中设置整个数据库的隔离级别。<br>        也可以只修改当前会话的隔离级别： set session transaction isolation level READ COMMITED;</p><p>mysql 能够识别所有的四个ANSI隔离级别，InnoDB引擎也支持所有的隔离级别</p><p>在事务中混合使用存储引擎<br>    mysql服务层不管理事务，事务是由下层的存储引擎实现的，所以在一个事务中，使用多种存储引擎是不可靠的</p><pre><code>如果在事务中使用了事务型和非事务型表，在正常提交的情况下不会有什么问题。如果需要事务回滚，非事务型的表上的变更就无法撤销，会导致数据库处于不一致的状态，事务的最终结果将无法确定。在非事务型的表上执行事务相关的操作，mysql通常不会发出提醒，也不会报错。有时候只有回滚的时候会发出警告‘某些非事务型的表上的变更不能回滚’。大多数情况下，对非事务型的表的操作都不会有提示。</code></pre><p>隐式和显示锁定<br>    Innodb采用的是两阶段锁定协议。在事务执行过程中，随时可以执行锁定，锁只有在commit或者rollback的时候才会释放，并且所有的锁是在同一时刻被释放。前面描述的锁定都是隐式锁定，innodb会根据隔离级别在需要的时候自动加锁</p><p>MySQL也支持LOCK TABLES 和UNLOCK TABLES 语句，这是在服务器层实现的，和存储引擎无关。它们有自己的用途，但并不能替代事务处理。如果应用需要用到事务，还是应该选择事务型存储引擎。</p><p>经常会发现应用已经将表从myisam转到innodb，但还是显式地使用lock tables 语句。这不但没有必要，还会严重影响性能，实际上innodb的行级锁工作的更好</p><blockquote><p>LOCK TABLES和事务之间相互影响的话，情况会变得非常复杂，在某些MySQL版本.<br>中甚至会产生无法预料的结果。因此，本书建议，除了事务中禁用了AUTOCOMMIT,<br>可以使用LOCK TABLES 之外，其他任何时候都不要显式地执行LOCK TABLES, 不管<br>使用的是什么存储引擎。</p></blockquote><p>多版本并发控制<br>    MySQL的大多数事务型存储引擎实现的都不是简单的行级锁。基于提升并发性能的考虑，它们一般都同时实现了多版本并发控制(MVCC)。 不仅是MySQL,包括Oracle、PostgreSQL等其他数据库系统也都实现了MVCC,但各自的实现机制不尽相同，因为MVCC没有一个统一的实现标准。</p><pre><code>可以认为MVCC是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。MVCC的实现，是通过保存数据在某个时间点的快照来实现的。也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。如果之前没有这方面的概念，这句话听起来就有点迷惑。熟悉了以后会发现，这句话其实还是很容易理解的。前面说到不同存储引擎的MVCC实现是不同的，典型的有乐观(optimistic) 并发控制和悲观(pessimistic) 并发控制。</code></pre><p>下面我们通过InnoDB的简化版行为来说明MVCC是如何工作的。</p><ol><li><p>innodb的并发控制（MVCC）是如何实现的？<br> 通过在每行记录后面保存连个隐藏的列来生实现。这两个列，一个保存创建的时间，一个保存过期时间（或删除时间）保存的并不是实际的时间值，而是系统版本号。没开启一个新的事务，系统版本号会自动递增。<br>事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。</p></li><li><p>REPEATABLE READ隔离级别下，MVCC的具体操作<br>SELECT<br> InnoDB会根据一下两个条件检查每行记录：</p><pre><code>a：InnoDB只查找版本早于当前事务版本的数据行（也就是，行的系统版本好小于或等于事务的系统版本号），   这样可以保证事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的b：行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除</code></pre><p> 只有符合上述两个条件的记录，才能返回作为查询结果。<br>INSERT<br> InnnoDB为新插入的每一行保存当前系统版本号作为版本号<br>DELETE<br> InnoDB为删除的每一行保存当前系统版本号作为删除标识。<br>UPDATE<br> InnoDB为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识</p><p> 保存这两个额外系统版本号，使大多数读操作都可以不用加锁。这样设计使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行。不足之处是每行记录都<br>需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作。</p><p> MVCC只在REPEATABLE READ 和READ COMMITTED 两个隔离级别下工作。其他两个隔离级别都和MVCC不兼容生4,因为READ UNCOMMITTED 总是读取最新的数据行，而不是符合<br>当前事务版本的数据行。而SERIALIZABLE则会对所有读取的行都加锁。</p></li></ol><p>mysql加载配置文件顺序<br>    mysql –help | grep my.cnf<br>/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf</p><p>查看mysql存放数据文件路径<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like 'datadir'\G;</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">** 1. row **</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span></span><br><span class="line">Variable_name: datadir</span><br><span class="line"><span class="code">        Value: /usr/local/var/mysql/</span></span><br></pre></td></tr></table></figure></p><p>MyISAM引擎的特性：<br>    全文索引，压缩，空间函数（GIS）等，<br>    插入速度快，开销低<br>    查询较快<br>    支持地理空间搜索<br>    对插入速度有很高需求的可以选择myisam或者archive存储引擎（日志型应用）<br>        如果需要对记录的日志做分析报表，会导致插入效率明显降低，该怎么办？</p><pre><code>        1. 利用mysql内置的复制方案将数据复制一份到备库，在被库上执行比较消耗时间和cpu的查询，主库只用于高效的插入工作        2. 在系统负载较低的时候执行报表查询操作，但应用在不断变化，可能以后会导致问题        3. 分表在日志记录标中包含年月，如web_logs_2012_01, 在已经没有插入操作历时表上做频繁的查询操作只读或者大部分情况下只读（读多写少）的表可以选择myisam（前提是不介意myissam崩溃恢复问题）    myisam只将数据写到内存中，然后等待操作系统定期将数据刷出到磁盘上如果要发布一个基于CD-ROM或者DVD-ROM并且使用MySQL数据文件的应用，可以考虑使用MyISAM表或者MyISAM压缩表，这样表之间可以隔离并且可以在不同介质上相互拷贝。MyISAM压缩表比未压缩的表要节约很多空间，但压缩表是只读的。在某些应用中这可能是个大问题。但如果数据放到只读介质的场景下，压缩表的只读特性就不是问题，就没有理由不采用压缩表了。不支持事务和行级锁，崩溃后无法安全恢复崩溃后发生损坏的概率比innodb要高很多，而且恢复速度也要慢。备份：如果可以定期关闭服务器来执行备份，备份的因素可以忽略</code></pre><p>innodb 特性：<br>    支持事务（如果需要支持事务，innodb或者是XtraDB是目前最稳定并且经过验证的选择）<br>    行级锁<br>    支持外键<br>    崩溃恢复速度比myisam快，数据发生损坏的概率比myisam低<br>    备份：如果要求在线热备份，innodb就是基本的要求<br>    空间占用过多<br>    聚簇索引</p><p>不要轻易相信“MyISAM比InnoDB快”之类的经验之谈，这个结论往往不是绝对的。在很多我们已知的场景中，InnoDB的速度都可以让MyISAM望尘莫及，尤其是使用到<br>聚簇索引，或者需要访问的数据都可以放入内存的应用。在本书后续章节，读者可以了解更多影响存储引擎性能的因素( 如数据大小、I/O 请求量、主键还是二级索引等)以<br>及这些因素对应用的影响。</p><p>当设计上述类型的应用时，建议采用InnoDB。MyISAM引擎在一开始可能没有任何问题，但随着应用压力的_上升，则可能迅速恶化。各种锁争用、崩溃后的数据丢失等问题<br>都会随之而来。</p><p>转换表的引擎</p><pre><code>1. ALTER TABLE    ALTER TABLE mytable ENGINE=InnoDB;    可以使用任何存储引擎。但需要执行很长时间。mysql会按行将数据从原表复制到一张新表中，在复制期间可能会消耗系统所有的I/O能力，同时原表会加上锁。    如果转换表的存储引擎，将会失去和原引擎相关的所有特性。例如，将InnoDB转换为MyISAM，然后再转回InnoDB，原InnoDB表上的外键将丢失。2. 导出与导入    使用mysqldump将数据文件导出，修改CREATE TABLE 语句的存储引擎，注意同时修改表名，，因为同一个数据库中不能存在相同的表名，即使它们使用的是不同的存储引擎。    同时要注意mysqldump默认会自动在CREATE TABLE语句前加上DROP TABLE语句，不注意这一点可能会导致数据丟失。3.创建与查询    create table test_innodb like test_myisam;    Alter table test_innodb ENGINE=InnoDB;    insert into test_innodb select * from test_myisam;    数据量不大的话，这样做工作的很好。如果数据量很大，则可以考虑做分批处理，针对每一段数据执行事务提交操作，以避免大事务产生过多的undo。这样操作完成以后，新表是原表的一个全量复制，原表还在，如果需要可以删除原表，如果有必要，可以在执行的过程对原表加锁，以确保新表和原表的数据一致。    percona toolkit 提供了一个pt-online-schema-change的工具（基于facebook的在线schema变更技术），可以比较简单，方便地执行上述过程，避免手工操作可能导致的失误和繁琐。</code></pre><p>性能剖析<br>    问10个人关于性能的问题,可能会得到10个不同的回答,比如“ 每秒查询次数”、“CPU利用率”、“可扩展性”之类。这其实也没有题，每个人在不同场景下对性能有不同的理解，但本章将给性能-一个正式的定义。我们将性能定义为完成某件任务所需要的时间度量，换句话说，性能即响应时间，这是一个非常重要的原则。我们通过任务和时间而不是资源来测量性能。数据库服务器的目的是执行SQL语句，所以它关注的任务是查询或者语句，如SELECT、UPDATE、 DELETE 等。数据库服务器的性能用查询的响应时间来度量，单位是每个查询花费的时间。</p><pre><code>还有另外-一个问题:什么是优化?我们暂时不讨论这个问题，而是假设性能优化就是在一定的工作负载下尽可能地降低响应时间。很多人对此很迷茫。假如你认为性能优化是降低CPU利用率，那么可以减少对资源的使用。但这是一个陷阱，资源是用来消耗并用来工作的，所以有时候消耗更多的资源能够加快查询速度。很多时候将使用老版本InnoDB引擎的MySQL升级到新版本后，CPU利用率会.上升得很厉害，这并不代表性能出现了问题，反而说明新版本的InnoDB对资源的利用率_上升了。查询的响应时间则更能体现升级后的性能是不是变得更好。版本升级有时候会带来一些bug，比如不能利用某些索?从而导致CPU利用率上升。CPU利用率只是-种现象，而不是很好的可度量的目标。同样，如果把性能优化仅仅看成是提升每秒查询量，这其实只是吞吐量优化。吞吐量的提升可以看作性能优化的副产品生3。对查询的优化可以让服务器每秒执行更多的查询，因为每条查询执行的时间更短了(吞吐量的定义，是单位时间内的查询数量，这正好是我们对性能的定义的倒数)。所以如果目标是降低响应时间，那么就需要理解为什么服务器执行查询需要这么多时间，然后去减少或者消除那些对获得查询结果来说不必要的工作。也就是说，先要搞清楚时间花在哪里。这就引申出优化的第二个原则:无法测量就无法有效地优化。所以第一- 步应该测量时间花在什么地方。我们观察到，很多人在优化时,都将精力放在修改--些东西上,却很少去进行精确的测量。我们的做法完全相反，将花费非常多，甚至90%的时间来测量响应时间花在哪里。如果通过测量没有找到答案，那要么是测量的方式错了，要么是测量得不够完整。如果测量了系统中完整而且正确的数据，性能问题一般都能暴露出来，对症下药的解决方案也就比较明了。测量是一项很有挑战性的工作，并且分析结果也同样有挑战性，测出时间花在哪里，和知道为什么花在那里，是两码事。前面提到需要合适的测量范围，这是什么意思呢?合适的测量范围是说只测量需要优化的活动。有两种比较常见的情况会导致不合适的测量:    在错误的时间启动和停止测量。    测量的是聚合后的信息，而不是目标活动本身。完成一项任务所需要的时间可以分成两部分:执行时间和等待时间。如果要优化任务的执行时间，最好的办法是通过测量定位不同的子任务花费的时间，然后优化去掉--些子任务、降低子任务的执行频率或者提升子任务的效率。而优化任务的等待时间则相对要复杂一些，因为等待有可能是由其他系统间接影响导致，任务之间也可能由于争用磁盘或者CPU资源而相互影响。根据时间是花在执行还是等待上的不同，诊断也需要不同的工具和技术。通过性能剖析进行优化一旦掌握并实践面向响应时间的优化方法，就会发现需要不断地对系统进行性能剖析(profiling)。性能剖析是测量和分析时间花费在哪里的主要方法。性能剖析一般有两个步骤:测量任务所花费的时间;然后对结果进行统计和排序，将重要的任务排到前面。性能剖析工具的工作方式基本相同。在任务开始时启动计时器，在任务结束时停止计时器，然后用结束时间减去启动时间得到响应时间。也有些工具会记录任务的父任务。这些结果数据可以用来绘制调用关系图，但对于我们的目标来说更重要的是，可以将相似的任务分组并进行汇总。对相似的任务分组并进行汇总可以帮助对那些分到一组的任务做更复杂的统计分析，但至少需要知道每一组有多少任务，并计算出总的响应时间。通过性能剖析报告(profilereport)可以获得需要的结果。性能剖析报告会列出所有任务列表。每行记录-一个任务，包括任务名、任务的执行时间、任务的消耗时间、任务的平均执行时间，以及该任务执行时间占全部时间的百分比。性能剖析报告会按照任务的消耗时间进行降序排序。pt-query-digest（实际上就是著名的Maatkit工具中的mk-query-digest）NewRelic会插人到应用程序中进行性能剖析，将收集到的数据发送到-一个基于Web的仪表盘，使用仪表盘可以更容易利用面向响应时间的方法分析应用性能。这样用户只需要考虑做那些正确的事情，而不用考虑如何去做。而且NewRelic测量了很多用户体验相关的点，涵盖从Web浏览器到应用代码,再到数据库及其他外部调用。像New Relic这类工具的好处是可以全天候地测量生产环境的代码--既不限于测试环境,也不限于某个时间段。这--点非常重要,因为有很多剖析工具或者测量点的代价很高,所以不能在生产环境全天候运行。在生产环境运行，可以发现- -些在测试环境和预发环境无法发现的性能问题。如果工具在生产环境全天候运行的成本太高，那么至少也要在集群中找--台服务器运行，或者只针对部分代码运行，原因请参考前面的“性能剖析本身会导致服务器变慢吗?”。</code></pre><p>捕获mysql的查询到日志文件中<br>    在MySQL中，慢查询日志最初只是捕获比较“慢”的查询，而性能剖析却需要针对所有的查询。<br>    MySQL 5.0及之前，慢查询日志的响应时间的单位是秒，粒度太粗了<br>    MySQL 5.1及更新的版本中，慢日志的功能已经被加强，可以通过设置long_ query_ time 为0来捕获所有的查询，而且查询的响应时间单位已经可以做到微秒级。<br>    慢查询日志是开销最低、精度最高的测量查询时间的工具。<br>    在I/O密集型场景做过基准测试，慢查询日志带来的开销可以忽略不计(实际上在CPU密集型场景的影响还稍微大–些)。<br>    需要担心的是日志可能消耗大量的磁盘空间。如果长期开启慢查询日志，注意要部署日志轮转(log rotation)工具。或者不要长期启用慢查询日志，只在需要收集负载样本的期间开启即可。</p><pre><code>MySQL还有另外-种查询日志，被称之为“通用日志”，通用日志在查询请求到服务器时进行记录，所以不包含响应时间和执行计划等重要信息。</code></pre><p>剖析单条查询<br>    使用 SHOW PROFILE(&gt;5.1) 默认禁用  set profiling=1 开启<br>    当一条查询提交给服务器时，此工具会记录剖析信息到一张临时表，并且给查询赋予一个从1开始的整数标识符。<br>    例子：<br>        1.查询语句 ： select <em> from  sku where name like ‘knewb1E07%’<br>        2.显式查询语句编号： show profiles;<br>            QUERY_ID Duration  Query<br>            1    0.00008600    set <code>PROFILING</code>=1<br>            2    0.00838500    SELECT </em> FROM <code>sku</code> ORDER BY <code>id</code> LIMIT 0,1000<br>            3    0.01744000    SELECT <em> FROM <code>sku</code> ORDER BY <code>id</code> DESC LIMIT 0,1000<br>            4    0.00427500    SHOW COLUMNS FROM <code>sku</code><br>            5    0.00394600    select </em> from  sku where name like ‘knewb1E07%’</p><pre><code>3. 查看第五条语句查询执行的每个步骤花费的时间 ：show profile for query 54. 格式化分析结果： mysql&gt; SELECT STATE, SUM(DURATION) AS Total_R,    -&gt;     ROUND(    -&gt;         100 * SUM(DURATION) /    -&gt;            (SELECT SUM(DURATION)    -&gt;              FROM INFORMATION_SCHEMA.PROFILING    -&gt;              WHERE QUERY_ID = 5    -&gt;         ), 2) AS Pct_R,     -&gt;      COUNT(*) AS Calls,    -&gt;      SUM(DURATION) /COUNT(*) AS &quot;R/Call&quot;     -&gt;  FROM NFORMATION_SCHEMA.PROFILING    -&gt;  WHERE QURY_ID = 5     -&gt;  GROUP BY STATE    -&gt;  ORDER BY Total_R DESC;STATE                    Total_R       Pct_R  Calls     R/Callstatistics                0.003509    88.93    1    0.0035090000freeing items            0.000131    3.32    1    0.0001310000Sending data            0.000093    2.36    1    0.0000930000starting                0.000077    1.95    1    0.0000770000init                    0.000043    1.09    1    0.0000430000preparing                0.000021    0.53    1    0.0000210000cleaning up                0.000014    0.35    1    0.0000140000Opening tables            0.000013    0.33    1    0.0000130000System lock                0.000010    0.25    1    0.0000100000closing tables            0.000009    0.23    1    0.0000090000optimizing                0.000008    0.20    1    0.0000080000end                        0.000006    0.15    1    0.0000060000checking permissions    0.000005    0.13    1    0.0000050000query end                0.000004    0.10    1    0.0000040000executing                0.000003    0.08    1    0.0000030000</code></pre><p>慢查询日志中详细记录的条目包含SHOW PROFILE和SHOWSTATUS所有的输出，还有更多的信息</p><p>索引的类型<br>        在mysql中索引是在存储引擎层而不是服务器层实现的。所以没有统一的索引标准；不同存储引擎的索引工作方式也不一样，<br>    也不是所有的存储引擎都支持所有类型的索引。即使多个存储引擎都支持同一种索引，其底层的实现也可能不同</p><pre><code>B-Tree索引    MyISAM使用前缀压缩技术使得索引更小（MyISAM索引通过数据的物理位置引用被索引的行），InnooDB则按照元数据格式进行存储（InnoDB根据主键引用被索引的行）。    所有的值都是按顺序存储的，每一个叶子页到根的距离相同    索引 对多个值进行排序的依据是create Table 语句中定义索引是列的顺序    适用于全键值，键值范围或键前缀查找，其中键前缀查找只适用于根据最左前缀的查找</code></pre><p>主键索引：主键索引的叶子节点存的是整行数据。<br>    在InnoDB中，主键索引也被成为聚簇索引<br>非主键索引：非主键索引的叶子节点内存是主键的值。<br>    在InnoDB中，非主键索引也被成为二级索引</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是事务？&lt;br&gt;事务就是一组原子行为的sql查询，或者说一个独立的工作单元。如果数据库引擎能成功的多数据库应用该组查询的全部语句，那么就执行该组查询。如果其中有任何一条语句因为崩溃或其他原因无法执行，那么所有的语句都不会执行。&lt;br&gt;也就是说，事务内的语句，要么全部执行
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yulongphp.github.io/2019/06/25/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yulongphp.github.io/2019/06/25/算法与数据结构/</id>
    <published>2019-06-25T06:58:41.764Z</published>
    <updated>2019-06-29T08:40:19.718Z</updated>
    
    <content type="html"><![CDATA[<p>时间复杂度<br>O(1)       常数复杂度<br>O(log n)   对数复杂度<br>O(n)       线性时间复杂度<br>O(n^2)     平方<br>O(n^3)     立方<br>O(2^n)     指数<br>O(n!)      阶乘</p><p>注意：只看最高复杂度<br>O(1)</p><p>$a = 1000;<br>echo $a;</p><p>$a = 1000;<br>echo $a;<br>echo $a,”hahahha”;<br>echo $a,”hahahah”,$a;</p><p>0(n)<br>for($i = 1; $i &lt;= $n; $i++){<br>    echo $i,”\n”;<br>}</p><p>O(n^2)<br>for($i = 1; $i &lt;= $n; $i++){<br>    for($j = 1; $j &lt;= $n; $j++){<br>        echo $i,”\n”, $j;<br>    }<br>}</p><p>0(log(n))<br>for($i = 1; $i &lt;= $n; $i*=2){<br>    echo $i,”\n”;<br>}</p><p>0(k^n)<br>for($i = 1; $i &lt;= pow(2, $n); $i++){<br>    echo $i,”\n”;<br>}</p><p>0(n!)<br>for($i = 1; $i &lt;= $n!; $i++){<br>    echo $i,”\n”;<br>}</p><p>example: 1 + 2 + 3 + … + n<br>硬循环：<br>$susm = 0;<br>for($i =1; $i &lt;= $n; $i++){<br>    $sum += $i;<br>}</p><p>优化：n(n+1)/2<br>$sum = $n($n+1)/2</p><p>什么是递归？<br>fibonacci array: 1,1,2,3,5,8,13,21,24<br>F(n) = F(n-1) + F(n-2)</p><p>def fib(n):<br>    if n == 0 or n == 1:<br>        return n;<br>    return fib(n-1) + fib(n-2)</p><p>主定律</p><p>Deliberate Practicing<br>坚持、刻意练习<br>练习缺陷、弱点地方<br>不舒服、不爽、枯燥</p><p>数组 链表（array list）<br>连续内存 劣势 insert  update  best o(1) bad o(n) avg o(n/2)-&gt;o(n)</p><p>数组：<br>access： o(1)<br>insert:  avg o(n)<br>update:  avg o(n)</p><p>linked list:<br>access： o(n)<br>insert:  o(1)<br>update:  o(1)</p><p>double linked list:<br>access： o(n)<br>insert:  o(1)<br>update:  o(1)</p><p>practice:<br><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-linked-list/</a><br><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-nodes-in-pairs/</a><br><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a><br><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle-ii/</a><br><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间复杂度&lt;br&gt;O(1)       常数复杂度&lt;br&gt;O(log n)   对数复杂度&lt;br&gt;O(n)       线性时间复杂度&lt;br&gt;O(n^2)     平方&lt;br&gt;O(n^3)     立方&lt;br&gt;O(2^n)     指数&lt;br&gt;O(n!)      阶乘&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sed常用命令</title>
    <link href="http://yulongphp.github.io/2019/06/25/sed/"/>
    <id>http://yulongphp.github.io/2019/06/25/sed/</id>
    <published>2019-06-25T03:17:10.000Z</published>
    <updated>2019-06-29T08:40:13.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法一"><a href="#语法一" class="headerlink" title="语法一"></a>语法一</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [<span class="keyword">options</span>] &#123;sed-commands&#125; &#123;<span class="built_in">input</span>-<span class="keyword">file</span>&#125;</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -n表示取消默认输出,p表示打印行</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'p'</span> passwd</span></span><br><span class="line"><span class="meta"># 只打印第三行</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'3p'</span> passwd</span></span><br><span class="line"><span class="meta"># 打印1，3行</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'1,3p'</span> passwd</span></span><br></pre></td></tr></table></figure></p><h3 id="语法二"><a href="#语法二" class="headerlink" title="语法二"></a>语法二</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sed</span> [options] -f &#123;sed-commands-<span class="keyword">in</span>-a-<span class="keyword">file</span>&#125; &#123;<span class="keyword">input</span>-<span class="keyword">file</span>&#125;</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印以root开头或者nobody开头的行</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># cat sed_exp1.sed</span></span><br><span class="line">/^root/ p</span><br><span class="line">/^nobody/ p</span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># sed -n -f sed_exp1.sed passwd</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">99</span><span class="symbol">:</span><span class="number">99</span><span class="symbol">:Nobody</span><span class="symbol">:/</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h3 id="语法三"><a href="#语法三" class="headerlink" title="语法三"></a>语法三</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [<span class="keyword">options</span>] -<span class="keyword">e</span> &#123;sed-<span class="keyword">command</span>-<span class="number">1</span>&#125; -<span class="keyword">e</span> &#123;sed-<span class="keyword">command</span>-<span class="number">2</span>&#125; &#123;<span class="built_in">input</span>-<span class="keyword">file</span>&#125;</span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印以root开头或者nobody开头的行</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># sed -n -e '/^root/ p' -e '/^nobody/ p' passwd</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">99</span><span class="symbol">:</span><span class="number">99</span><span class="symbol">:Nobody</span><span class="symbol">:/</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># sed -n \</span></span><br><span class="line">&gt; -e <span class="string">'/^root/ p'</span> \</span><br><span class="line">&gt; -e <span class="string">'/^nobody/ p'</span> \</span><br><span class="line">&gt; passwd</span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">99</span><span class="symbol">:</span><span class="number">99</span><span class="symbol">:Nobody</span><span class="symbol">:/</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><h3 id="语法四"><a href="#语法四" class="headerlink" title="语法四"></a>语法四</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed [options] <span class="string">'&#123;</span></span><br><span class="line"><span class="string">sed-command-1</span></span><br><span class="line"><span class="string">sed-command-2</span></span><br><span class="line"><span class="string">&#125;'</span> input-<span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打印以root开头或者nobody结尾的行</span></span><br><span class="line">[root@yyl ~]# sed -n '&#123;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> /^root/ p</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> /nobody$/ p</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &#125;<span class="string">' passwd</span></span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure></p><h3 id="行后增加语法"><a href="#行后增加语法" class="headerlink" title="行后增加语法"></a>行后增加语法</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '[address] a the-<span class="keyword">line</span>-to-<span class="keyword">append</span>' <span class="keyword">input</span>-<span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed '<span class="number">2</span> a <span class="number">108</span>,Donald Stufft, Nebula' example2.txt</span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">108</span>,Donald Stufft, Nebula</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></p><h3 id="行前插入语法"><a href="#行前插入语法" class="headerlink" title="行前插入语法"></a>行前插入语法</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '[address] i the-<span class="keyword">line</span>-to-insert' <span class="keyword">input</span>-<span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>例子：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed '<span class="number">2</span> i <span class="number">108</span>,Donald Stufft, Nebula' example2.txt</span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">108</span>,Donald Stufft, Nebula</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></p><h3 id="修改行语法"><a href="#修改行语法" class="headerlink" title="修改行语法"></a>修改行语法</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '[address] c the-<span class="keyword">line</span>-to-insert' <span class="keyword">input</span>-<span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>例子：修改符合Paul行为…<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed '/Paul/ c <span class="number">108</span>,Donald Stufft, Nebula' example2.txt</span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">108</span>,Donald Stufft, Nebula</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li><p><code>l</code> 会显示隐藏字符比如 <code>&#39;\\t制表符&#39;</code> <code>$</code> <code>\\r</code></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#    显示第一行的隐藏字符</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'1l'</span> example2.txt</span></span><br><span class="line">\t101,Ian Bicking,Mozilla$</span><br></pre></td></tr></table></figure></li><li><p><code>l5</code> 会在5个字符数之后进行换行。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed -n 'l5' example2.txt</span></span><br><span class="line"><span class="string">\t10\</span></span><br><span class="line"><span class="number">1</span>,Ia<span class="string">\</span></span><br><span class="line">n Bi<span class="string">\</span></span><br><span class="line">ckin<span class="string">\</span></span><br><span class="line">g,Mo<span class="string">\</span></span><br><span class="line">zill<span class="string">\</span></span><br></pre></td></tr></table></figure></li><li><p><code>=</code> 会先打印每行行号</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed '=' example2.txt</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br></pre></td></tr></table></figure></li><li><p>y或翻译你要转换的字符,这里I会转化成i，B转换成b</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'y/IB/ib/'</span> example2.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,ian bicking,Mozilla</span><br></pre></td></tr></table></figure></li></ol><h3 id="sed-流"><a href="#sed-流" class="headerlink" title="sed 流"></a>sed 流</h3><ol><li>读</li><li>执行</li><li>打印</li><li>重复</li></ol><p>测试文件 <code>example.txt</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># cat example2.txt</span></span><br><span class="line"><span class="number">101</span>,good good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br><span class="line"><span class="number">102</span>,Come <span class="keyword">on</span>, chop-chop, we are <span class="built_in">running</span> late</span><br><span class="line"><span class="number">103</span>,He always blah blah <span class="keyword">and</span> I've heard <span class="keyword">it</span> all <span class="keyword">before</span></span><br><span class="line"><span class="number">104</span>,He <span class="keyword">is</span> a bit <span class="keyword">of</span> a goody-goody</span><br><span class="line"><span class="number">105</span>,I think you might pooh-pooh this idea</span><br><span class="line"><span class="number">106</span>,Let's divide <span class="keyword">the</span> prize fifty-fifty</span><br><span class="line"><span class="number">107</span>,In <span class="keyword">the</span> <span class="keyword">end</span> he was forced <span class="keyword">to</span> resign <span class="keyword">but</span> <span class="keyword">it</span> was all very hush-hush</span><br></pre></td></tr></table></figure></p><p>测试文件 <code>example2.txt</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></p><h3 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h3><p>语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed '[address-<span class="built_in">range</span>|pattern-<span class="built_in">range</span>] s/original-<span class="built_in">string</span>/replacement-<span class="built_in">string</span>/[substitute-flags]' inputfile</span><br></pre></td></tr></table></figure></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol><li><p>替换Google为Github(默认只会替换每一行的第一个 替换全部使用 ‘s/good/bad/g’)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed 's/good/bad/' example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,bad good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br></pre></td></tr></table></figure></li><li><p>替换匹配Come的行里面的chop为chops</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '/Come/s/chop/chops/' example.txt</span></span><br><span class="line"><span class="number">101</span>,good good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br><span class="line"><span class="number">102</span>,Come <span class="keyword">on</span>, chops-chop, we are <span class="built_in">running</span> late</span><br><span class="line"><span class="number">103</span>,He always blah blah <span class="keyword">and</span> I've heard <span class="keyword">it</span> all <span class="keyword">before</span></span><br><span class="line"><span class="number">104</span>,He <span class="keyword">is</span> a bit <span class="keyword">of</span> a goody-goody</span><br><span class="line"><span class="number">105</span>,I think you might pooh-pooh this idea</span><br><span class="line"><span class="number">106</span>,Let's divide <span class="keyword">the</span> prize fifty-fifty</span><br><span class="line"><span class="number">107</span>,In <span class="keyword">the</span> <span class="keyword">end</span> he was forced <span class="keyword">to</span> resign <span class="keyword">but</span> <span class="keyword">it</span> was all very hush-hush</span><br></pre></td></tr></table></figure></li><li><p>默认只会替换每行的第一个 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '1s/g/G/' example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,Good good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br></pre></td></tr></table></figure></li><li><p>g可以替换每行的全部符合</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '1s/g/G/g' example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,Good Good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br></pre></td></tr></table></figure></li><li><p>可以直接指定想要替换的第N个匹配项,这里是第二个</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed '<span class="number">1</span>s/g/G/<span class="number">2</span>' example.txt | head <span class="number">-1</span></span><br><span class="line"><span class="number">101</span>,good Good study, day day up</span><br></pre></td></tr></table></figure></li><li><p>使用w将能够替换的行重定向写到output.txt</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '1s/g/G/g w output.txt' example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,Good Good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br><span class="line">[root@yyl ~]<span class="comment"># cat output.txt</span></span><br><span class="line"><span class="number">101</span>,Good Good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br></pre></td></tr></table></figure></li><li><p>还可以使用i忽略匹配的大小写,有的版本可能不能用</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '1s/Good/GOOD/i' example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,GOOD good study, <span class="built_in">day</span> <span class="built_in">day</span> up</span><br></pre></td></tr></table></figure></li><li><p>给每行前和后都添加点字符  echo “(当前行)”;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed 's/\(.*\)/echo \"\1\";/' example.txt</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"101,good good study, day day up"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"102,Come on, chop-chop, we are running late"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"103,He always blah blah and I've heard it all before"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"104,He is a bit of a goody-goody"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"105,I think you might pooh-pooh this idea"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"106,Let's divide the prize fifty-fifty"</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"107,In the end he was forced to resign but it was all very hush-hush"</span>;</span><br></pre></td></tr></table></figure></li><li><p>执行命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># cat commond.txt</span></span><br><span class="line"><span class="string">/etc/passwd</span></span><br><span class="line"><span class="string">/etc/group</span></span><br><span class="line">[root@yyl ~]<span class="comment"># sed 's/^/ls -l /e' commond.txt</span></span><br><span class="line">-rw-r<span class="params">--r--</span>. 1 root root 879 5月  25 12<span class="function">:39</span> <span class="string">/etc/passwd</span></span><br><span class="line">-rw-r<span class="params">--r--</span>. 1 root root 476 6月  12 23<span class="function">:10</span> <span class="string">/etc/group</span></span><br></pre></td></tr></table></figure></li><li><p>sed分隔符不只可以使用’/‘ 这里使用’#’</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># cat passwd | head -1</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># cat passwd | head -1 | sed 's#/bin/bash#/sbin/bash#'</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/sbin/bash</span></span><br></pre></td></tr></table></figure></li><li><p>替换覆盖</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed '&#123;</span></span><br><span class="line">&gt; <span class="regexp">s/good/GOOD/</span></span><br><span class="line">&gt; <span class="regexp">s/GO/go/</span></span><br><span class="line">&gt; &#125;<span class="string">' example.txt | head -1</span></span><br><span class="line"><span class="string">101,goOD good study, day day up</span></span><br></pre></td></tr></table></figure></li><li><p>神奇的 &amp; 符号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@yyl ~</span>]# sed 's/^[<span class="string">0-9</span>][<span class="symbol">0-9</span>][<span class="string">0-9</span>]/[&amp;]/g' example.txt</span><br><span class="line">[101],good good study, day day up</span><br><span class="line">[102],Come on, chop-chop, we are running late</span><br><span class="line">[103],He always blah blah and I've heard it all before</span><br><span class="line">[104],He is a bit of a goody-goody</span><br><span class="line">[105],I think you might pooh-pooh this idea</span><br><span class="line">[106],Let's divide the prize fifty-fifty</span><br><span class="line">[107],In the end he was forced to resign but it was all very hush-hush</span><br><span class="line">[root@yyl ~]# sed 's/good/&amp;test/' example.txt | head -1</span><br><span class="line">101,goodtest good study, day day up</span><br></pre></td></tr></table></figure></li><li><p>元字符\u \l \U \L ：转换为大写/小写字符<br>\U 将所有自负转换成大写<br>\u 将首字符转成大写<br>\L 将所有字符转成小写<br>\l 将首字符转成小写</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/good/\U&amp;/'</span> example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,GOOD good study, day day up</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/good/\U&amp;/g'</span> example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,GOOD GOOD study, day day up</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/good/\u&amp;/g'</span> example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,Good Good study, day day up</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/^.*$/\U&amp;/'</span> example.txt | head -1</span></span><br><span class="line"><span class="number">101</span>,GOOD GOOD STUDY, DAY DAY UP</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/good/\U&amp;/g'</span> example.txt | head -1 | sed <span class="string">'s/GOOD/\L&amp;/'</span></span></span><br><span class="line"><span class="number">101</span>,good GOOD study, day day up</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/good/\U&amp;/g'</span> example.txt | head -1 | sed <span class="string">'s/GOOD/\l&amp;/'</span></span></span><br><span class="line"><span class="number">101</span>,gOOD GOOD study, day day up</span><br></pre></td></tr></table></figure></li><li><p>\E能打断\L或者\U改变大小写</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/Ian/\Uian/'</span> example2.txt|head -1</span></span><br><span class="line"><span class="number">101</span>,IAN Bicking,Mozilla</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed <span class="string">'s/Ian/\Uia\En/'</span> example2.txt|head -1</span></span><br><span class="line"><span class="number">101</span>,IAn Bicking,Mozilla</span><br></pre></td></tr></table></figure></li><li><p>使用()获取正则匹配的内容，使用\1 获取第一个括号的内容，使用\2获取第二个括号里面的内容<br>例如：获取passwd文件的用户名</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed 's/<span class="symbol">\(</span>^[a-z-]<span class="symbol">\+</span><span class="symbol">\)</span>:.*/<span class="symbol">\1</span>/' passwd | head -1</span><br><span class="line">root</span><br></pre></td></tr></table></figure></li><li><p>使用（）替换部分字符串</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# echo "w1w2w3"|sed 's/<span class="symbol">\(</span>w1<span class="symbol">\)</span><span class="symbol">\(</span>w2w3<span class="symbol">\)</span>/<span class="symbol">\2</span><span class="symbol">\1</span>/'</span><br><span class="line">w2w3w1</span><br></pre></td></tr></table></figure></li><li><p>^ 表示匹配以什么开头</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/^101/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br></pre></td></tr></table></figure></li><li><p>$表示匹配以什么结尾</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/Github$/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br></pre></td></tr></table></figure></li><li><p>.表示单个字符,下面的匹配一个逗号然后I然后2个单字符</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/,I../ p'</span> example2.txt</span></span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br></pre></td></tr></table></figure></li><li><p>*表示匹配0个或者多个, \+表示匹配一个或者多个, \?表示匹配0个或者1个<br>[0-9]表示匹配数字,下面匹配包含3或者4的行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/att*/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/t\+/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/Ho\?e/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/[34]/ p'</span> example2.txt</span></span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br></pre></td></tr></table></figure></li><li><ul><li>表示范围,这里匹配3,4,5<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed -n '/[<span class="number">3</span><span class="number">-5</span>]/ p' example2.txt</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br></pre></td></tr></table></figure></li></ul></li><li><p>| 表示或者的关系</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed -n '/<span class="number">3</span>\|<span class="number">5</span>/ p' example2.txt</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br></pre></td></tr></table></figure></li><li><p>{m} 表示前面的匹配的重复次数</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# cat numbers.txt</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="number">123456</span></span><br><span class="line">[root@yyl ~]# sed -n '/^[<span class="number">0</span><span class="number">-9</span>]\&#123;<span class="number">3</span>\&#125;$/ p' numbers.txt</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure></li><li><p>{m,n } 表示匹配m-n的次数都算</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed -n '/^[<span class="number">0</span><span class="number">-9</span>]\&#123;<span class="number">3</span>,<span class="number">4</span>\&#125;$/ p' numbers.txt</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure></li><li><p>删除所有注释和空行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -e <span class="string">'s/#.*//'</span> -e <span class="string">'/^$/ d'</span> /etc/profile</span></span><br></pre></td></tr></table></figure></li><li><p>转化windows文件到unix格式(这个没看懂)</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="symbol">'s</span>/.$<span class="comment">//' filename</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="sed-可执行脚本"><a href="#sed-可执行脚本" class="headerlink" title="sed 可执行脚本"></a>sed 可执行脚本</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># cat testscript.sed</span></span><br><span class="line"><span class="comment">#!/usr/bin/sed -nf</span></span><br><span class="line">/root/ p</span><br><span class="line">/nobody/ p</span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># chmod u+x testscript.sed</span></span><br><span class="line">[root<span class="variable">@yyl</span> ~]<span class="comment"># ./testscript.sed passwd</span></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">operator:</span><span class="symbol">x:</span><span class="number">11</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:operator</span><span class="symbol">:/root</span><span class="symbol">:/sbin/nologin</span></span><br><span class="line"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">99</span><span class="symbol">:</span><span class="number">99</span><span class="symbol">:Nobody</span><span class="symbol">:/</span><span class="symbol">:/sbin/nologin</span></span><br></pre></td></tr></table></figure><h3 id="sed-修改源文件和备份"><a href="#sed-修改源文件和备份" class="headerlink" title="sed 修改源文件和备份"></a>sed 修改源文件和备份</h3><ol><li><p><code>-i</code> 会修改源文件,但是可以同时使用bak备份</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed -ibak 's/Ian/IAN/' example2.txt</span></span><br><span class="line">[root@yyl ~]<span class="comment"># ls -l | grep example2.txt</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 173 </span>6月 <span class="number"> 13 </span>15:12 example2.txt</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 173 </span>6月 <span class="number"> 13 </span>10:37 example2.txtbak</span><br><span class="line">[root@yyl ~]<span class="comment"># cat example2.txt</span></span><br><span class="line">101,IAN Bicking,Mozilla</span><br><span class="line">102,Hakim El Hattab,Whim</span><br><span class="line">103,Paul Irish,Google</span><br><span class="line">104,Addy Osmani,Google</span><br><span class="line">105,Chris Wanstrath,Github</span><br><span class="line">106,Mattt Thompson,Heroku</span><br><span class="line">107,Ask Solem Hoel,VMware</span><br><span class="line">[root@yyl ~]<span class="comment"># cat example2.txtbak</span></span><br><span class="line">101,Ian Bicking,Mozilla</span><br><span class="line">102,Hakim El Hattab,Whim</span><br><span class="line">103,Paul Irish,Google</span><br><span class="line">104,Addy Osmani,Google</span><br><span class="line">105,Chris Wanstrath,Github</span><br><span class="line">106,Mattt Thompson,Heroku</span><br><span class="line">107,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>1还可以使用这种语法  <code>--in-place=后缀</code></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed --in-place=_bak 's/IAN/Ian/' example2.txt</span></span><br><span class="line">[root@yyl ~]<span class="comment"># ls -l | grep example2.txt</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 173 </span>6月 <span class="number"> 13 </span>15:16 example2.txt</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 173 </span>6月 <span class="number"> 13 </span>10:37 example2.txtbak</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 173 </span>6月 <span class="number"> 13 </span>15:12 example2.txt_bak</span><br></pre></td></tr></table></figure></li></ol><p>### </p><h3 id="sed命令—行定位"><a href="#sed命令—行定位" class="headerlink" title="sed命令—行定位"></a>sed命令—行定位</h3><ol><li><p>打印出文件的第三行 (定位单行)</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># nl example2.txt | sed -n <span class="string">'3p'</span></span></span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br></pre></td></tr></table></figure></li><li><p>打印出文件的第2到第3行 （多行定位）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '<span class="number">2</span>,<span class="number">3</span>p'</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br></pre></td></tr></table></figure></li><li><p>打印出包含Paul的行 （单行定位）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># nl example2.txt | sed -n <span class="string">'/Paul/p'</span></span></span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br></pre></td></tr></table></figure></li><li><p>打印出包含Paul开始的行到包含Chris结束的行 （多行定位）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '/Paul/,/Chris/p'</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br></pre></td></tr></table></figure></li><li><p>从Paul开始的行到Chris结束的行，都不要</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '/Paul/,/Chris/!p'</span><br><span class="line">     <span class="number">1</span><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>打印出文件非第5行的内容 (单行取反)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '<span class="number">5</span>!p'</span><br><span class="line">     <span class="number">1</span><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>打印出文件的非第2到五行内容 （多行取反）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '<span class="number">2</span>,<span class="number">5</span>!p'</span><br><span class="line">     <span class="number">1</span><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>步进获取行的内容（从第2行开始 步长为3）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '<span class="number">2</span>~<span class="number">3</span>p'</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">结果为<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">11.</span>.....行</span><br></pre></td></tr></table></figure></li><li><p>从找到开始打印到第五行(Paul 在第3行)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '/Paul/,<span class="number">5</span>p'</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br></pre></td></tr></table></figure></li><li><p>从找到的地方开始 在多输出3行</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed -n '/Paul/,+<span class="number">3</span>p'</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><ol><li><p>删除所有行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># nl example2.txt | sed <span class="string">'d'</span></span></span><br></pre></td></tr></table></figure></li><li><p>只删除第二行</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed '<span class="number">2</span>d'</span><br><span class="line">     <span class="number">1</span><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line">     <span class="number">3</span><span class="number">103</span>,Paul Irish,Google</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>删除第1到4行</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed '<span class="number">1</span>,<span class="number">4</span>d'</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>按步长删除（删除奇数行）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed '<span class="number">1</span>~<span class="number">2</span>d'</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br></pre></td></tr></table></figure></li><li><p>删除匹配的行(同样支持 ‘/Paul/,4d’ |  ‘/Paul/,+3d’ | ‘/Paul/,/Chris/d’ | ‘/Paul/,/Chris/!d’)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# nl example2.txt | sed '/Paul/d'</span><br><span class="line">     <span class="number">1</span><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line">     <span class="number">2</span><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line">     <span class="number">4</span><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line">     <span class="number">5</span><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">     <span class="number">6</span><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line">     <span class="number">7</span><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li><li><p>删除空行  注释行(这块没有用nl命令  nl命令会影响 sed执行效果)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# cat example2.txt</span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">#<span class="number">1234567777</span></span><br><span class="line"></span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br><span class="line"></span><br><span class="line">[root@yyl ~]# sed '/^#/d' example2.txt <span class="comment">// 删除注释行</span></span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line"></span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br><span class="line"></span><br><span class="line">[root@yyl ~]# sed '/^$/d' example2.txt  <span class="comment">// 删除空行</span></span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br><span class="line"><span class="number">105</span>,Chris Wanstrath,Github</span><br><span class="line">#<span class="number">1234567777</span></span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure></li></ol><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><ol><li><p>将example.txt内容重定向写到output.txt</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># ls -l | grep txt</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:55 example.txt</span><br><span class="line">[root@yyl ~]<span class="comment"># sed 'w output.txt' example2.txt</span></span><br><span class="line">101,Ian Bicking,Mozilla</span><br><span class="line">102,Hakim El Hattab,Whim</span><br><span class="line">103,Paul Irish,Google</span><br><span class="line">104,Addy Osmani,Google</span><br><span class="line">105,Chris Wanstrath,Github</span><br><span class="line"><span class="comment">#1234567777</span></span><br><span class="line"></span><br><span class="line">106,Mattt Thompson,Heroku</span><br><span class="line">107,Ask Solem Hoel,VMware</span><br><span class="line">[root@yyl ~]<span class="comment"># ls -l | grep txt</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:55 example2.txt</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:55 output.txt</span><br></pre></td></tr></table></figure></li><li><p>将example.txt内容重定向写到output1.txt(不会在终端输出)</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]<span class="comment"># sed -n 'w output1.txt' example2.txt</span></span><br><span class="line">[root@yyl ~]<span class="comment"># ls -l | grep txt</span></span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:55 example2.txt</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:56 output1.txt</span><br><span class="line">-rw-r--r--. <span class="number"> 1 </span>root root       <span class="number"> 186 </span>6月 <span class="number"> 13 </span>09:55 output.txt</span><br></pre></td></tr></table></figure></li><li><p>只写第二行</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'2w output.txt'</span> example2.txt</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># cat output.txt</span></span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br></pre></td></tr></table></figure></li><li><p>将第一到四行写到output.txt</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl ~]# sed -n '<span class="number">1</span>,<span class="number">4</span>w output.txt' example2.txt</span><br><span class="line">[root@yyl ~]# cat output.txt</span><br><span class="line"><span class="number">101</span>,Ian Bicking,Mozilla</span><br><span class="line"><span class="number">102</span>,Hakim El Hattab,Whim</span><br><span class="line"><span class="number">103</span>,Paul Irish,Google</span><br><span class="line"><span class="number">104</span>,Addy Osmani,Google</span><br></pre></td></tr></table></figure></li><li><p>将匹配Mat的行到结尾行写到output.txt(正则匹配区分大小写)<br> 同样支持 </p><pre><code>&apos;1,4w output.txt&apos;&apos;/Paul/,5w output.txt&apos;&apos;/Paul/,+1w output.txt&apos; &apos;/Paul/,/Chris/w output.txt&apos;&apos;/Paul/,/Chris/!w output.txt&apos;</code></pre></li></ol><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/mat/,$w output.txt'</span> example2.txt</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># cat output.txt</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># sed -n <span class="string">'/Mat/,$w output.txt'</span> example2.txt</span></span><br><span class="line">[root<span class="symbol">@yyl</span> ~]<span class="meta"># cat output.txt</span></span><br><span class="line"><span class="number">106</span>,Mattt Thompson,Heroku</span><br><span class="line"><span class="number">107</span>,Ask Solem Hoel,VMware</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;语法一&quot;&gt;&lt;a href=&quot;#语法一&quot; class=&quot;headerlink&quot; title=&quot;语法一&quot;&gt;&lt;/a&gt;语法一&lt;/h3&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yulongphp.github.io/tags/linux/"/>
    
      <category term="sed" scheme="http://yulongphp.github.io/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yulongphp.github.io/2019/06/24/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://yulongphp.github.io/2019/06/24/分布式锁/</id>
    <published>2019-06-24T07:48:33.708Z</published>
    <updated>2019-06-24T10:51:50.570Z</updated>
    
    <content type="html"><![CDATA[<p>原文<img src="http://www.itpub.net/2019/05/15/1871/" alt=""></p><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>举个例子：<br>某服务记录数据x，当前为100。A请求需要将x增加100；同时B请求需要将x减去50.理想情况下，A先读到x=100,然后x增加100，最后写入x=200。B请求接着读取到x=200，减少50，最后写入150。然而，在真实情况下，如果不做任何处理，则可能会出现：A和B同时读取到x=100;A写入前B读取到x;B比A先写入等等。</p><p>上面这个例子相信大家都非常熟悉。出现不符合预期的结果本质上是对临界资源没有做好互斥操作。互斥性问题通俗来讲，就是对共享资源的抢占问题。对于共享资源争抢的正确性，锁是最常用的方式，其他的如CAS（compare and swap）等，这里不展开。</p><h3 id="分布式环境的特点"><a href="#分布式环境的特点" class="headerlink" title="分布式环境的特点"></a>分布式环境的特点</h3><p>我们的绝大部分服务都处于分布式环境中。那么，分布式系统有哪些特点呢？大致如下：</p><ul><li>可扩展性：可通过横向水平扩展提高系统的性能和吞吐量。</li><li>高可靠性：高容错，即使系统中一台或几台故障，系统仍可提供服务。</li><li>高并发性：各机器并行独立处理和计算。</li><li>廉价高效：多台小型机而非单台高性能机。</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>我们先来看下非分布式情况下的锁方案（多线程和多进程的情况），然后再演进到分布式锁。</p><h4 id="多线程下的锁机制："><a href="#多线程下的锁机制：" class="headerlink" title="多线程下的锁机制："></a>多线程下的锁机制：</h4><p>各种语言有不同的实现方式，比较成熟。比如，go语言中的sync.RWMutex（读写锁）、sync.Mutex（互斥锁）；JAVA中的ReentrantLock、synchronized；在php中没有找到原生的支持锁的方式，只能通过外部来间接实现，比如文件锁，借助外部存储的锁等。</p><h4 id="多进程下的锁机制："><a href="#多进程下的锁机制：" class="headerlink" title="多进程下的锁机制："></a>多进程下的锁机制：</h4><p>对于临界资源的访问已经超出了单个进程的控制范围。在多进程的情况下，主要是利用操作系统层面的进程间通信原理来解决临界资源的抢占问题。比较常见的一种方法便是使用信号量（Semaphores）。</p><h4 id="对信号量的操作，主要是P操作（wait）和V操作（signal）："><a href="#对信号量的操作，主要是P操作（wait）和V操作（signal）：" class="headerlink" title="对信号量的操作，主要是P操作（wait）和V操作（signal）："></a>对信号量的操作，主要是P操作（wait）和V操作（signal）：</h4><ul><li>P操作 ( wait ) ：</li></ul><p>先检查信号量的大小，若值大于零，则将信号量减1，同时进程获得共享资源的访问权限，继续执行；若小于或者等于零，则该进程被阻塞后，进入等待队列。</p><ul><li>V操作 ( signal ) ：</li></ul><p>该操作将信号量的值加1，如果有进程阻塞着等待该信号量，那么其中一个进程将被唤醒。</p><p>可看出，多进程锁方案跟多线程的锁方案实现思路大同小异。</p><p>我们将互斥的级别拉高，分布式环境下不同节点不同进程或线程之间的互斥，就是分布式锁的挑战之一。后面再细讲。</p><p>另外，在传统的基于数据库的架构中，对于数据的抢占问题也可以通过数据库事务（ACID）来保证。在分布式环境中，出于对性能以及一致性敏感度的要求，使得分布式锁成为了一种比较常见而高效的解决方案。</p><h4 id="从上面对于多线程和多进程锁的概括，可以总结出锁的抽象条件："><a href="#从上面对于多线程和多进程锁的概括，可以总结出锁的抽象条件：" class="headerlink" title="从上面对于多线程和多进程锁的概括，可以总结出锁的抽象条件："></a>从上面对于多线程和多进程锁的概括，可以总结出锁的抽象条件：</h4><p>1）“需要有存储锁的空间，并且锁的空间是可以访问到的”：</p><p>对于多线程就是内存（进程中不同的线程都可以读写），多进程中通过共享内存的方式，也是提供一块地方，供不同进程读写。主要目的是保证不同的进线程改动对于其他进线程可见，进而满足互斥性需求。</p><p>2）“锁需要被唯一标识”：</p><p>不同的共享资源，必然需要用不同的锁进行保护，因此相应的锁必须有唯一的标识。在多线程环境中，锁可以是一个对象，那么对这个对象的引用便是这个唯一标识。多进程下，比如有名信号量，便是用硬盘中的文件名作为唯一标识。</p><p>3）“锁要有至少两种状态”：</p><p>有锁，没锁。存在，不存在等等。很好理解。</p><p>满足上述三个条件就可以实现基础的分布式锁了。但是随着技术的演进。</p><h4 id="相应地，对锁也提出了更高级的条件："><a href="#相应地，对锁也提出了更高级的条件：" class="headerlink" title="相应地，对锁也提出了更高级的条件："></a>相应地，对锁也提出了更高级的条件：</h4><p>1）可重入：</p><p>外层函数获得锁之后，内层函数还可以获得锁。原因是随着软件复杂性增加，方法嵌套获取锁已经很难避免。但是从代码层面很难分析出这个问题，因此我们要使用可重入锁。导致锁需要支持可重入的场景。对于可重入的思考，每种语言有自己的哲学和取舍，如go就舍弃了支持重入：Recursive locking in Go [ <a href="https://stackoverflow.com/questions/14670979/recursive-locking-in-go" target="_blank" rel="noopener">https://stackoverflow.com/questions/14670979/recursive-locking-in-go</a> ]以后go又会不会认为“可重入真香”呢？哈哈，我们拭目以待。</p><p>2）避免产生惊群效应（Herd Effect）：</p><p>惊群效应指，在有多个请求等待获取锁的时候，一旦占有锁的线程释放之后，所有等待方都同时被唤醒，尝试抢占锁。但是绝大多数的抢占都是不必要的。这种情况在多线程和多进程中开销同样很大。要尽量避免这种情况出现。</p><p>3）公平锁和非公平锁：</p><p>公平锁：优先把锁给等待时间最长的一方；非公平锁：不保证等待线程拿锁的顺序。公平锁的实现成本较高。</p><p>4）阻塞锁和自旋锁：</p><p>主要是效率的考虑。自旋锁适用于临界区操作耗时短的场景；阻塞锁适用于临界区操作耗时长的场景。</p><p>5）锁超时：</p><p>防止释放锁失败，出现死锁的情况。</p><p>6）高效，高可用：</p><p>加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。</p><p>还有很多其他更高要求的条件，不一一列举了。有兴趣的小伙伴可以看看编程史上锁的演进过程。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="使用分布式锁的必要性："><a href="#使用分布式锁的必要性：" class="headerlink" title="使用分布式锁的必要性："></a>使用分布式锁的必要性：</h4><p>1）服务要求：部署的服务本身就处于分布式环境中</p><p>2）效率：使用分布式锁可以避免不同节点重复相同的工作，这些工作会浪费资源。比如用户付了钱之后有可能不同节点会发出多封短信</p><p>3）正确性：跟2）类似。如果两个节点在同一条数据上面操作，比如多个节点机器对同一个订单操作不同的流程有可能会导致该笔订单最后状态出现错误，造成损失</p><p>包括但不限于这些必要性，在强烈地呼唤我们今天的主角—“分布式锁”闪亮登场。</p><h3 id="分布式锁实现方案"><a href="#分布式锁实现方案" class="headerlink" title="分布式锁实现方案"></a>分布式锁实现方案</h3><p>有了非分布式锁的实现思路，和分布式环境的挑战，我们来看看分布式锁的实现策略。</p><p>分布式锁本质上还是要实现一个简单的目标—占一个“坑”，当别的节点机器也要来占时，发现已经有人占了，就只好放弃或者稍后再试。</p><h4 id="大体分为4种"><a href="#大体分为4种" class="headerlink" title="大体分为4种"></a>大体分为4种</h4><p>1）使用数据库实现</p><p>2）使用朴素Redis等缓存系统实现</p><p>3）使用ZooKeeper等分布式协调系统实现</p><p>4）使用Redisson来实现（本质上基于Redis）</p><p>因为利用mysql实现分布式锁的性能低以及改造大，我们这里重点讲一下下面3种实现分布式锁的方案。</p><h4 id="朴素Redis实现方案"><a href="#朴素Redis实现方案" class="headerlink" title="朴素Redis实现方案"></a>朴素Redis实现方案</h4><p>我们循序渐进，对比几种实现方式，找出优雅的方式：</p><p>方案1：setnx+delete<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>setnx lock_key lock_value</span><br><span class="line"><span class="number">2</span><span class="comment">// do sth</span></span><br><span class="line"><span class="number">3</span>delete lock_key</span><br></pre></td></tr></table></figure></p><p>缺点：一旦服务挂掉，锁无法被删除释放，会导致死锁。硬伤，pass！2</p><p>方案2：setnx + setex<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>setnx lock_key lock_value</span><br><span class="line"><span class="number">2</span>setex lock_key N lock_value  <span class="comment">// N s超时</span></span><br><span class="line"><span class="number">3</span><span class="comment">// do sth</span></span><br><span class="line"><span class="number">4</span>delete lock_key</span><br></pre></td></tr></table></figure></p><p>在方案1的基础上设置了超时时间。但是还是会出现跟1一样的问题。如果setnx之后、setex之前服务挂掉，一样会陷入死锁。本质原因是，setnx/setex分为了两个步骤，非原子操作。硬伤，pass！</p><p>方案3：set ex nx<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>SET lock_key lock_value EX N NX <span class="comment">//N s超时</span></span><br><span class="line"><span class="number">2</span><span class="comment">// do sth</span></span><br><span class="line"><span class="number">3</span>delete lock_key</span><br></pre></td></tr></table></figure></p><p>将加锁、设置超时两个步骤合并为一个原子操作，从而解决方案1、2的问题。（Redis原生命令支持，Redis version需要&gt;=2.6.12，滴滴生产环境Redis version一般为3.2，所以日常能够使用）。</p><p>优点：此方案目前大多数sdk、Redis部署方案都支持，实现简单</p><p>缺点：会存在锁被错误的释放，被错误的抢占的情况。如下图： </p><p>这块有2个问题：</p><p>1）GC期间，client1超时时间已到，导致将client2错误地放进来</p><p>2）client1执行完逻辑后会显式调用del，将所有的锁都释放了（正确的情况应该只释放自己的锁，错误地释放了client2的锁）</p><p>方案4：</p><p>在3的基础上，对于问题1，将client的超时时间设置长一些，保证只能通过显式del来释放锁，而超时时间只是作为一种最终兜底的方案。针对问题2，增加对 value 的检查，只解除自己加的锁，为保证原子性，只能需要通过lua脚本实现。</p><p>lua脚本：<a href="https://redis.io/commands/eval" target="_blank" rel="noopener">https://redis.io/commands/eval</a><br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="keyword">if</span> redis.<span class="keyword">call</span>(<span class="string">"get"</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line"><span class="symbol">2 </span>  <span class="keyword">return</span> redis.<span class="keyword">call</span>(<span class="string">"del"</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="number">3e</span>lse</span><br><span class="line"><span class="symbol">4 </span>  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="number">5e</span>nd</span><br></pre></td></tr></table></figure></p><p>如果超时时间设置长，只能通过显式的del来释放锁，就不会出现问题2（错误释放掉其他client的锁）。跟滴滴KV store的王斌同学讨论过，目前没有找到方案4优于方案3（只要超时时间设置的长一些）的场景。所以，在我的认知中，方案4跟方案3的优势一样，但是方案3的实现成本明显要低很多。</p><p>朴素Redis方案小结<br>方案3用的最多，实现成本小，对于大部分场景，将超时时间设置的长一些，极少出现问题。同时本方案对不同语言的友好度极高。</p><h4 id="ZooKeeper实现方案"><a href="#ZooKeeper实现方案" class="headerlink" title="ZooKeeper实现方案"></a>ZooKeeper实现方案</h4><p>我们先简要介绍一些ZooKeeper（以下简称ZK）：</p><p>ZooKeeper是一种“分布式协调服务”。所谓分布式协调服务，可以在分布式系统中共享配置，协调锁资源，提供命名服务等。为读多写少的场景所设计，ZK中的节点（以下简称ZNode）非常适合用于存储少量的状态和配置信息。</p><p>对ZK常见的操作：</p><p>create：创建节点</p><p>delete：删除节点</p><p>exists：判断一个节点的数据</p><p>setdata：设置一个节点的数据</p><p>getchildren：获取节点下的所有子节点</p><p>这其中，exists，getData，getChildren属于读操作。Zookeeper客户端在请求读操作的时候，可以选择是否设置Watch（监听机制）。</p><p>什么是Watch？</p><p>Watch机制是zk中非常有用的功能。我们可以理解成是注册在特定Znode上的触发器。当这个Znode发生改变，也就是调用了create，delete，setData方法的时候，将会触发Znode上注册的对应事件，请求Watch的客户端会接收到异步通知。</p><p>我们在实现分布式锁的时候，正是通过Watch机制，来通知正在等待的session相关锁释放的信息。</p><p>什么是ZNode？</p><p>ZNode就是ZK中的节点。ZooKeeper节点是有生命周期的，这取决于节点的类型。在 ZooKeeper 中，节点类型可以分为临时节点（EPHEMERAL），时序节点（SEQUENTIAL ），持久节点（PERSISTENT ）。</p><p>临时节点（EPHEMERAL）：</p><p>节点的生命周期跟session绑定，session创建的节点，一旦该session失效，该节点就会被删除。</p><p>临时顺序节点（EPHEMERAL_SEQUENTIAL）：</p><p>在临时节点的基础上增加了顺序。每个父结点会为自己的第一级子节点维护一份时序。在创建子节点的时候，会自动加上数字后缀，越后创建的节点，顺序越大，后缀越大。</p><p>持久节点（PERSISTENT ）：</p><p>节点创建之后就一直存在，不会因为session失效而消失。</p><p>持久顺序节点（PERSISTENT_SEQUENTIAL）：</p><p>与临时顺序节点同理。</p><p>ZNode中的数据结构：</p><p>data（znode存储的数据信息），acl（记录znode的访问权限，即哪些人或哪些ip可以访问本节点），stat（包含znode的各种元数据，比如事务id，版本号，时间戳，大小等等），child（当前节点的子节点引用）。</p><p>利用ZK实现分布式锁，主要得益于ZK保证了数据的强一致性。</p><p>下面说说通过zk简单实现一个保持独占的锁（利用临时节点的特性）：</p><p>我们可以将ZK上的ZNode看成一把锁（类似于Redis方案中的key）。多个session都去创建同一个distribute_lock节点，只会有一个创建成功的session。相当于只有该session获取到锁，其他session没有获取到锁。在该成功获锁的session失效前，锁将会一直阻塞住。session失效时，节点会自动被删除，锁被解除。（类似于Redis方案中的expire）。</p><p>上述实现方案跟Redis方案3的实现效果一样。</p><p>但是，这样的锁有没有改进的地方？当然！</p><p>1）我们可能会有可重入的需求，因此希望能有可重入的锁机制。</p><p>2）有些场景下，在争抢锁的时候，我们既不想一次争抢不到就pass，也不想一直阻塞住直到获取到锁。一个朴素的需求是，我们希望有超时时间来控制是否去上锁。更进一步，我们不想主动的去查到底是否能够加锁，我们希望能够有事件机制来通知是否能够上锁。（这里，你是不是想到了ZK的Watch机制呢？）</p><p>要满足这样的需求就需要控制时序。利用顺序临时节点和Watch机制的特性，来实现：</p><p>我们事先创建/distribute_lock节点，多个session在它下面创建临时有序节点。由于zk的特性，/distribute_lock该节点会维护一份sequence，来保证子节点创建的时序性。</p><p>具体实现如下：</p><p>1）客户端调用create()方法在/distribute_lock节点下创建EPHEMERAL_SEQUENTIAL节点。</p><p>2）客户端调用getChildren(“/distribute_lock”)方法来获取所有已经创建的子节点。</p><p>3）客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点序号最小，那么就认为这个客户端获得了锁。</p><p>4）如果在步骤3中发现自己并非所有子节点中最小的，说明自己还没有获取到锁。此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时注册事件监听。需要注意是，只在比自己小一号的节点上注册Watch事件。如果在比自己都小的节点上注册Watch事件，将会出现惊群效应，要避免。</p><p>5）之后当这个被关注的节点被移除了，客户端会收到相应的通知。这个时候客户端需要再次调用getChildren(“/distribute_lock”)方法来获取所有已经创建的子节点，确保自己确实是最小的节点了，然后进入步骤3）。</p><p>Curator框架封装了对ZK的api操作。以Java为例来进行演示：</p><p>引入依赖： </p><p>1<dependency><br>2   <groupid>org.apache.curatorgroupId&gt;<br>3   <artifactid>curator-recipesartifactId&gt;<br>4   <version>2.11.1version&gt;<br>5dependency&gt;<br>使用的时候需要注意Curator框架和ZK的版本兼容问题。</version></artifactid></groupid></dependency></p><p>以排他锁为例，看看怎么使用：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line"> <span class="number">2</span></span><br><span class="line"> <span class="number">3</span>    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws Exception &#123;</span><br><span class="line"> <span class="number">4</span>        <span class="comment">//创建zookeeper的客户端</span></span><br><span class="line"> <span class="number">5</span>        RetryPolicy retryPolicy = <span class="keyword">new</span> <span class="type">ExponentialBackoffRetry</span>(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line"> <span class="number">6</span>        CuratorFramework client = CuratorFrameworkFactory.<span class="keyword">new</span><span class="type">Client</span>(“ip:<span class="type">port</span>", retryPolicy);</span><br><span class="line"> <span class="number">7</span>        client.start();</span><br><span class="line"> <span class="number">8</span></span><br><span class="line"> <span class="number">9</span>        <span class="comment">//创建分布式锁, 锁空间的根节点路径为/sunnyzengqi/curator/lock</span></span><br><span class="line"><span class="number">10</span>        InterProcessMutex mutex = <span class="keyword">new</span> <span class="type">InterProcessMutex</span>(client, <span class="string">"/sunnyzengqi/curator/lock"</span>);</span><br><span class="line"><span class="number">11</span>        mutex.acquire();</span><br><span class="line"><span class="number">12</span>        <span class="comment">//获得了锁, 进行业务流程</span></span><br><span class="line"><span class="number">13</span>        System.out.println(<span class="string">"Enter mutex"</span>);</span><br><span class="line"><span class="number">14</span>        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line"><span class="number">15</span>        <span class="comment">//完成业务流程, 释放锁</span></span><br><span class="line"><span class="number">16</span>        mutex.release();</span><br><span class="line"><span class="number">17</span>        <span class="comment">//关闭客户端</span></span><br><span class="line"><span class="number">18</span>        client.close();</span><br><span class="line"><span class="number">19</span>    &#125;</span><br><span class="line"><span class="number">20</span>&#125;</span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure></p><p>上面代码在业务执行的过程中，在ZK的/sunnyzengqi/curator/lock路径下，会创建一个临时节点来占位。相同的代码，在两个机器节点上运行，可以看到该路径下创建了两个临时节点：</p><p>运行命令echo wchc | nc localhost 2181查看watch信息：</p><p>可以看到lock1节点的session在监听节点lock0的变动。此时是lock0获取到锁。等到lock0执行完，session会失效，触发Watch机制，通知lock1的session说锁已经被释放了。这时，lock1可以来抢占锁，进而执行自己的操作。</p><p>除了简单的排它锁的实现，还可以利用ZK的特性来实现更高级的锁（比如信号量，读写锁，联锁）等，这里面有很多的玩法。</p><p>ZooKeeper方案小结<br>能够实现很多具有更高条件的锁机制，并且由于ZK优越的session和watch机制，适用于复杂的场景。因为有久经检验的Curator框架，集成了很多基于ZK的分布式锁的api，对于Java语言非常友好。对于其他语言，虽然也有一些开源项目封装了它的api，但是稳定性和效率需要自己去实际检验。</p><h4 id="Redisson实现方案"><a href="#Redisson实现方案" class="headerlink" title="Redisson实现方案"></a>Redisson实现方案</h4><p>我们先简要介绍一下Redisson：</p><p>Redisson是Java语言编写的基于Redis的client端。功能也非常强大，功能包括：分布式对象，分布式集合，分布式锁和同步器，分布式服务等。被大家熟知的场景还是在分布式锁的场景。</p><p>为了解决加锁线程在没有解锁之前崩溃进而出现死锁的问题，不同于朴素Redis中通过设置超时时间来处理。Redisson采用了新的处理方式：Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。</p><p>跟Zookeeper类似，Redisson也提供了这几种分布式锁：可重入锁，公平锁，联锁，红锁，读写锁等。具体怎么用这里不展开，感兴趣的朋友可以自己去实验。</p><p>Redisson方案小结<br>跟ZK一样，都能够实现很多具有更高条件的锁机制，适用于复杂的场景。但对语言非常挑剔，目前只能支持Java语言。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上一节，我们讨论了三种实现的方案：朴素Redis实现方案，ZooKeeper实现方案，Redisson实现方案。由于第1种与第3种都是基于Redis，所以主要是ZK和基于Redis两种。我们不禁想问，在实现分布式锁上，基于ZK与基于Redis的方案，有什么不同呢？</p><p>1）锁的时长设置上：</p><p>得益于ZK的session机制，客户端可以持有锁任意长的时间，这可以确保它做完所有需要的资源访问操作之后再释放锁。避免了基于Redis的锁对于有效时间到底设置多长的两难问题。实际上，基于ZooKeeper的锁是依靠Session（心跳）来维持锁的持有状态的，而Redis不支持Sesion。</p><p>优势：ZK&gt;Redisson&gt;朴素Redis。</p><p>2）监听机制上：</p><p>得益于ZK的watch机制，在获取锁失败之后可以等待锁重新释放的事件。这让客户端对锁的使用更加灵活。避免了Redis方案主要去轮询的方式。</p><p>优势：ZK&gt;Redisson=朴素Redis。</p><p>3）使用便利性上：</p><p>由于生产环境都有稳定的Redis和ZooKeeper集群，有专业的同学维护，这两者差别不大。在语言局限性上，朴素Redis从不挑食。ZK和Redisson都偏向于Java语言。在开发难度上，Redis最简单，几乎不用写什么代码；ZK和Redisson次之，依赖于使用的语言是否有集成的api以及集成稳定性等。</p><p>优势：朴素Redis&gt;ZK&gt;Redisson。</p><p>4）支持锁形式的多样性上：</p><p>上面有提及，ZK和Redisson都支持了各种花样的分布锁。朴素Redis就比较捉急了，在实现更高要求的锁方面，如果自己造轮子，往往费时费力，力不从心。</p><p>优势：ZK=Redisson&gt;Redis。</p><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>分布式锁在日常Coding中已经很常用。但是分布式锁这方面的知识依然非常深奥。2016年，Martin Kleppmann与Antirez两位分布式领域非常有造诣的前辈还针对“Redlock算法”在分布式锁上面的应用炒得沸沸扬扬。</p><p>最后借助这场历史闹剧中Martin的话来结束我们今天的分享。与诸君共勉！将学习当成一生的主题！</p><p>对我来说最重要的一点在于：我并不在乎在这场辩论中谁对谁错 —— 我只关心从其他人的工作中学到的东西，以便我们能够避免重蹈覆辙，并让未来更加美好。前人已经为我们创造出了许多伟大的成果：站在巨人的肩膀上，我们得以构建更棒的软件。</p><p>……</p><p>对于任何想法，务必要详加检验，通过论证以及检查它们是否经得住别人的详细审查。那是学习过程的一部分。但目标应该是为了获得知识，而不应该是为了说服别人相信你自己是对的。有时候，那只不过意味着停下来，好好地想一想。</p><p>由于时间仓促，自己水平有限，文中必定存在诸多疏漏与理解不当的地方。非常希望得到各位指正，畅谈技术。</p><p>▍Reference</p><p>0.Apache ZooKeeper</p><p>1.Redisson</p><p>2.Redis</p><p>3.Redis分布式锁进化史</p><p>4.分布式系统互斥性与幂等性问题的分析与解决</p><p>5.浅谈可重入性及其他</p><p>6.Distributed locks with Redis</p><p>7.How to do distributed locking</p><p>8.Is Redlock safe?</p><p>9.Note on fencing and distributed locks</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文&lt;img src=&quot;http://www.itpub.net/2019/05/15/1871/&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;headerlink&quot; title=&quot;问题引入&quot;&gt;&lt;/a&gt;问题引入&lt;/h3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux 性能监控那些令人激赏的命令行工具</title>
    <link href="http://yulongphp.github.io/2019/06/24/mysql%E5%AE%9E%E6%88%98%E7%AB%A0%E8%8A%82%E5%B0%8F%E7%BB%93/"/>
    <id>http://yulongphp.github.io/2019/06/24/mysql实战章节小结/</id>
    <published>2019-06-24T07:30:00.000Z</published>
    <updated>2019-07-02T05:56:43.362Z</updated>
    
    <content type="html"><![CDATA[<p>0x04  深入浅出索引总结:</p><pre><code>1. 索引的作用:提高数据查询效率2. 索引的常见模型1)哈希表:以键-值(key-value)存储数据的结构    把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这个位置    哈希冲突的处理办法:链表    哈希表适用场景:只有等值查询的场景2)有序数组:按顺序存储。查询用二分法就可以快速查询，时间复杂度是:O(log(N))    有序数组查询效率高，更新效率低    有序数组的适用场景:静态存储引擎。 3)搜索树:每个节点的左儿子小于父节点，父节点又小于右儿子。查询时间复杂度O(log(N))，更新时间复杂度O(log(N))    数据库存储大多不适用二叉树，因为树高过高，会适用N叉树3. InnoDB中的索引模型: B+Tree    在Innodb中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组 织表。Innodb使用的B+树索引类型。每一个索引在InnoDB里面对应一棵B+树    B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数4. 索引类型:主键索引、非主键索引    主键索引(聚簇索引)：叶子节点存的是整行的数据，    非主键索引(二级索引) ：叶子节点内容是主键（主键占用空间不宜过大） 的值5. 主键索引和普通索引的区别:    主键索引：只要搜索ID这个B+Tree即可拿到数据。    普通索引：先搜索索引拿到主键值，再到主键索引树搜索一次(回表) 6. 一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并， 合并的过程是分裂过程的逆过程。 7. 从性能和存储空间方面考量，自增主键往往是更合理的选择。8. B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一。9. 索引的实现由存储引擎来决定，InnoDB使用B+树(N叉树，比如1200叉树)，把整颗 树的高度维持在很小的范围内，同时在内存里缓存前面若干层的节点，可以极大地降低访 问磁盘的次数，提高读的效率。10. 自增主键的使用场景1)主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小2)业务字段做主键场景:    1:只有一个索引     2:该索引必须是唯一索引 这是典型的 k-v场景        KV场景的意思就是，所有的查询都是where k=N 并没有&gt;= 或者&lt;= 这种操作(没有range操作)        在这种场景里，hash索引的效率就比N叉树高    由于没有其他索引，估不用考虑其它索引叶子节点大小的问题，故将该值设为主键索引11. InnoDB一定会有主键的, 如果没有建立任何的索引，会自动创建一个rowid作为主键的不可见的主键索引12. 回到主键索引树搜索的过程，我们称为回表。13. 覆盖索引：在查询中索引 k 已经“覆盖了”我们的查询需求，我们称为覆盖索引。因此可以直接提供查询结果，不需要回表。    由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。14. 最左前缀原则：B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位 记录。15. 只要满足最左前缀，就可以利用索引来加速检索。这个最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符16. 联合索引：索引项是按照索引定义里面出现的字段顺序排序的。17. 如何安排索引内的字段顺序：    1）如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的    2）考虑的原则就是空间        比如 a b(字段大) 如果既有联合查询，又有各自查询，就需要同时维护(b,a) (a) 两个索引17. 索引下推(&gt;=5.6)：可以在索引便利过程中对索引中包含的字段先做判断，直接过滤吊不满足田间的记录，减少回表次数    以（name, age）联合索引为例查询 name like&apos;张%&apos; and age = 10    无索引下推：    ![](/images/no_index_push.png)    有索引下推：    ![](/images/index_push.png)</code></pre><p>思考题:</p><pre><code>通过两个 alter 语句重建索引 k，以及通过两个 alter 语句重建主键索引是 否合理。重建索引 k 的做法是合理的，可以达到省空间的目的。重建主键的过程不合理。不论是删除主键还是创建主键，都会将整个表重建。    1. 整个数据库迁移，先dump出来再重建表 (这个一般只适合离线的业务来做)    2. alter table T engine=InnoDB。    3. 用repaire table 过这个是由存储引擎决定支不支持的(innodb就不行)。1. N叉树 的N值在mysql中可以被人工调整吗？    可以按照调整Key值的大小的思路来说，5.6以后可以通过page大小来间接控制2. 如果没有主键的表，有一个普通索引。怎么回表?    没有主键的表，innodb会给默认创建一个Rowid做主键3. 一个innoDB引擎的表，数据量非常大，根据二级索引搜索会比主键搜索快？    这个说法只有在使用覆盖索引时才成立，因为覆盖索引里面已经包含当前需要查询的值，非覆盖索引还是要回表查询。4. 插入数据如果是在某个数据满了页的首尾，为了减少数据移动和 页分裂，会先去前后两个页看看是否满了，如果没满会先将数据放到前后两个页上？    为了增加空间利用率5. 如何查看索引数的结构，比如多少个层，多少节点?    可以估算出来的，根据表的行数和索引的定义。如果要精确的，就要解数据文件，这个工具可以看看 https://github.com/jeremycole/innodb_diagrams6. 如何查看索引的利用率。比如我创建了一个索引，是否可以有记录这个索引被调用了 多少次?   performance_schema.table_io_waits_summary_by_index_usage能看到一些信息 7. 非聚集索引上为什么叶子节点不是数据行的地址，而是主键id    这个叫作“堆组织表”，MyISAM就是这样的，各有利弊。你想一下如果修改了数据 的位置的情况，InnoDB这种模式是不是就方便些8. 单表主键建索引，分库的时候不能用到自增主键，这个索引怎么处理？    分库分表可以用自增主键的，有的公司是用步长来控制9. 如果磁盘中的主键索引已经存储了这个表的全部数据的话，那常说的没走索引是遍历整个B+树还是其他地方还有整个表的数据呢?    就是遍历这个主键索引的意思10. 自增主键在高并发量或者频繁插入的情境下，是否仍然适合使用呢?自增主键在高并发量或者频繁插入的情境下，是否仍然适合使用呢?    可以的，当然可能会导致没那么紧凑，但是也是不错的了11. 以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200。”这个怎么理解呢?    一个page的大小是固定的(默认16k) 索引大小固定的情况下，一个page可以放的item数是固定的， 如果是int型，是1200个左右。 12. 如果把多个列联合起来搞成主键索引，那么二级索引里包含的主键是什么样的呢，也是多列?    对，多列13. 什么要重建索引？索引可能因为删除，或者页分裂等原因，导致数据页有空洞，重建索引的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。</code></pre><p>0x05 全局锁和表锁总结</p><pre><code>1. 数据库锁设计的初衷是处理并发问题。2. 作为多用户共享 的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来 实现这些访问规则的重要数据结构。3. MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类4. 全局锁：全局锁就是对整个数据库实例加锁    加锁：Flush tables with read lock (FTWRL)    解锁：可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。    这个命令可以使整个库处于只读状态。使用该命令之后，数据更新语句(数据的增删 改)、数据定义语句(包括建表、修改表结构等)和 更新类事务的提交语句等操作都会被阻塞。    使用场景：做全库逻辑备份（在备份过程中整个库完全处于只读状态）    风险：        1）在主库上备份，那么备份期间都不能执行更新，业务基本上就得停摆        2）在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。    规避风险：        在可重复读隔离级别下开启一个事务。        官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持， 这个过程中数据是可以正常更新的.        single-transaction方法只适用于所有的表使用支持事务引擎的库5. 业务的更新不只是增删改数据(DML)，还有可能是加字段等修改表结构的操作 (DDL)。不论是哪种方法，一个库被全局锁上以后，你要对里面任何一个表做加字段操作，都是会被锁住的。6. 表级锁：表锁  元数据锁(meta data lock， MDL（&gt;=5.5）)7. 表锁的语法是 lock tables ... read/write。    可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。    MDL 不需要显式使用，在访问一个表的时 候会被自动加上。    MDL 的作用是，保证读写的正确性    当对一个表做增删改查操作的时候，加 MDL 读锁;    当要对表做结构变更操作的时候，加 MDL 写锁    读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。    读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。    事务中的 MDL 锁，在语句执行开始时申请，直到整个事务提交后再释放。    注意：        lock tables 语法除了会限制别 的线程的读写外，也限定了本线程接下来的操作对象。        举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线 程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能 执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表8. 没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。    对于InnoDB这种支持行锁的引擎，一般不使用lock tables命令来控制并发，毕竟锁住整个表的影响面还是太大。9. 全局锁主要用在逻辑备份过程中。对于全部是 InnoDB 引擎的库，我建议你选择使用–single-transaction 参数，对应用会更友好。10. 表锁一般是在数据库引擎不支持行锁的时候才会被用到的。如果你发现你的应用程序里有 lock tables 这样的语句，你需要追查一下，比较可能的情况是:    1）要么是你的系统现在还在用 MyISAM 这类不支持事务的引擎，那要安排升级换引擎;    2）要么是你的引擎升级了，但是代码还没升级。我见过这样的情况，最后业务开发就是把 lock tables 和 unlock tables 改成 begin 和 commit，问题就解决了。11. MDL 会直到事务提交才释放，在做表结构变更的时候，你一定要小心不要导致锁住线上查 询和更新</code></pre><p>思考题：</p><pre><code>1. 备份为什么要加锁呢？   不加锁的话，备份系统备份的得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。2. 怎么保证备份的时候能够数据正常更新呢？   innodb可用官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。而由于 MVCC 的支持， 这个过程中数据是可以正常更新的.3. 既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但我还是会建议你用 FTWRL 方式，主要 有两个原因:    1）在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库 还是备库。因此，修改 global 变量的方式影响面更大，我不建议你使用。    2）在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状 态，这样会导致整个库长时间处于不可写状态，风险较高4. 有了官方mysqldump工具，为什么还需要FTWRL呢？    一致性读是好，但前提是引擎要支持这个隔离级别（可重复读）    对于MyISAM不支持事务的引擎，如果备份中有更新，总能拿到新数据，就需要使用FTWRL命令了。5. 如何安全地给小表加字段?    1）首先我们要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，你可以查到当前执行中的事务。如果你要 做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。    2）对于请求很频繁的表，kill可能未必管用，因为新的请求马上就来了。比较理想的机制是，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。    MariaDB 已经合并了 AliSQL 的这个功能，所以这两个开源分支目前都支持 DDL NOWAIT/WAIT n 这个语法。        1 ALTER TABLE tbl_name NOWAIT add column ...         2 ALTER TABLE tbl_name WAIT N add column ...   6. 当备库用–single-transaction 做逻辑备份的时候，如果从主库的 binlog 传来一个 DDL 语句会怎么样?</code></pre><p>0x07  行锁功过:怎么减少行锁对性能的影响?</p><pre><code>1. MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁.2. 不支持行锁意味着并发控制只能使用表锁，对于这种引 擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度3. 两阶段锁：在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻 释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。4. 如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。5. 死锁：当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态。    解决方案：        1）直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置（默认50秒）。            会出现好多误伤，不建议        2）发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on。 默认开启            死锁检测会消耗大量cpu资源6. 死锁检测：每当一个事务被锁的时候，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现了循环等待，也就是死锁。7. innodb行级锁是通过锁索引记录实现的，如果更新的列没建索引是会锁住整个表的（InnoDB内部是根据主键索引逐行扫描，逐行加锁，事务提交的时候统一释放）</code></pre><p>思考题：</p><pre><code>1. 怎么解决由这种热点行更新导致的性能问题呢?    1）如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。        风险：            业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后通过业务重试一般就没问题了，这是业务无损的。            关掉死锁检测意味着可能会出现大量的超时，这是业务有损的    2）另一个思路是控制并发度。这个并发控制要做在数据库服务端。如果你有中间件，可以考虑在中间件实现;        基本思路就是，对于相同行的更新，在进入引擎之前排队。这样在 InnoDB 内部就不会有大量的死锁检测工作了。    3）设计上解决：通过将一行改成逻辑上的多行来减少锁冲突。这类方案需要根据业务逻辑做详细设计，有些地方需要做特殊处理</code></pre><p>0x08 事务到底是隔离的还是不隔离的?</p><pre><code>1. begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。 如果你想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。2. 在 MySQL 里，有两个“视图”的概念:    1) 一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。        创建视图的语法是 create view ... ，而它的查询方法与表一样    2) 另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view， 用于支持 RC(Read Committed，读提交)和 RR(Repeatable Read，可重复读)隔 离级别的实现。    它没有物理结构，作用是事务执行期间用来定义“我能看到什么数据”。3. “快照”在 MVCC 里是怎么工作的?</code></pre><p>mysql optimize整理表碎片<br>    当您的库中删除了大量的数据后，您可能会发现数据文件尺寸并没有减小。这是因为删 除操作后在数据文件中留下碎片所致。<br>    optimize table 可以去除删除操作后留下的数据文件碎片，减小文件尺寸，加快未来的读写操作。<br>    OPTIMIZE TABLE通过制作原来的表的一个临时副本来工作<br>    OPTIMIZE TABLE语法<br>        OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] …<br>        如果您已经删除了表的一大部分，或者如果您已经对含有可变长度行的表（含有 VARCHAR, BLOB或TEXT列的表）进行了很多更改，则应使用OPTIMIZE TABLE。被删除的记录被保持在链接清单中，后续的INSERT操作会重新使用旧的记录位置。您可以使用OPTIMIZE TABLE来重新利用未使用的空间，并整理数据文件的碎片。</p><pre><code>    在多数的设置中，您根本不需要运行OPTIMIZE TABLE。即使您对可变长度的行进行了大量的更新，您也不需要经常运行，每周一次或每月一次即可，只对特定的表运行。OPTIMIZE TABLE只对MyISAM, BDB和InnoDB表起作用。对于MyISAM表，OPTIMIZE TABLE按如下方式操作：        1. 如果表已经删除或分解了行，则修复表。    2. 如果未对索引页进行分类，则进行分类。    3. 如果表的统计数据没有更新（并且通过对索引进行分类不能实现修复），则进行更新。对于BDB表，OPTIMIZE TABLE目前被映射到ANALYZE TABLE上。对于InnoDB表，OPTIMIZE TABLE被映射到ALTER TABLE上，这会重建表。重建操作能更新索引统计数据并释放成簇索引中的未使用的空间。使用—skip-new或—safe-mode选项可以启动mysqld。通过启动mysqld，您可以使OPTIMIZE TABLE对其它表类型起作用。注意，在OPTIMIZE TABLE运行过程中，MySQL会锁定表。OPTIMIZE TABLE语句被写入到二进制日志中，除非使用了自选的NO_WRITE_TO_BINLOG关键词（或其别名LOCAL）。已经这么做了，因此，用于 MySQL服务器的OPTIMIZE TABLE命令的作用相当于一个复制主服务器，在默认情况下，这些命令将被复制到复制从属服务器中。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;0x04  深入浅出索引总结:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 索引的作用:提高数据查询效率
2. 索引的常见模型
1)哈希表:以键-值(key-value)存储数据的结构
    把值放在数组里，用一个哈希函数把key换算成一个确定的位置，然后把value放在数组的这
      
    
    </summary>
    
      <category term="mysql" scheme="http://yulongphp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yulongphp.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql查询优化</title>
    <link href="http://yulongphp.github.io/2019/05/05/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://yulongphp.github.io/2019/05/05/mysql查询优化/</id>
    <published>2019-05-05T03:14:28.000Z</published>
    <updated>2019-07-02T05:57:16.021Z</updated>
    
    <content type="html"><![CDATA[<p>1、应尽量避免在  WHERE  子句中使用 != 或者 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>2、应尽量避免在  WHERE  子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num  IS  NULL;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>可以在 num 上设置默认值 0 ，确保表中 num 列没有 NULL 值，然后这样查询：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>3、对查询进行优化，应尽量避免全表扫描，首先应考虑在  WHERE  及 ORDER BY 涉及的列上建立索引。</p><p>4、尽量避免在  WHERE  子句中使用 OR 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">10</span> OR num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>可以这样查询：<br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">10</span> UNION ALL SELECT  id  FROM  t  WHERE  num = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>5、下面的查询也将导致全表扫描：（不能前置百分号）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  name like <span class="string">'%abc%'</span>;</span><br></pre></td></tr></table></figure></p><p>若要提高效率，可以考虑全文检索。</p><p>6、 IN 和 NOT IN 也要慎用，否则会导致全表扫描，如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num IN (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>对于连续的数值，能用 between 就不要用 IN 了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num BETWEEN <span class="number">1</span> AND <span class="number">3</span>;</span><br><span class="line">SELECT  xx,phone  FROM  send  a JOIN (</span><br><span class="line"> SELECT  <span class="string">'13891030091'</span> phone  UNION SELECT  <span class="string">'13992085916'</span> …………  UNION  SELECT  <span class="string">'13619100234'</span> ) b</span><br><span class="line">  on  a.Phone=b.phone</span><br></pre></td></tr></table></figure></p><p>–替代下面  很多数据隔开的时候<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN (<span class="string">'13891030091'</span>,<span class="string">'13992085916'</span>,<span class="string">'13619100234'</span>…………)</span><br></pre></td></tr></table></figure></p><p>7、如果在  WHERE  子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择到运行时；它必须在编译时进行选择。然而，如果在编译时简历访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = @num;</span><br></pre></td></tr></table></figure></p><p>可以改为强制查询使用索引：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t <span class="keyword">with</span>(index(索引名))  WHERE  num = @num;</span><br></pre></td></tr></table></figure></p><p>8、应尽量避免在  WHERE  子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num/<span class="number">2</span> = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></p><p>应改为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  num = <span class="number">100</span> * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>9、应尽量避免在  WHERE  子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  substring(name, <span class="number">1</span>, <span class="number">3</span>) = ’abc’–name;  //以abc开头的id</span><br><span class="line">SELECT  id  FROM  t  WHERE  datediff(day,createdate,’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′) = <span class="number">0</span>–’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′;  //生成的id</span><br></pre></td></tr></table></figure></p><p>应改为:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  id  FROM  t  WHERE  name like ‘abc%’</span><br><span class="line">SELECT  id  FROM  t  WHERE  createdate &gt;= ’<span class="number">2005</span><span class="number">-11</span><span class="number">-30</span>′ <span class="keyword">and</span> createdate &lt; ’<span class="number">2005</span><span class="number">-12</span><span class="number">-1</span>′;</span><br></pre></td></tr></table></figure></p><p>10、不要在  WHERE  子句中的 “=” 左边进行函数，算术运算或者其他表达式运算，否则系统将可能无法正确使用索引。</p><p>11、在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><p>12、不要些一些没有意义的查询，如需要生成一个空表结构：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  col1,col2 into <span class="comment">#t  FROM  t  WHERE  1=0;</span></span><br></pre></td></tr></table></figure></p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="comment">#t(…)</span></span><br></pre></td></tr></table></figure></p><p>13、很多时候用 exists 代替 IN 是一个好的选择：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  num  FROM  a  WHERE  num IN (SELECT  num  FROM  b);</span><br></pre></td></tr></table></figure></p><p>用下面的语句替换：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  num  FROM  a  WHERE  exists(SELECT  <span class="number">1</span>  FROM  b  WHERE  num=a.num);</span><br></pre></td></tr></table></figure></p><p>14、并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><p>15、索引并不是越多越好，索引固然可以提高相应的 SELECT  的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>16、应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为clustered 索引。</p><p>17、尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>18、尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>19、任何地方都不要使用 SELECT  *  FROM  t ，用具体的字段列表代替 *，不要返回用不到的任何字段。</p><p>20、尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p>21、避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p>22、临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p>23、在新建临时表时，如果一次性插入数据量很大，那么可以使用 SELECT  into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 create table，然后 insert。</p><p>24、如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p>25、尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p>26、使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p>27、与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p>28、在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p>29、尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><p>30、尽量避免大事务操作，提高系统并发能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、应尽量避免在  WHERE  子句中使用 != 或者 &amp;lt;&amp;gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。&lt;/p&gt;
&lt;p&gt;2、应尽量避免在  WHERE  子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：&lt;br&gt;    &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SELECT  id  FROM  t  WHERE  num  IS  NULL;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yulongphp.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yulongphp.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>php 部分语法的AST、栈、符号表、和指令集</title>
    <link href="http://yulongphp.github.io/2019/01/01/php%E9%83%A8%E5%88%86%E8%AF%AD%E6%B3%95%E7%9A%84AST%E6%A0%88%E7%AC%A6%E5%8F%B7%E8%A1%A8%E5%92%8C%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <id>http://yulongphp.github.io/2019/01/01/php部分语法的AST栈符号表和指令集/</id>
    <published>2019-01-01T04:56:19.000Z</published>
    <updated>2019-06-06T10:31:20.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="break-语法的AST、栈、符号表和指令集"><a href="#break-语法的AST、栈、符号表和指令集" class="headerlink" title="break 语法的AST、栈、符号表和指令集"></a>break 语法的AST、栈、符号表和指令集</h2><h4 id="先写一个测试脚本-break-php"><a href="#先写一个测试脚本-break-php" class="headerlink" title="先写一个测试脚本 break.php"></a>先写一个测试脚本 break.php</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="gdb调试过程："><a href="#gdb调试过程：" class="headerlink" title="gdb调试过程："></a>gdb调试过程：</h4><p><img src="/images/break_gdb_ast.png" alt=""></p><h4 id="抽象语法树："><a href="#抽象语法树：" class="headerlink" title="抽象语法树："></a>抽象语法树：</h4><p><img src="/images/break_ast.png" alt=""></p><h4 id="栈、符号表和常量"><a href="#栈、符号表和常量" class="headerlink" title="栈、符号表和常量"></a>栈、符号表和常量</h4><p><img src="/images/break_stack.png" alt=""></p><h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/break_order.png" alt=""></p><h2 id="实战-文件的引入实现"><a href="#实战-文件的引入实现" class="headerlink" title="实战 文件的引入实现"></a>实战 文件的引入实现</h2><ul><li>include语法</li><li>require语法</li><li>include_once语法</li><li>require_once语法</li></ul><h4 id="先编写两个文件-1-php"><a href="#先编写两个文件-1-php" class="headerlink" title="先编写两个文件 1.php"></a>先编写两个文件 1.php</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">1</span>;</span></span><br></pre></td></tr></table></figure><p>2.php</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">"1.php"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="number">2</span>;</span></span><br></pre></td></tr></table></figure><h4 id="include-gdb"><a href="#include-gdb" class="headerlink" title="include gdb"></a>include gdb</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0</span>x7f85f8: file Zend/zend_language_scanner.l, line <span class="number">578</span>.</span><br><span class="line">(gdb) r <span class="number">2</span>.php</span><br><span class="line">Starting program: /usr/local/bin/php71 <span class="number">2</span>.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib64/libthread_db.so.1"</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, zend_compile (<span class="attr">type=2)</span> at Zend/zend_language_scanner.l:<span class="number">578</span></span><br><span class="line"><span class="number">578</span>zend_op_array *<span class="attr">op_array</span> = NULL;</span><br><span class="line">(gdb)</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">579</span>zend_bool <span class="attr">original_in_compilation</span> = CG(in_compilation);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">581</span>CG(in_compilation) = <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">582</span>CG(ast) = NULL;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">583</span>CG(ast_arena) = zend_arena_create(<span class="number">1024</span> * <span class="number">32</span>);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">585</span><span class="keyword">if</span> (!zendparse()) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">586</span>int <span class="attr">last_lineno</span> = CG(zend_lineno);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">589</span>zend_op_array *<span class="attr">original_active_op_array</span> = CG(active_op_array);</span><br><span class="line">(gdb) p compiler_globals.ast</span><br><span class="line">$<span class="number">1</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a018</span><br><span class="line">(gdb) p *compiler_globals.ast</span><br><span class="line">$<span class="number">2</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list)compiler_globals.ast</span><br><span class="line">Structure has no component named operator*.</span><br><span class="line">(gdb) p *(zend_ast_list*)compiler_globals.ast</span><br><span class="line">$<span class="number">3</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">1</span>, <span class="attr">children</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a060&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">4</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a060</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">5</span> = &#123;<span class="attr">kind</span> = <span class="number">269</span>, <span class="attr">attr</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a048&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">6</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a048</span><br><span class="line">(gdb) p *$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">7</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e5eac0&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">5</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">8</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318873792</span>, <span class="attr">dval</span> = <span class="number">6.9533474343345501</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">str</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e5eac0,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e5eac0, <span class="attr">ww</span> = &#123;</span><br><span class="line">        <span class="attr">w1</span> = <span class="number">4125485760</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">type_flags</span> = <span class="number">20</span> '\<span class="number">024</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;,</span><br><span class="line">      <span class="attr">type_info</span> = <span class="number">5126</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>, <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>,</span><br><span class="line">      <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">9</span> = (zend_string *) <span class="number">0</span>x7ffff5e5eac0</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str</span><br><span class="line">$<span class="number">10</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">1</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">6</span> '\<span class="number">006</span>', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">6</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">0</span>, <span class="attr">len</span> = <span class="number">5</span>, <span class="attr">val</span> = <span class="string">"1"</span>&#125;</span><br><span class="line">(gdb) p *$<span class="number">8</span>.val.value.str.val@<span class="number">5</span></span><br><span class="line">$<span class="number">11</span> = <span class="string">"1.php"</span></span><br><span class="line">(gdb) p $<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">12</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a098</span><br><span class="line">(gdb) p *$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">13</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x1&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_list*)$<span class="number">3</span>.child[<span class="number">1</span>]</span><br><span class="line">$<span class="number">14</span> = &#123;<span class="attr">kind</span> = <span class="number">132</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">children</span> = <span class="number">1</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a088&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">15</span> = (zend_ast *) <span class="number">0</span>x7ffff5e7a088</span><br><span class="line">(gdb) p *$<span class="number">14</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">16</span> = &#123;<span class="attr">kind</span> = <span class="number">282</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x7ffff5e7a070&#125;&#125;</span><br><span class="line">(gdb) p *$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">17</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">child</span> = &#123;<span class="number">0</span>x2&#125;&#125;</span><br><span class="line">(gdb) p *(zend_ast_zval*)$<span class="number">16</span>.child[<span class="number">0</span>]</span><br><span class="line">$<span class="number">18</span> = &#123;<span class="attr">kind</span> = <span class="number">64</span>, <span class="attr">attr</span> = <span class="number">0</span>, <span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2,</span><br><span class="line">      <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2, <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>',</span><br><span class="line">        <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">3</span>, <span class="attr">cache_slot</span> = <span class="number">3</span>, <span class="attr">lineno</span> = <span class="number">3</span>,</span><br><span class="line">      <span class="attr">num_args</span> = <span class="number">3</span>, <span class="attr">fe_pos</span> = <span class="number">3</span>, <span class="attr">fe_iter_idx</span> = <span class="number">3</span>, <span class="attr">access_flags</span> = <span class="number">3</span>, <span class="attr">property_guard</span> = <span class="number">3</span>&#125;&#125;&#125;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h4 id="include-AST"><a href="#include-AST" class="headerlink" title="include AST"></a>include AST</h4><p><img src="/images/include_ast.png" alt=""></p><h4 id="栈-符号表-和常量"><a href="#栈-符号表-和常量" class="headerlink" title="栈 符号表 和常量"></a>栈 符号表 和常量</h4><p><img src="/images/include_stack.png" alt=""></p><h4 id="指令集-1"><a href="#指令集-1" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/include_order.png" alt=""></p><h2 id="条件判断语法实现"><a href="#条件判断语法实现" class="headerlink" title="条件判断语法实现"></a>条件判断语法实现</h2><h4 id="先编写文件-condition-php"><a href="#先编写文件-condition-php" class="headerlink" title="先编写文件 condition.php"></a>先编写文件 <code>condition.php</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = <span class="string">"php7"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($a == <span class="string">"php5"</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP5 is good.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">elseif</span>($a == <span class="string">'php7'</span>)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"PHP7 is better.\n"</span>;</span></span><br><span class="line"><span class="php">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"Hoho~ PHP is the best language!\n"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="AST-语法树"><a href="#AST-语法树" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/if_ast.png" alt=""></p><h4 id="栈-符号表-常量"><a href="#栈-符号表-常量" class="headerlink" title="栈 符号表 常量"></a>栈 符号表 常量</h4><p><img src="/images/if_stack.png" alt=""></p><h4 id="指令集-2"><a href="#指令集-2" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/if_order_1.png" alt=""><br><img src="/images/if_order_2.png" alt=""></p><h2 id="实战：循环语法实现"><a href="#实战：循环语法实现" class="headerlink" title="实战：循环语法实现"></a>实战：循环语法实现</h2><ul><li>foreach 语法</li><li>while 语法</li><li>for 语法</li><li>do while 语法</li></ul><h4 id="先编写文件-foreach-php"><a href="#先编写文件-foreach-php" class="headerlink" title="先编写文件 foreach.php"></a>先编写文件 <code>foreach.php</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = [<span class="number">1</span>, <span class="number">2</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">foreach</span>($a <span class="keyword">as</span> $k =&gt; $v)&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $v;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="AST-语法树-1"><a href="#AST-语法树-1" class="headerlink" title="AST 语法树"></a>AST 语法树</h4><p><img src="/images/foreach_ast.png" alt=""></p><h4 id="栈-符号表-和-常量"><a href="#栈-符号表-和-常量" class="headerlink" title="栈 符号表 和 常量"></a>栈 符号表 和 常量</h4><p><img src="/images/foreach_stack.png" alt=""></p><h4 id="指令集-3"><a href="#指令集-3" class="headerlink" title="指令集"></a>指令集</h4><p><img src="/images/foreach_order_1.png" alt=""><br><img src="/images/foreach_order_2.png" alt=""></p><h4 id="执行过程gdb"><a href="#执行过程gdb" class="headerlink" title="执行过程gdb"></a>执行过程gdb</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br></pre></td><td class="code"><pre><span class="line">[root@yyl PHP]<span class="comment"># gdb php71</span></span><br><span class="line">GNU gdb (GDB) Red Hat Enterprise Linux <span class="number">7.6</span>.<span class="number">1</span>-<span class="number">114</span>.el7</span><br><span class="line">Copyright (C) <span class="number">2013</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> <span class="literal">or</span> later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change <span class="literal">and</span> redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line"><span class="literal">and</span> <span class="string">"show warranty"</span> for details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-redhat-linux-gnu"</span>.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class="line">Reading symbols from /usr/local/php/php-<span class="number">7.1</span>.<span class="number">0</span>/bin/php...done.</span><br><span class="line">(gdb) b zend_compile</span><br><span class="line">Breakpoint <span class="number">1</span> at <span class="number">0</span>x7f85f8: file Zend/zend_language_scanner.l, line <span class="number">578</span>.</span><br><span class="line">(gdb) b zend_execute</span><br><span class="line">Breakpoint <span class="number">2</span> at <span class="number">0</span>x8aea82: file /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h, line <span class="number">461</span>.</span><br><span class="line">(gdb) b execute_ex</span><br><span class="line">Breakpoint <span class="number">3</span> at <span class="number">0</span>x8aea15: file /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h, line <span class="number">411</span>.</span><br><span class="line">(gdb) r foreach.php</span><br><span class="line">Starting program: /usr/local/bin/php71 foreach.php</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">"/lib64/libthread_db.so.1"</span>.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, zend_compile (<span class="attr">type=2)</span> at Zend/zend_language_scanner.l:<span class="number">578</span></span><br><span class="line"><span class="number">578</span>zend_op_array *<span class="attr">op_array</span> = NULL;</span><br><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">2</span>, zend_execute (<span class="attr">op_array=0x7ffff5e83000,</span> <span class="attr">return_value=0x0)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">461</span></span><br><span class="line"><span class="number">461</span><span class="keyword">if</span> (EG(exception) != NULL) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">466</span>(zend_function*)op_array, <span class="number">0</span>, zend_get_called_scope(EG(current_execute_data)), zend_get_this_object(EG(current_execute_data)));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">465</span><span class="attr">execute_data</span> = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE,</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">466</span>(zend_function*)op_array, <span class="number">0</span>, zend_get_called_scope(EG(current_execute_data)), zend_get_this_object(EG(current_execute_data)));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">465</span><span class="attr">execute_data</span> = zend_vm_stack_push_call_frame(ZEND_CALL_TOP_CODE | ZEND_CALL_HAS_SYMBOL_TABLE,</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">467</span><span class="keyword">if</span> (EG(current_execute_data)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">470</span>execute_data-&gt;<span class="attr">symbol_table</span> = &amp;EG(symbol_table);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">472</span>EX(prev_execute_data) = EG(current_execute_data);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">473</span>i_init_execute_data(execute_data, op_array, return_value);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">474</span>zend_execute_ex(execute_data);</span><br><span class="line">(gdb) s</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">3</span>, execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">411</span></span><br><span class="line"><span class="number">411</span>const zend_op *<span class="attr">orig_opline</span> = opline;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">414</span>zend_execute_data *<span class="attr">orig_execute_data</span> = execute_data;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">415</span><span class="attr">execute_data</span> = ex;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">421</span>LOAD_OPLINE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">422</span>ZEND_VM_LOOP_INTERRUPT_CHECK();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_CONST_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">39440</span></span><br><span class="line"><span class="number">39440</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39441</span><span class="attr">value</span> = EX_CONSTANT(opline-&gt;op2);</span><br><span class="line">(gdb) p opline-&gt;op2</span><br><span class="line">$<span class="number">1</span> = &#123;<span class="attr">constant</span> = <span class="number">0</span>, <span class="attr">var</span> = <span class="number">0</span>, <span class="attr">num</span> = <span class="number">0</span>, <span class="attr">opline_num</span> = <span class="number">0</span>, <span class="attr">jmp_offset</span> = <span class="number">0</span>&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39442</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">2</span> = (zval *) <span class="number">0</span>x7ffff5e649c0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">3</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">4294967295</span>,</span><br><span class="line">    <span class="attr">cache_slot</span> = <span class="number">4294967295</span>, <span class="attr">lineno</span> = <span class="number">4294967295</span>, <span class="attr">num_args</span> = <span class="number">4294967295</span>, <span class="attr">fe_pos</span> = <span class="number">4294967295</span>, <span class="attr">fe_iter_idx</span> = <span class="number">4294967295</span>,</span><br><span class="line">    <span class="attr">access_flags</span> = <span class="number">4294967295</span>, <span class="attr">property_guard</span> = <span class="number">4294967295</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">3</span>.value.arr</span><br><span class="line">$<span class="number">4</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">3</span>.value.arr</span><br><span class="line">$<span class="number">5</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">1</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.arData[<span class="number">0</span>]</span><br><span class="line">$<span class="number">6</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">0</span>, <span class="attr">key</span> = <span class="number">0</span>x0&#125;</span><br><span class="line">(gdb) p $<span class="number">5</span>.arData[<span class="number">1</span>]</span><br><span class="line">$<span class="number">7</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">      <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">1</span>, <span class="attr">key</span> = <span class="number">0</span>x0&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39450</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_CONST);</span><br><span class="line">(gdb) p opline-&gt;op1.var</span><br><span class="line">$<span class="number">8</span> = <span class="number">80</span></span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">9</span> = (zval *) <span class="number">0</span>x7ffff5e14080</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39458</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb) p *variable_ptr</span><br><span class="line">$<span class="number">10</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">39459</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_RESET_R_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">35503</span></span><br><span class="line"><span class="number">35503</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35505</span><span class="attr">array_ptr</span> = _get_zval_ptr_cv_deref_BP_VAR_R(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p opline-&gt;op1.var</span><br><span class="line">$<span class="number">11</span> = <span class="number">80</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35506</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array_ptr) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb) p array_ptr</span><br><span class="line">$<span class="number">12</span> = (zval *) <span class="number">0</span>x7ffff5e14080</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35507</span><span class="attr">result</span> = EX_VAR(opline-&gt;result.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35508</span>ZVAL_COPY_VALUE(result, array_ptr);</span><br><span class="line">(gdb) p result</span><br><span class="line">$<span class="number">13</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35509</span><span class="keyword">if</span> (IS_CV != IS_TMP_VAR &amp;&amp; Z_OPT_REFCOUNTED_P(result)) &#123;</span><br><span class="line">(gdb) p *result</span><br><span class="line">$<span class="number">14</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">15</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">16</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">2</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35510</span>Z_ADDREF_P(array_ptr);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35512</span>Z_FE_POS_P(result) = <span class="number">0</span>;</span><br><span class="line">(gdb) p *$<span class="number">14</span>.value.arr</span><br><span class="line">$<span class="number">17</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">3</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) p *result</span><br><span class="line">$<span class="number">18</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">35514</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">35606</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">19</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb) p fe_ht</span><br><span class="line">$<span class="number">20</span> = (HashTable *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">21</span> = <span class="number">0</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16719</span><span class="attr">value</span> = &amp;p-&gt;val;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16720</span><span class="attr">value_type</span> = Z_TYPE_INFO_P(value);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">22</span> = (zval *) <span class="number">0</span>x7ffff5e5fa08</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">23</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16721</span><span class="keyword">if</span> (<span class="attr">value_type</span> == IS_UNDEF) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16725</span>&#125; <span class="keyword">else</span> <span class="keyword">if</span> (UNEXPECTED(<span class="attr">value_type</span> == IS_INDIRECT)) &#123;</span><br><span class="line">(gdb) p value_type</span><br><span class="line">$<span class="number">24</span> = <span class="number">4</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16734</span>break;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16736</span>Z_FE_POS_P(array) = pos + <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16737</span><span class="keyword">if</span> (opline-&gt;result_type &amp; (IS_TMP_VAR|IS_CV)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16738</span><span class="keyword">if</span> (!p-&gt;key) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16739</span>ZVAL_LONG(EX_VAR(opline-&gt;result.var), p-&gt;h);</span><br><span class="line">(gdb) p opline-&gt;result.var</span><br><span class="line">$<span class="number">25</span> = <span class="number">160</span></span><br><span class="line">(gdb) p ((zval*)(((char*)(execute_data)) + ((int)(opline-&gt;result.var))))</span><br><span class="line">$<span class="number">26</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16856</span><span class="keyword">if</span> (EXPECTED(opline-&gt;<span class="attr">op2_type</span> == IS_CV)) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16857</span>zval *<span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op2.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16858</span>zend_assign_to_variable(variable_ptr, value, IS_CV);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">27</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">28</span> = (zval *) <span class="number">0</span>x7ffff5e5fa08</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">29</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16868</span>ZEND_VM_NEXT_OPCODE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_TMP_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">40733</span></span><br><span class="line"><span class="number">40733</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40734</span><span class="attr">value</span> = _get_zval_ptr_tmp(opline-&gt;op2.var, execute_data, &amp;free_op2);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40735</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">30</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">31</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">0</span>, <span class="attr">dval</span> = <span class="number">0</span>, <span class="attr">counted</span> = <span class="number">0</span>x0, <span class="attr">str</span> = <span class="number">0</span>x0, <span class="attr">arr</span> = <span class="number">0</span>x0, <span class="attr">obj</span> = <span class="number">0</span>x0, <span class="attr">res</span> = <span class="number">0</span>x0, <span class="attr">ref</span> = <span class="number">0</span>x0, <span class="attr">ast</span> = <span class="number">0</span>x0, <span class="attr">zv</span> = <span class="number">0</span>x0,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x0, <span class="attr">ce</span> = <span class="number">0</span>x0, <span class="attr">func</span> = <span class="number">0</span>x0, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">0</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40743</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_TMP_VAR);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">32</span> = (zval *) <span class="number">0</span>x7ffff5e140a0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40751</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40752</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ECHO_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">34640</span></span><br><span class="line"><span class="number">34640</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34641</span><span class="attr">z</span> = _get_zval_ptr_cv_undef(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34643</span><span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line">$<span class="number">33</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34650</span>zend_string *<span class="attr">str</span> = _zval_get_string_func(z);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34652</span><span class="keyword">if</span> (ZSTR_LEN(str) != <span class="number">0</span>) &#123;</span><br><span class="line">(gdb) p *z</span><br><span class="line">$<span class="number">34</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34653</span>zend_write(ZSTR_VAL(str), ZSTR_LEN(str));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">134657</span>zend_string_release(str);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34660</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34661</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_JMP_SPEC_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">607</span></span><br><span class="line"><span class="number">607</span>ZEND_VM_SET_OPCODE(OP_JMP_ADDR(opline, opline-&gt;op1));</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)(opline-&gt;op1).jmp_offset))</span><br><span class="line">$<span class="number">35</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">608</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">609</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">36</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">37</span> = <span class="number">1</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16719</span><span class="attr">value</span> = &amp;p-&gt;val;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16720</span><span class="attr">value_type</span> = Z_TYPE_INFO_P(value);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16721</span><span class="keyword">if</span> (<span class="attr">value_type</span> == IS_UNDEF) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16725</span>&#125; <span class="keyword">else</span> <span class="keyword">if</span> (UNEXPECTED(<span class="attr">value_type</span> == IS_INDIRECT)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16734</span>break;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16736</span>Z_FE_POS_P(array) = pos + <span class="number">1</span>;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16737</span><span class="keyword">if</span> (opline-&gt;result_type &amp; (IS_TMP_VAR|IS_CV)) &#123;</span><br><span class="line">(gdb) p array</span><br><span class="line">$<span class="number">38</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) p *array</span><br><span class="line">$<span class="number">39</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>, <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16738</span><span class="keyword">if</span> (!p-&gt;key) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16739</span>ZVAL_LONG(EX_VAR(opline-&gt;result.var), p-&gt;h);</span><br><span class="line">(gdb) p p-&gt;h</span><br><span class="line">$<span class="number">40</span> = <span class="number">1</span></span><br><span class="line">(gdb) p opline-&gt;result.var</span><br><span class="line">$<span class="number">41</span> = <span class="number">160</span></span><br><span class="line">(gdb) p ((zval*)(((char*)(execute_data)) + ((int)(opline-&gt;result.var))))</span><br><span class="line">$<span class="number">42</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16856</span><span class="keyword">if</span> (EXPECTED(opline-&gt;<span class="attr">op2_type</span> == IS_CV)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16857</span>zval *<span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op2.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16858</span>zend_assign_to_variable(variable_ptr, value, IS_CV);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">43</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p *variable_ptr</span><br><span class="line">$<span class="number">44</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16868</span>ZEND_VM_NEXT_OPCODE();</span><br><span class="line">(gdb) p *(zval*)<span class="number">0</span>x7ffff5e14090</span><br><span class="line">$<span class="number">45</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ASSIGN_SPEC_CV_TMP_RETVAL_UNUSED_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">40733</span></span><br><span class="line"><span class="number">40733</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40734</span><span class="attr">value</span> = _get_zval_ptr_tmp(opline-&gt;op2.var, execute_data, &amp;free_op2);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40735</span><span class="attr">variable_ptr</span> = _get_zval_ptr_cv_undef_BP_VAR_W(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb) p value</span><br><span class="line">$<span class="number">46</span> = (zval *) <span class="number">0</span>x7ffff5e140d0</span><br><span class="line">(gdb) p *value</span><br><span class="line">$<span class="number">47</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">1</span>, <span class="attr">dval</span> = <span class="number">4.9406564584124654</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x1, <span class="attr">str</span> = <span class="number">0</span>x1, <span class="attr">arr</span> = <span class="number">0</span>x1, <span class="attr">obj</span> = <span class="number">0</span>x1, <span class="attr">res</span> = <span class="number">0</span>x1, <span class="attr">ref</span> = <span class="number">0</span>x1,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x1, <span class="attr">zv</span> = <span class="number">0</span>x1, <span class="attr">ptr</span> = <span class="number">0</span>x1, <span class="attr">ce</span> = <span class="number">0</span>x1, <span class="attr">func</span> = <span class="number">0</span>x1, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">1</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40743</span><span class="attr">value</span> = zend_assign_to_variable(variable_ptr, value, IS_TMP_VAR);</span><br><span class="line">(gdb) p variable_ptr</span><br><span class="line">$<span class="number">48</span> = (zval *) <span class="number">0</span>x7ffff5e140a0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">40751</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">40752</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_ECHO_SPEC_CV_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">34640</span></span><br><span class="line"><span class="number">34640</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34641</span><span class="attr">z</span> = _get_zval_ptr_cv_undef(execute_data, opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34643</span><span class="keyword">if</span> (Z_TYPE_P(z) == IS_STRING) &#123;</span><br><span class="line">(gdb) p z</span><br><span class="line">$<span class="number">49</span> = (zval *) <span class="number">0</span>x7ffff5e14090</span><br><span class="line">(gdb) p *z</span><br><span class="line">$<span class="number">50</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">2</span>, <span class="attr">dval</span> = <span class="number">9.8813129168249309</span>e-<span class="number">324</span>, <span class="attr">counted</span> = <span class="number">0</span>x2, <span class="attr">str</span> = <span class="number">0</span>x2, <span class="attr">arr</span> = <span class="number">0</span>x2, <span class="attr">obj</span> = <span class="number">0</span>x2, <span class="attr">res</span> = <span class="number">0</span>x2, <span class="attr">ref</span> = <span class="number">0</span>x2,</span><br><span class="line">    <span class="attr">ast</span> = <span class="number">0</span>x2, <span class="attr">zv</span> = <span class="number">0</span>x2, <span class="attr">ptr</span> = <span class="number">0</span>x2, <span class="attr">ce</span> = <span class="number">0</span>x2, <span class="attr">func</span> = <span class="number">0</span>x2, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">2</span>, <span class="attr">w2</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">4</span> '\<span class="number">004</span>', <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">      <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">4</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>, <span class="attr">num_args</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">34650</span>zend_string *<span class="attr">str</span> = _zval_get_string_func(z);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34652</span><span class="keyword">if</span> (ZSTR_LEN(str) != <span class="number">0</span>) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34653</span>zend_write(ZSTR_VAL(str), ZSTR_LEN(str));</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">234657</span>zend_string_release(str);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34660</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">34661</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_JMP_SPEC_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">607</span></span><br><span class="line"><span class="number">607</span>ZEND_VM_SET_OPCODE(OP_JMP_ADDR(opline, opline-&gt;op1));</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)(opline-&gt;op1).jmp_offset))</span><br><span class="line">$<span class="number">51</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">608</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">609</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FETCH_R_SPEC_VAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">16708</span></span><br><span class="line"><span class="number">16708</span><span class="attr">array</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16709</span>SAVE_OPLINE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16710</span><span class="keyword">if</span> (EXPECTED(Z_TYPE_P(array) == IS_ARRAY)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16711</span><span class="attr">fe_ht</span> = Z_ARRVAL_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16712</span><span class="attr">pos</span> = Z_FE_POS_P(array);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16713</span><span class="attr">p</span> = fe_ht-&gt;arData + pos;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">52</span> = <span class="number">2</span></span><br><span class="line">(gdb) p p</span><br><span class="line">$<span class="number">53</span> = (Bucket *) <span class="number">0</span>x7ffff5e64980</span><br><span class="line">(gdb) p *p</span><br><span class="line">$<span class="number">54</span> = &#123;<span class="attr">val</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318898176</span>, <span class="attr">dval</span> = <span class="number">6.9533474355392798</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e64a00,</span><br><span class="line">      <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e64a00,</span><br><span class="line">      <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e64a00, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125510144</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">0</span> '\<span class="number">000</span>',</span><br><span class="line">        <span class="attr">type_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">0</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">0</span>, <span class="attr">cache_slot</span> = <span class="number">0</span>, <span class="attr">lineno</span> = <span class="number">0</span>,</span><br><span class="line">      <span class="attr">num_args</span> = <span class="number">0</span>, <span class="attr">fe_pos</span> = <span class="number">0</span>, <span class="attr">fe_iter_idx</span> = <span class="number">0</span>, <span class="attr">access_flags</span> = <span class="number">0</span>, <span class="attr">property_guard</span> = <span class="number">0</span>&#125;&#125;, <span class="attr">h</span> = <span class="number">1</span>, <span class="attr">key</span> = <span class="number">0</span>x32&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16715</span><span class="keyword">if</span> (UNEXPECTED(pos &gt;= fe_ht-&gt;nNumUsed)) &#123;</span><br><span class="line">(gdb) p pos</span><br><span class="line">$<span class="number">55</span> = <span class="number">2</span></span><br><span class="line">(gdb) p fe_ht-&gt;nNumUsed</span><br><span class="line">$<span class="number">56</span> = <span class="number">2</span></span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16717</span>goto fe_fetch_r_exit;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16852</span>ZEND_VM_SET_RELATIVE_OPCODE(opline, opline-&gt;extended_value);</span><br><span class="line">(gdb) p opline</span><br><span class="line">$<span class="number">57</span> = (const zend_op * volatile) <span class="number">0</span>x7ffff5e5fcc0</span><br><span class="line">(gdb) p *opline</span><br><span class="line">$<span class="number">58</span> = &#123;<span class="attr">handler</span> = <span class="number">0</span>x8d27fe &lt;ZEND_FE_FETCH_R_SPEC_VAR_HANDLER&gt;, <span class="attr">op1</span> = &#123;<span class="attr">constant</span> = <span class="number">144</span>, <span class="attr">var</span> = <span class="number">144</span>, <span class="attr">num</span> = <span class="number">144</span>, <span class="attr">opline_num</span> = <span class="number">144</span>,</span><br><span class="line">    <span class="attr">jmp_offset</span> = <span class="number">144</span>&#125;, <span class="attr">op2</span> = &#123;<span class="attr">constant</span> = <span class="number">96</span>, <span class="attr">var</span> = <span class="number">96</span>, <span class="attr">num</span> = <span class="number">96</span>, <span class="attr">opline_num</span> = <span class="number">96</span>, <span class="attr">jmp_offset</span> = <span class="number">96</span>&#125;, <span class="attr">result</span> = &#123;<span class="attr">constant</span> = <span class="number">160</span>, <span class="attr">var</span> = <span class="number">160</span>,</span><br><span class="line">    <span class="attr">num</span> = <span class="number">160</span>, <span class="attr">opline_num</span> = <span class="number">160</span>, <span class="attr">jmp_offset</span> = <span class="number">160</span>&#125;, <span class="attr">extended_value</span> = <span class="number">128</span>, <span class="attr">lineno</span> = <span class="number">3</span>, <span class="attr">opcode</span> = <span class="number">78</span> 'N', <span class="attr">op1_type</span> = <span class="number">4</span> '\<span class="number">004</span>',</span><br><span class="line">  <span class="attr">op2_type</span> = <span class="number">16</span> '\<span class="number">020</span>', <span class="attr">result_type</span> = <span class="number">2</span> '\<span class="number">002</span>'&#125;</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)opline-&gt;extended_value))</span><br><span class="line">$<span class="number">59</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fd40</span><br><span class="line">(gdb) p ((zend_op*)(((char*)(opline)) + (int)<span class="number">128</span>))</span><br><span class="line">$<span class="number">60</span> = (zend_op *) <span class="number">0</span>x7ffff5e5fd40</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">16853</span>ZEND_VM_CONTINUE();</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">16869</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_FE_FREE_SPEC_TMPVAR_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">51425</span></span><br><span class="line"><span class="number">51425</span>SAVE_OPLINE();</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51426</span><span class="attr">var</span> = EX_VAR(opline-&gt;op1.var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">51427</span><span class="keyword">if</span> (Z_TYPE_P(var) != IS_ARRAY &amp;&amp; Z_FE_ITER_P(var) != (uint32_t)-<span class="number">1</span>) &#123;</span><br><span class="line">(gdb) p var</span><br><span class="line">$<span class="number">61</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51430</span>zval_ptr_dtor_nogc(var);</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">51431</span>ZEND_VM_NEXT_OPCODE_CHECK_EXCEPTION();</span><br><span class="line">(gdb) p var</span><br><span class="line">$<span class="number">62</span> = (zval *) <span class="number">0</span>x7ffff5e140c0</span><br><span class="line">(gdb) p *var</span><br><span class="line">$<span class="number">63</span> = &#123;<span class="attr">value</span> = &#123;<span class="attr">lval</span> = <span class="number">140737318847520</span>, <span class="attr">dval</span> = <span class="number">6.9533474330365409</span>e-<span class="number">310</span>, <span class="attr">counted</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">str</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">arr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">obj</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">res</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ref</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ast</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">zv</span> = <span class="number">0</span>x7ffff5e58420,</span><br><span class="line">    <span class="attr">ptr</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ce</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">func</span> = <span class="number">0</span>x7ffff5e58420, <span class="attr">ww</span> = &#123;<span class="attr">w1</span> = <span class="number">4125459488</span>, <span class="attr">w2</span> = <span class="number">32767</span>&#125;&#125;, <span class="attr">u1</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a',</span><br><span class="line">      <span class="attr">type_flags</span> = <span class="number">28</span> '\<span class="number">034</span>', <span class="attr">const_flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">reserved</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">type_info</span> = <span class="number">7175</span>&#125;, <span class="attr">u2</span> = &#123;<span class="attr">next</span> = <span class="number">2</span>, <span class="attr">cache_slot</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="attr">lineno</span> = <span class="number">2</span>, <span class="attr">num_args</span> = <span class="number">2</span>, <span class="attr">fe_pos</span> = <span class="number">2</span>, <span class="attr">fe_iter_idx</span> = <span class="number">2</span>, <span class="attr">access_flags</span> = <span class="number">2</span>, <span class="attr">property_guard</span> = <span class="number">2</span>&#125;&#125;</span><br><span class="line">(gdb) p $<span class="number">63</span>.value.arr</span><br><span class="line">$<span class="number">64</span> = (zend_array *) <span class="number">0</span>x7ffff5e58420</span><br><span class="line">(gdb) p *$<span class="number">63</span>.value.arr</span><br><span class="line">$<span class="number">65</span> = &#123;<span class="attr">gc</span> = &#123;<span class="attr">refcount</span> = <span class="number">2</span>, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">type</span> = <span class="number">7</span> '\a', <span class="attr">flags</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">gc_info</span> = <span class="number">0</span>&#125;, <span class="attr">type_info</span> = <span class="number">7</span>&#125;&#125;, <span class="attr">u</span> = &#123;<span class="attr">v</span> = &#123;<span class="attr">flags</span> = <span class="number">30</span> '\<span class="number">036</span>',</span><br><span class="line">      <span class="attr">nApplyCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">nIteratorsCount</span> = <span class="number">0</span> '\<span class="number">000</span>', <span class="attr">consistency</span> = <span class="number">0</span> '\<span class="number">000</span>'&#125;, <span class="attr">flags</span> = <span class="number">30</span>&#125;, <span class="attr">nTableMask</span> = <span class="number">4294967294</span>,</span><br><span class="line">  <span class="attr">arData</span> = <span class="number">0</span>x7ffff5e5fa08, <span class="attr">nNumUsed</span> = <span class="number">2</span>, <span class="attr">nNumOfElements</span> = <span class="number">2</span>, <span class="attr">nTableSize</span> = <span class="number">8</span>, <span class="attr">nInternalPointer</span> = <span class="number">0</span>, <span class="attr">nNextFreeElement</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="attr">pDestructor</span> = <span class="number">0</span>x84d18f &lt;_zval_ptr_dtor_wrapper&gt;&#125;</span><br><span class="line">(gdb) n</span><br><span class="line"><span class="number">51432</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line">execute_ex (<span class="attr">ex=0x7ffff5e14030)</span> at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">430</span></span><br><span class="line"><span class="number">430</span><span class="keyword">if</span> (UNEXPECTED(!OPLINE)) &#123;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">453</span>&#125;</span><br><span class="line">(gdb)</span><br><span class="line"><span class="number">429</span>((opcode_handler_t)OPLINE-&gt;handler)(ZEND_OPCODE_HANDLER_ARGS_PASSTHRU);</span><br><span class="line">(gdb) s</span><br><span class="line">ZEND_RETURN_SPEC_CONST_HANDLER () at /root/php-<span class="number">7.1</span>.<span class="number">0</span>/Zend/zend_vm_execute.h:<span class="number">2858</span></span><br><span class="line"><span class="number">2858</span><span class="attr">retval_ptr</span> = EX_CONSTANT(opline-&gt;op1);</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;break-语法的AST、栈、符号表和指令集&quot;&gt;&lt;a href=&quot;#break-语法的AST、栈、符号表和指令集&quot; class=&quot;headerlink&quot; title=&quot;break 语法的AST、栈、符号表和指令集&quot;&gt;&lt;/a&gt;break 语法的AST、栈、符号表和指
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 代码的编译与执行</title>
    <link href="http://yulongphp.github.io/2018/12/30/php%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E5%92%8C%E6%89%A7%E8%A1%8C/"/>
    <id>http://yulongphp.github.io/2018/12/30/php代码的编译和执行/</id>
    <published>2018-12-30T04:56:19.000Z</published>
    <updated>2019-06-13T15:23:06.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解释型语言也需要编译吗？"><a href="#解释型语言也需要编译吗？" class="headerlink" title="解释型语言也需要编译吗？"></a>解释型语言也需要编译吗？</h3><p><img src="/images/language.png" alt=""></p><p>词法分析（正则表达式分割 找出token）</p><h3 id="词法分析入门-NFA-不确定有穷自动机"><a href="#词法分析入门-NFA-不确定有穷自动机" class="headerlink" title="词法分析入门-NFA(不确定有穷自动机)"></a>词法分析入门-NFA(不确定有穷自动机)</h3><p><img src="/images/word_nfa.png" alt=""></p><p>0, 1, 2  状态机中间状态(一个圈)<br>3        状态机最终状态(两个圈)</p><p>箭头和字母表示： 每个状态遇到不同的输入迁移到另一个状态</p><p>致命缺陷：状态0为不确定状态 可能会一直停在状态0<br>例如: abb 其实是满足正则表达式的  由于状态0处是不确定的 可能会出现如下情况<br>    0 遇到a 迁移到0 -&gt; 0遇到b 迁移到0 -&gt; 0遇到b 迁移到0  导致一直停留在0状态</p><h3 id="词法分析入门-DFA-确定有穷自动机"><a href="#词法分析入门-DFA-确定有穷自动机" class="headerlink" title="词法分析入门-DFA(确定有穷自动机)"></a>词法分析入门-DFA(确定有穷自动机)</h3><p><img src="/images/word_dfa.png" alt=""></p><p>对于PHP语言来说 要切分开所有token 可以想像需要大量正则表达式 而且正则表达式比较复杂<br>我们需要手动去编写DFA吗？<br>不需要, 有些工具比较完善的帮我们解决了这些事情 ： re2c</p><h3 id="使用re2c做词法分析"><a href="#使用re2c做词法分析" class="headerlink" title="使用re2c做词法分析"></a>使用re2c做词法分析</h3><p>安装re2c<br>官网 re2c.org<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/skvadrik/re2c/releases/download/<span class="number">1.1</span>.<span class="number">1</span>/re2c-<span class="number">1.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf re2c-<span class="number">1.1</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> re2c-<span class="number">1.1</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure></p><h3 id="实例：识别输入数字进制"><a href="#实例：识别输入数字进制" class="headerlink" title="实例：识别输入数字进制"></a>实例：识别输入数字进制</h3><p>编写文件 integer.l<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="keyword">enum</span> num_t &#123; <span class="type">ERR</span>, <span class="type">BIN</span>, <span class="type">OCT</span>, <span class="type">DEC</span>, <span class="type">HEX</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> num_t lex(<span class="keyword">const</span> <span class="built_in">char</span> *<span class="type">YYCURSOR</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">char</span> *<span class="type">YYMARKER</span>;</span><br><span class="line">    /*!re2c</span><br><span class="line">        re2c:define:<span class="type">YYCTYPE</span> = <span class="built_in">char</span>;</span><br><span class="line">        re2c:yyfill:enable = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span> = <span class="string">"\x00"</span>;</span><br><span class="line">        bin = '<span class="number">0</span>b'[<span class="number">01</span>]+;</span><br><span class="line">        oct = <span class="string">"0"</span>[<span class="number">0</span>-<span class="number">7</span>]*;</span><br><span class="line">        dec = [<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*;</span><br><span class="line">        hex = '<span class="number">0</span>x'[<span class="number">0</span>-<span class="number">9</span>a-fA-F]+;</span><br><span class="line">        *       &#123; <span class="keyword">return</span> <span class="type">ERR</span>; &#125;</span><br><span class="line">        bin <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">BIN</span>; &#125;</span><br><span class="line">        oct <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">OCT</span>; &#125;</span><br><span class="line">        dec <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">DEC</span>; &#125;</span><br><span class="line">        hex <span class="keyword">end</span> &#123; <span class="keyword">return</span> <span class="type">HEX</span>; &#125;</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, <span class="built_in">char</span> ** argv)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; argc; ++i) &#123;</span><br><span class="line">        switch (lex(argv[i])) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">ERR</span>: printf(<span class="string">"error\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">BIN</span>: printf(<span class="string">"binary\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">OCT</span>: printf(<span class="string">"octal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">DEC</span>: printf(<span class="string">"decimal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">HEX</span>: printf(<span class="string">"hexadecimal\n"</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转化为 <code>.c</code> 文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@yyl RE2C]</span># <span class="selector-tag">re2c</span> <span class="selector-tag">integer</span><span class="selector-class">.l</span> <span class="selector-tag">-o</span> <span class="selector-tag">integer</span><span class="selector-class">.c</span></span><br></pre></td></tr></table></figure></p><p>编译为可执行文件：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># g++ integer.c -o integer</span></span><br></pre></td></tr></table></figure></p><p>测试结果:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 0b10</span></span><br><span class="line"><span class="built_in">binary</span></span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 1024</span></span><br><span class="line">decimal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 0x100a</span></span><br><span class="line">hexadecimal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer 07</span></span><br><span class="line">octal</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta"># ./integer abc</span></span><br><span class="line">error</span><br><span class="line">[root<span class="symbol">@yyl</span> RE2C]<span class="meta">#</span></span><br></pre></td></tr></table></figure></p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>a = b + c * 2<br><img src="/images/word_tree.png" alt=""></p><h4 id="巴科斯范式"><a href="#巴科斯范式" class="headerlink" title="巴科斯范式"></a>巴科斯范式</h4><p><img src="/images/word_bksfs.png" alt=""></p><h4 id="使用bison做语法分析"><a href="#使用bison做语法分析" class="headerlink" title="使用bison做语法分析"></a>使用bison做语法分析</h4><p>官网：<a href="http://ftp.gnu.org/gnu/bison/" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/bison/</a></p><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//ftp.gnu.org/gnu/bison/bison-3.4.tar.gz</span></span><br><span class="line"></span><br><span class="line">tar -zxvf bison-<span class="number">3.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">cd bison-<span class="number">3.4</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p><code>./configure</code> 途中出现报错信息：<code>checking for GNU M4 that supports accurate traces... configure: error: no acceptable m4 could be found in $PATH.</code></p><p><code>yum install -y m4</code> 安装m4 问题解决。</p><p>继续：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></p><p>安装完毕！</p><h3 id="实战-：-计算器"><a href="#实战-：-计算器" class="headerlink" title="实战 ： 计算器"></a>实战 ： 计算器</h3><p>编写文件 <code>calc.y</code> 内容如下：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">%&#125;</span><br><span class="line"><span class="comment">/* BISON Declarations */</span></span><br><span class="line">%token NUM</span><br><span class="line">%left <span class="string">'-'</span> <span class="string">'+'</span></span><br><span class="line">%left <span class="string">'*'</span> <span class="string">'/'</span></span><br><span class="line">%left NEG     <span class="comment">/* negation--unary minus */</span></span><br><span class="line">%right <span class="string">'^'</span>    <span class="comment">/* exponentiation        */</span></span><br><span class="line"><span class="comment">/* Grammar follows */</span></span><br><span class="line">%%</span><br><span class="line">input:     <span class="comment">/*  empty string */</span></span><br><span class="line">                | input line</span><br><span class="line">;</span><br><span class="line">line:      <span class="string">'\n'</span></span><br><span class="line">            | <span class="keyword">exp</span>  <span class="string">'\n'</span>   &#123; printf (<span class="string">"\t%.10g\n"</span>, $1); &#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">exp</span>:       NUM                &#123; $$ = $1;           &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'+'</span> <span class="keyword">exp</span>         &#123; $$ = $1 + $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'-'</span> <span class="keyword">exp</span>         &#123; $$ = $1 - $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'*'</span> <span class="keyword">exp</span>         &#123; $$ = $1 * $3;      &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'/'</span> <span class="keyword">exp</span>         &#123; $$ = $1 / $3;      &#125;</span><br><span class="line">        | <span class="string">'-'</span> <span class="keyword">exp</span>  %prec NEG  &#123; $$ = -$2;          &#125;</span><br><span class="line">        | <span class="keyword">exp</span> <span class="string">'^'</span> <span class="keyword">exp</span>         &#123; $$ = <span class="keyword">pow</span> ($1, $3); &#125;</span><br><span class="line">        | <span class="string">'('</span> <span class="keyword">exp</span> <span class="string">')'</span>         &#123; $$ = $2;           &#125;</span><br><span class="line">;</span><br><span class="line">%%</span><br><span class="line">yylex ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="comment">/* skip white space */</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getchar ()) == <span class="string">' '</span> || c == <span class="string">'\t'</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="comment">/* process numbers  */</span></span><br><span class="line">    <span class="keyword">if</span> (c== <span class="string">'.'</span> || isdigit (c))</span><br><span class="line">    &#123;</span><br><span class="line">        ungetc (c, stdin);</span><br><span class="line">        scanf (<span class="string">"%lf"</span>, &amp;yylval);</span><br><span class="line">        <span class="keyword">return</span> NUM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* return end-of-file */</span></span><br><span class="line">    <span class="keyword">if</span> (c == EOF)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* return single chars */</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">yyerror (s) <span class="comment">/* Called by yyparse on error */</span></span><br><span class="line">    char *s;</span><br><span class="line">&#123;</span><br><span class="line">    printf(<span class="string">"%s\n"</span>, s);</span><br><span class="line">&#125;</span><br><span class="line">main ()</span><br><span class="line">&#123;</span><br><span class="line">    yyparse ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>转换为 <code>.c</code> 文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@yyl BASION]</span># <span class="selector-tag">bison</span> <span class="selector-tag">-d</span> <span class="selector-tag">calc</span><span class="selector-class">.y</span> <span class="selector-tag">-o</span> <span class="selector-tag">calc</span><span class="selector-class">.c</span></span><br></pre></td></tr></table></figure><p>编译为可执行文件：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@yyl</span> BASION]<span class="meta"># gcc -lm calc.c -o calc</span></span><br></pre></td></tr></table></figure></p><h3 id="php7中的词法分析和语法分析"><a href="#php7中的词法分析和语法分析" class="headerlink" title="php7中的词法分析和语法分析"></a>php7中的词法分析和语法分析</h3><p>Zend/zend_language_scanner.l<br>Zend/zens_language_parser.y</p><h3 id="AST-相关数据结构"><a href="#AST-相关数据结构" class="headerlink" title="AST 相关数据结构"></a>AST 相关数据结构</h3><p>_zend_ast<br>_zend_ast_list<br>_zend_ast_zval<br>_zend_ast_decl</p><p>zendParse-&gt;zendlex-&gt;switch(yyn)</p><h3 id="生成的AST"><a href="#生成的AST" class="headerlink" title="生成的AST"></a>生成的AST</h3><p>$a = 1 AST 语法树</p><p><img src="/images/ast_graph.png" alt=""></p><h3 id="Opcode相关的数据结构"><a href="#Opcode相关的数据结构" class="headerlink" title="Opcode相关的数据结构"></a>Opcode相关的数据结构</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">struct _zend_op &#123;</span><br><span class="line">const void *handler<span class="comment">;</span></span><br><span class="line">znode_op op1<span class="comment">;</span></span><br><span class="line">znode_op op2<span class="comment">;</span></span><br><span class="line">znode_op result<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">zend_uchar opcode<span class="comment">;</span></span><br><span class="line">zend_uchar op1_type<span class="comment">;</span></span><br><span class="line">zend_uchar op2_type<span class="comment">;</span></span><br><span class="line">zend_uchar result_type<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct _zend_op_array&#123;</span><br><span class="line">    ...</span><br><span class="line">    uint32_t last<span class="comment">;</span></span><br><span class="line">zend_op *opcodes<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int last_var<span class="comment">;</span></span><br><span class="line">uint32_t T<span class="comment">;</span></span><br><span class="line">zend_string **vars<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct _zend_execute_data &#123;</span><br><span class="line">    const zend_op       *opline<span class="comment">;           /* executed opline                */</span></span><br><span class="line">zend_execute_data   *call<span class="comment">;             /* current call                   */</span></span><br><span class="line">...</span><br><span class="line">zend_array          *symbol_table<span class="comment">;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line">struct _zend_vm_stack &#123;</span><br><span class="line">zval *top<span class="comment">;</span></span><br><span class="line">zval *end<span class="comment">;</span></span><br><span class="line">zend_vm_stack prev<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="zend虚拟机基础"><a href="#zend虚拟机基础" class="headerlink" title="zend虚拟机基础"></a>zend虚拟机基础</h3><p><img src="/images/zend.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解释型语言也需要编译吗？&quot;&gt;&lt;a href=&quot;#解释型语言也需要编译吗？&quot; class=&quot;headerlink&quot; title=&quot;解释型语言也需要编译吗？&quot;&gt;&lt;/a&gt;解释型语言也需要编译吗？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/language.png
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 7 生命周期</title>
    <link href="http://yulongphp.github.io/2018/12/28/php%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yulongphp.github.io/2018/12/28/php生命周期/</id>
    <published>2018-12-28T04:56:19.000Z</published>
    <updated>2019-06-06T04:15:40.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php生命周期"><a href="#php生命周期" class="headerlink" title="php生命周期"></a>php生命周期</h3><h3 id="cli生命周期"><a href="#cli生命周期" class="headerlink" title="cli生命周期"></a>cli生命周期</h3><p>定义：<img src="/images/cli_life.png" alt=""></p><h3 id="模块初始化部分函数调用图"><a href="#模块初始化部分函数调用图" class="headerlink" title="模块初始化部分函数调用图"></a>模块初始化部分函数调用图</h3><p><img src="/images/model_startup.png" alt=""></p><h3 id="php-request-startup-部分函数调用图"><a href="#php-request-startup-部分函数调用图" class="headerlink" title="php_request_startup 部分函数调用图"></a>php_request_startup 部分函数调用图</h3><ul><li>php_request_startup</li><li>php_output_activate      1. 重置输出全局并设置输出处理程序的堆栈</li><li>zend_activate<ul><li>gc_reset               2. 重置垃圾回收</li><li>init_compiler          3. 初始化编译器</li><li>init_executor          4. 初始化执行器</li><li>startup_scanner        5. 初始化扫描器</li></ul></li><li>sapi_activate            6. 调用sapi_module里面的activate方法</li><li>zend_signal_activate     7. 对信号进行处理（空函数）</li><li>zend_set_timeout         8. 设置超时时间</li><li>php_hash_environment     9. 初始化相关全局变量</li><li>zend_activate_modules    10. 调用request_startup_func激活模块</li></ul><h3 id="执行阶段调用"><a href="#执行阶段调用" class="headerlink" title="执行阶段调用"></a>执行阶段调用</h3><p><img src="/images/excutor_step.png" alt=""></p><h3 id="请求关闭阶段"><a href="#请求关闭阶段" class="headerlink" title="请求关闭阶段"></a>请求关闭阶段</h3><p><img src="/images/php_request_shutdown.png" alt=""></p><h3 id="模块关闭阶段"><a href="#模块关闭阶段" class="headerlink" title="模块关闭阶段"></a>模块关闭阶段</h3><p><img src="/images/model_shutdown.png" alt=""></p><h3 id="fpm的三种模式"><a href="#fpm的三种模式" class="headerlink" title="fpm的三种模式"></a>fpm的三种模式</h3><ul><li>pm=static (静态模式)  pm.max_children指定work子进程数量</li><li>pm=dynamic(动态模式)  wokr子进程数量是动态的 由pm.start_servers控制默认启动进程 最大子进程数量由 pm.max_children控制</li><li>pm=ondemand(按需要的) </li></ul><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><ul><li>socket</li><li>bind</li><li>listen</li><li>accept</li></ul><p>kill SIGUSR1 php-fpm  线上日志分割（重新持有日志文件句柄）</p><p>kill SIGUSR2 php-fpm    平滑重载所有work进程 重新载入配置文件 和 二进制文件   修改配置文件平滑重启 php平滑升级</p><p>kill -9 杀死php-fpm master进程  work进程依然能够提供服务<br>因为php-fpm master主进程只负责管理工作（监听work子进程挂掉以后 重新拉起work子进程），并不会处理请求<br>请求是有work进程直接处理的  所以强杀master进程 work进程依然能对外提供服务</p><p>master进程不会对外服务  只负责管理work进程</p><h3 id="fpm的生命周期"><a href="#fpm的生命周期" class="headerlink" title="fpm的生命周期"></a>fpm的生命周期</h3><p>fpm常驻内存进程</p><p><img src="/images/fpm_life.png" alt=""></p><p>504  nginx上游返回数据超过nginx设置的超时时间 nginx等不及了 就给客户端返回了504<br>502  连不上fpm 或者是fpm应为某种原因把链接断掉了 </p><h3 id="详解FastCGI协议"><a href="#详解FastCGI协议" class="headerlink" title="详解FastCGI协议"></a>详解FastCGI协议</h3><p><img src="/images/fastcgi.png" alt=""></p><p>fastcgi_in_out<br><img src="/images/fastcgi_in_out.png" alt=""></p><p>mac头<br>ip头<br>tcp头</p><p>_fcgi_header  contentlength + paddinglength 一定是8的倍数</p><p>抓包一次完整的fastcgi请求包<br><img src="/images/fast_cgi_dump.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i lo<span class="built_in"> port </span>9000 -XX -S</span><br></pre></td></tr></table></figure><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">14:01:44.495551 IP localhost.49472 &gt; localhost.cslistener: Flags [S], seq 1361465525, win 43690, options [mss 65495,sackOK,TS val 75365109 ecr 0,nop,wscale 7], length 0</span><br><span class="line">0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.</span><br><span class="line">0x0010:  003c aa40 4000 4006 9279 7f00 0001 7f00  .&lt;.@@.@..y......</span><br><span class="line">0x0020:  0001 c140 2328 5126 50b5 0000 0000 a002  ...@<span class="function"><span class="keyword">#</span><span class="params">(<span class="variable">Q</span>&amp;<span class="variable">P</span>.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  <span class="variable">aaaa</span> <span class="variable">fe30</span> 0000 0204 <span class="variable">ffd7</span> 0402 080<span class="variable">a</span> 047<span class="variable">d</span>  ...0...........&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf5</span> 0000 0000 0103 0307                 ..........</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495577 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">S</span>.], <span class="variable">seq</span> 3487476334, <span class="variable">ack</span> 1361465526, <span class="variable">win</span> 43690, <span class="variable">options</span> [<span class="variable">mss</span> 65495,<span class="variable">sackOK</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365109,<span class="variable">nop</span>,<span class="variable">wscale</span> 7], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  003<span class="variable">c</span> 0000 4000 4006 3<span class="variable">cba</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .&lt;..@.@.&lt;.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aa6e</span> 5126 50<span class="variable">b6</span> <span class="variable">a012</span>  ..#(.@...<span class="variable">nQ</span>&amp;<span class="variable">P</span>...</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  <span class="variable">aaaa</span> <span class="variable">fe30</span> 0000 0204 <span class="variable">ffd7</span> 0402 080<span class="variable">a</span> 047<span class="variable">d</span>  ...0...........&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 047<span class="variable">d</span> <span class="variable">faf5</span> 0103 0307                 ...&#125;......</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495593 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [.], <span class="variable">ack</span> 3487476335, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 <span class="variable">aa41</span> 4000 4006 9280 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4.<span class="variable">A</span>@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 50<span class="variable">b6</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 8010  ...@#(<span class="variable">Q</span>&amp;<span class="variable">P</span>....<span class="variable">o</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.495658 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [<span class="variable">P</span>.], <span class="variable">seq</span> 1361465526:1361466462, <span class="variable">ack</span> 3487476335, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365110 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 936</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  03<span class="variable">dc</span> <span class="variable">aa42</span> 4000 4006 8<span class="variable">ed7</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  ...<span class="variable">B</span>@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 50<span class="variable">b6</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 8018  ...@#(<span class="variable">Q</span>&amp;<span class="variable">P</span>....<span class="variable">o</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 01<span class="variable">d1</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.........&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 0101 0001 0008 0000 0001 0000 0000  ................</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0050</span>:  0000 0104 0001 0380 0000 0<span class="variable">f12</span> 5343 5249  ............<span class="variable">SCRI</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0060</span>:  5054 5<span class="variable">f46</span> 494<span class="variable">c</span> 454<span class="variable">e</span> 414<span class="variable">d</span> 452<span class="variable">f</span> 7661 722<span class="variable">f</span>  <span class="variable">PT_FILENAME</span>/<span class="variable">var</span>/</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0070</span>:  7777 772<span class="variable">f</span> 696<span class="variable">e</span> 6465 782<span class="variable">e</span> 7068 700<span class="variable">c</span> 0051  <span class="variable">www</span>/<span class="variable">index</span>.<span class="variable">php</span>..<span class="variable">Q</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0080</span>:  5545 5259 5<span class="variable">f53</span> 5452 494<span class="variable">e</span> 470<span class="variable">e</span> 0352 4551  <span class="variable">UERY_STRING</span>..<span class="variable">REQ</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0090</span>:  5545 5354 5<span class="variable">f4d</span> 4554 484<span class="variable">f</span> 4447 4554 0<span class="variable">c00</span>  <span class="variable">UEST_METHODGET</span>..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00a0</span>:  434<span class="variable">f</span> 4<span class="variable">e54</span> 454<span class="variable">e</span> 545<span class="variable">f</span> 5459 5045 0<span class="variable">e00</span> 434<span class="variable">f</span>  <span class="variable">CONTENT_TYPE</span>..<span class="variable">CO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00b0</span>:  4<span class="variable">e54</span> 454<span class="variable">e</span> 545<span class="variable">f</span> 4<span class="variable">c45</span> 4<span class="variable">e47</span> 5448 0<span class="variable">b0a</span> 5343  <span class="variable">NTENT_LENGTH</span>..<span class="variable">SC</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00c0</span>:  5249 5054 5<span class="variable">f4e</span> 414<span class="variable">d</span> 452<span class="variable">f</span> 696<span class="variable">e</span> 6465 782<span class="variable">e</span>  <span class="variable">RIPT_NAME</span>/<span class="variable">index</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00d0</span>:  7068 700<span class="variable">b</span> 0<span class="variable">a52</span> 4551 5545 5354 5<span class="variable">f55</span> 5249  <span class="variable">php</span>..<span class="variable">REQUEST_URI</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00e0</span>:  2<span class="variable">f69</span> 6<span class="variable">e64</span> 6578 2<span class="variable">e70</span> 6870 0<span class="variable">c0a</span> 444<span class="variable">f</span> 4355  /<span class="variable">index</span>.<span class="variable">php</span>..<span class="variable">DOCU</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00f0</span>:  4<span class="variable">d45</span> 4<span class="variable">e54</span> 5<span class="variable">f55</span> 5249 2<span class="variable">f69</span> 6<span class="variable">e64</span> 6578 2<span class="variable">e70</span>  <span class="variable">MENT_URI</span>/<span class="variable">index</span>.<span class="variable">p</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0100</span>:  6870 0<span class="variable">d08</span> 444<span class="variable">f</span> 4355 4<span class="variable">d45</span> 4<span class="variable">e54</span> 5<span class="variable">f52</span> 4<span class="variable">f4f</span>  <span class="variable">hp</span>..<span class="variable">DOCUMENT_ROO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0110</span>:  542<span class="variable">f</span> 7661 722<span class="variable">f</span> 7777 770<span class="variable">f</span> 0853 4552 5645  <span class="variable">T</span>/<span class="variable">var</span>/<span class="variable">www</span>..<span class="variable">SERVE</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0120</span>:  525<span class="variable">f</span> 5052 4<span class="variable">f54</span> 4<span class="variable">f43</span> 4<span class="variable">f4c</span> 4854 5450 2<span class="variable">f31</span>  <span class="variable">R_PROTOCOLHTTP</span>/1</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0130</span>:  2<span class="variable">e31</span> 0<span class="variable">e04</span> 5245 5155 4553 545<span class="variable">f</span> 5343 4845  .1..<span class="variable">REQUEST_SCHE</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0140</span>:  4<span class="variable">d45</span> 6874 7470 1107 4741 5445 5741 595<span class="variable">f</span>  <span class="variable">MEhttp</span>..<span class="variable">GATEWAY_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0150</span>:  494<span class="variable">e</span> 5445 5246 4143 4543 4749 2<span class="variable">f31</span> 2<span class="variable">e31</span>  <span class="variable">INTERFACECGI</span>/1.1</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0160</span>:  0<span class="variable">f0c</span> 5345 5256 4552 5<span class="variable">f53</span> 4<span class="variable">f46</span> 5457 4152  ..<span class="variable">SERVER_SOFTWAR</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0170</span>:  456<span class="variable">e</span> 6769 6<span class="variable">e78</span> 2<span class="variable">f31</span> 2<span class="variable">e31</span> 362<span class="variable">e</span> 300<span class="variable">b</span> 0<span class="variable">b52</span>  <span class="variable">Enginx</span>/1.16.0..<span class="variable">R</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0180</span>:  454<span class="variable">d</span> 4<span class="variable">f54</span> 455<span class="variable">f</span> 4144 4452 3130 2<span class="variable">e32</span> 3131  <span class="variable">EMOTE_ADDR10</span>.211</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0190</span>:  2<span class="variable">e35</span> 352<span class="variable">e</span> 320<span class="variable">b</span> 0552 454<span class="variable">d</span> 4<span class="variable">f54</span> 455<span class="variable">f</span> 504<span class="variable">f</span>  .55.2..<span class="variable">REMOTE_PO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01a0</span>:  5254 3634 3537 350<span class="variable">b</span> 0<span class="variable">c53</span> 4552 5645 525<span class="variable">f</span>  <span class="variable">RT64575</span>..<span class="variable">SERVER_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01b0</span>:  4144 4452 3130 2<span class="variable">e32</span> 3131 2<span class="variable">e35</span> 352<span class="variable">e</span> 3131  <span class="variable">ADDR10</span>.211.55.11</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01c0</span>:  0<span class="variable">b02</span> 5345 5256 4552 5<span class="variable">f50</span> 4<span class="variable">f52</span> 5438 300<span class="variable">b</span>  ..<span class="variable">SERVER_PORT80</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01d0</span>:  0953 4552 5645 525<span class="variable">f</span> 4<span class="variable">e41</span> 4<span class="variable">d45</span> 6<span class="variable">c6f</span> 6361  .<span class="variable">SERVER_NAMEloca</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01e0</span>:  6<span class="variable">c68</span> 6<span class="variable">f73</span> 740<span class="variable">f</span> 0352 4544 4952 4543 545<span class="variable">f</span>  <span class="variable">lhost</span>..<span class="variable">REDIRECT_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x01f0</span>:  5354 4154 5553 3230 3009 0<span class="variable">c48</span> 5454 505<span class="variable">f</span>  <span class="variable">STATUS200</span>..<span class="variable">HTTP_</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0200</span>:  484<span class="variable">f</span> 5354 3130 2<span class="variable">e32</span> 3131 2<span class="variable">e35</span> 352<span class="variable">e</span> 3131  <span class="variable">HOST10</span>.211.55.11</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0210</span>:  0<span class="variable">f0a</span> 4854 5450 5<span class="variable">f43</span> 4<span class="variable">f4e</span> 4<span class="variable">e45</span> 4354 494<span class="variable">f</span>  ..<span class="variable">HTTP_CONNECTIO</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0220</span>:  4<span class="variable">e6b</span> 6565 702<span class="variable">d</span> 616<span class="variable">c</span> 6976 650<span class="variable">b</span> 0848 5454  <span class="variable">Nkeep</span>-<span class="variable">alive</span>..<span class="variable">HTT</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0230</span>:  505<span class="variable">f</span> 5052 4147 4<span class="variable">d41</span> 6<span class="variable">e6f</span> 2<span class="variable">d63</span> 6163 6865  <span class="variable">P_PRAGMAno</span>-<span class="variable">cache</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0240</span>:  1208 4854 5450 5<span class="variable">f43</span> 4143 4845 5<span class="variable">f43</span> 4<span class="variable">f4e</span>  ..<span class="variable">HTTP_CACHE_CON</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0250</span>:  5452 4<span class="variable">f4c</span> 6<span class="variable">e6f</span> 2<span class="variable">d63</span> 6163 6865 1<span class="variable">e01</span> 4854  <span class="variable">TROLno</span>-<span class="variable">cache</span>..<span class="variable">HT</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0260</span>:  5450 5<span class="variable">f55</span> 5047 5241 4445 5<span class="variable">f49</span> 4<span class="variable">e53</span> 4543  <span class="variable">TP_UPGRADE_INSEC</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0270</span>:  5552 455<span class="variable">f</span> 5245 5155 4553 5453 310<span class="variable">f</span> 7948  <span class="variable">URE_REQUESTS1</span>.<span class="variable">yH</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0280</span>:  5454 505<span class="variable">f</span> 5553 4552 5<span class="variable">f41</span> 4745 4<span class="variable">e54</span> 4<span class="variable">d6f</span>  <span class="variable">TTP_USER_AGENTMo</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0290</span>:  7<span class="variable">a69</span> 6<span class="variable">c6c</span> 612<span class="variable">f</span> 352<span class="variable">e</span> 3020 284<span class="variable">d</span> 6163 696<span class="variable">e</span>  <span class="variable">zilla</span>/5.0.(<span class="variable">Macin</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x02a0</span>:  746<span class="variable">f</span> 7368 3<span class="variable">b20</span> 496<span class="variable">e</span> 7465 6<span class="variable">c20</span> 4<span class="variable">d61</span> 6320  <span class="variable">tosh</span>;.<span class="variable">Intel</span>.<span class="variable">Mac</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x02b0</span>:  4<span class="variable">f53</span> 2058 2031 305<span class="variable">f</span> 3133 5<span class="variable">f36</span> 2920 4170  <span class="variable">OS</span>.<span class="variable">X</span>.10<span class="variable">_13_6</span>)</span></span>.Ap</span><br><span class="line">0x02c0:  706c 6557 6562 4b69 742f 3533 372e 3336  pleWebKit/537.36</span><br><span class="line">0x02d0:  2028 4b48 544d 4c2c 206c 696b 6520 4765  .(KHTML,.like.Ge</span><br><span class="line">0x02e0:  636b 6f29 2043 6872 6f6d 652f 3734 2e30  cko).Chrome/74.0</span><br><span class="line">0x02f0:  2e33 3732 392e 3136 3920 5361 6661 7269  .3729.169.Safari</span><br><span class="line">0x0300:  2f35 3337 2e33 360b 7648 5454 505f 4143  /537.36.vHTTP_AC</span><br><span class="line">0x0310:  4345 5054 7465 7874 2f68 746d 6c2c 6170  CEPTtext/html,ap</span><br><span class="line">0x0320:  706c 6963 6174 696f 6e2f 7868 746d 6c2b  plication/xhtml+</span><br><span class="line">0x0330:  786d 6c2c 6170 706c 6963 6174 696f 6e2f  xml,application/</span><br><span class="line">0x0340:  786d 6c3b 713d 302e 392c 696d 6167 652f  xml;q=0.9,image/</span><br><span class="line">0x0350:  7765 6270 2c69 6d61 6765 2f61 706e 672c  webp,image/apng,</span><br><span class="line">0x0360:  2a2f 2a3b 713d 302e 382c 6170 706c 6963  */*;q=0.8,applic</span><br><span class="line">0x0370:  6174 696f 6e2f 7369 676e 6564 2d65 7863  ation/signed-exc</span><br><span class="line">0x0380:  6861 6e67 653b 763d 6233 140d 4854 5450  hange;v=b3..HTTP</span><br><span class="line">0x0390:  5f41 4343 4550 545f 454e 434f 4449 4e47  _ACCEPT_ENCODING</span><br><span class="line">0x03a0:  677a 6970 2c20 6465 666c 6174 6514 1748  gzip,.deflate..H</span><br><span class="line">0x03b0:  5454 505f 4143 4345 5054 5f4c 414e 4755  TTP_ACCEPT_LANGU</span><br><span class="line">0x03c0:  4147 457a 682d 434e 2c7a 683b 713d 302e  AGEzh-CN,zh;q=0.</span><br><span class="line">0x03d0:  392c 656e 3b71 3d30 2e38 0104 0001 0000  9,en;q=0.8......</span><br><span class="line">0x03e0:  0000 0105 0001 0000 0000                 ..........</span><br><span class="line">14:01:44.495667 IP localhost.cslistener &gt; localhost.49472: Flags [.], ack 1361466462, win 356, options [nop,nop,TS val 75365110 ecr 75365110], length 0</span><br><span class="line">0x0000:  0000 0000 0000 0000 0000 0000 0800 4500  ..............E.</span><br><span class="line">0x0010:  0034 5099 4000 4006 ec28 7f00 0001 7f00  .4P.@.@..(......</span><br><span class="line">0x0020:  0001 2328 c140 cfde aa6f 5126 545e 8010  ..<span class="function"><span class="keyword">#</span><span class="params">(.@...<span class="variable">oQ</span>&amp;<span class="variable">T</span>^..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0164 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf6</span> 047<span class="variable">d</span>  .<span class="variable">d</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498070 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">P</span>.], <span class="variable">seq</span> 3487476335:3487476439, <span class="variable">ack</span> 1361466462, <span class="variable">win</span> 356, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365110], <span class="variable">length</span> 104</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  009<span class="variable">c</span> 509<span class="variable">a</span> 4000 4006 <span class="variable">ebbf</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  ..<span class="variable">P</span>.@.@.........</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aa6f</span> 5126 545<span class="variable">e</span> 8018  ..#(.@...<span class="variable">oQ</span>&amp;<span class="variable">T</span>^..</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0164 <span class="variable">fe90</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf8</span> 047<span class="variable">d</span>  .<span class="variable">d</span>.........&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf6</span> 0106 0001 0050 0000 582<span class="variable">d</span> 506<span class="variable">f</span> 7765  .......<span class="variable">P</span>..<span class="variable">X</span>-<span class="variable">Powe</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0050</span>:  7265 642<span class="variable">d</span> 4279 3<span class="variable">a20</span> 5048 502<span class="variable">f</span> 372<span class="variable">e</span> 312<span class="variable">e</span>  <span class="variable">red</span>-<span class="variable">By</span>:.<span class="variable">PHP</span>/7.1.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0060</span>:  300<span class="variable">d</span> 0<span class="variable">a43</span> 6<span class="variable">f6e</span> 7465 6<span class="variable">e74</span> 2<span class="variable">d74</span> 7970 653<span class="variable">a</span>  0..<span class="variable">Content</span>-<span class="variable">type</span>:</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0070</span>:  2074 6578 742<span class="variable">f</span> 6874 6<span class="variable">d6c</span> 3<span class="variable">b20</span> 6368 6172  .<span class="variable">text</span>/<span class="variable">html</span>;.<span class="variable">char</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0080</span>:  7365 743<span class="variable">d</span> 5554 462<span class="variable">d</span> 380<span class="variable">d</span> 0<span class="variable">a0d</span> 0<span class="variable">a48</span> 656<span class="variable">c</span>  <span class="variable">set</span>=<span class="variable">UTF</span>-8....<span class="variable">Hel</span></span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0090</span>:  6<span class="variable">c6f</span> 2057 6<span class="variable">f72</span> 6<span class="variable">c64</span> 210<span class="variable">a</span> 0103 0001 0008  <span class="variable">lo</span>.<span class="variable">World</span>!.......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x00a0</span>:  0000 0000 0000 0000 0000                 ..........</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498088 <span class="variable">IP</span> <span class="variable">localhost</span>.49472 &gt; <span class="variable">localhost</span>.<span class="variable">cslistener</span>: <span class="variable">Flags</span> [.], <span class="variable">ack</span> 3487476439, <span class="variable">win</span> 342, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365112], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 <span class="variable">aa43</span> 4000 4006 927<span class="variable">e</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4.<span class="variable">C</span>@.@..~......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 <span class="variable">c140</span> 2328 5126 545<span class="variable">e</span> <span class="variable">cfde</span> <span class="variable">aad7</span> 8010  ...@#(<span class="variable">Q</span>&amp;<span class="variable">T</span>^......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0030</span>:  0156 <span class="variable">fe28</span> 0000 0101 080<span class="variable">a</span> 047<span class="variable">d</span> <span class="variable">faf8</span> 047<span class="variable">d</span>  .<span class="variable">V</span>.(.......&#125;...&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0040</span>:  <span class="variable">faf8</span>                                     ..</span></span></span><br><span class="line"><span class="function"><span class="params">14:01:44.498108 <span class="variable">IP</span> <span class="variable">localhost</span>.<span class="variable">cslistener</span> &gt; <span class="variable">localhost</span>.49472: <span class="variable">Flags</span> [<span class="variable">F</span>.], <span class="variable">seq</span> 3487476439, <span class="variable">ack</span> 1361466462, <span class="variable">win</span> 356, <span class="variable">options</span> [<span class="variable">nop</span>,<span class="variable">nop</span>,<span class="variable">TS</span> <span class="variable">val</span> 75365112 <span class="variable">ecr</span> 75365112], <span class="variable">length</span> 0</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0000</span>:  0000 0000 0000 0000 0000 0000 0800 4500  ..............<span class="variable">E</span>.</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0010</span>:  0034 509<span class="variable">b</span> 4000 4006 <span class="variable">ec26</span> 7<span class="variable">f00</span> 0001 7<span class="variable">f00</span>  .4<span class="variable">P</span>.@.@..&amp;......</span></span></span><br><span class="line"><span class="function"><span class="params">0<span class="variable">x0020</span>:  0001 2328 <span class="variable">c140</span> <span class="variable">cfde</span> <span class="variable">aad7</span> 5126</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;php生命周期&quot;&gt;&lt;a href=&quot;#php生命周期&quot; class=&quot;headerlink&quot; title=&quot;php生命周期&quot;&gt;&lt;/a&gt;php生命周期&lt;/h3&gt;&lt;h3 id=&quot;cli生命周期&quot;&gt;&lt;a href=&quot;#cli生命周期&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>php 7 新特性</title>
    <link href="http://yulongphp.github.io/2018/12/25/php7%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yulongphp.github.io/2018/12/25/php7新特性/</id>
    <published>2018-12-25T04:56:19.000Z</published>
    <updated>2019-05-24T08:33:25.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="太空船操作符-lt-gt"><a href="#太空船操作符-lt-gt" class="headerlink" title="太空船操作符 &lt;=&gt;"></a>太空船操作符 &lt;=&gt;</h3><p>太空船操作符用于比较两个表达式<br>例如 当$a小于、等于或大于$b时分别返回 -1、0、1<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span>&lt;=&gt;<span class="number">1</span>;  <span class="comment">// 0</span></span><br><span class="line">echo <span class="number">1</span>&lt;=&gt;<span class="number">2</span>;  <span class="comment">// -1</span></span><br><span class="line">echo <span class="number">2</span>&lt;=&gt;<span class="number">1</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">declare(strict_types = <span class="number">1</span>); <span class="comment">//strict_types = 1表示开启严格模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfInts</span><span class="params">(int <span class="rest_arg">...$ints</span>)</span>:int</span>&#123;</span><br><span class="line"><span class="keyword">return</span> array_sum($ints);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="null合并操作符"><a href="#null合并操作符" class="headerlink" title="null合并操作符"></a>null合并操作符</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]) ? $_GET[<span class="string">'page'</span>] : <span class="number">0</span>;</span><br><span class="line">$page = <span class="keyword">isset</span>($_GET[<span class="string">'page'</span>]) ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="常量数组"><a href="#常量数组" class="headerlink" title="常量数组"></a>常量数组</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">'ANIMALS'</span>,<span class="meta">[</span><span class="string">'dog'</span>,<span class="string">'cat'</span>,<span class="string">'bird'</span><span class="meta">]</span>); // 不可修改</span><br></pre></td></tr></table></figure><h3 id="namespace-批量导入"><a href="#namespace-批量导入" class="headerlink" title="namespace 批量导入"></a>namespace 批量导入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">Space</span>\&#123;ClassA, ClassB, ClassC <span class="keyword">as</span> C&#125;;</span><br></pre></td></tr></table></figure><h3 id="throwable接口"><a href="#throwable接口" class="headerlink" title="throwable接口"></a>throwable接口</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">undefindfunc();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Error $e)&#123;</span><br><span class="line">var_dump($e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set_exception_handler(</span><br><span class="line"><span class="keyword">function</span>($e)&#123;</span><br><span class="line">var_dump($e);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">undefindfunc();</span><br></pre></td></tr></table></figure><h3 id="Closure-call"><a href="#Closure-call" class="headerlink" title="Closure::call()"></a>Closure::call()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$f = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $f-&gt;call(<span class="keyword">new</span> Test);</span><br></pre></td></tr></table></figure><h3 id="intdiv-函数"><a href="#intdiv-函数" class="headerlink" title="intdiv 函数"></a>intdiv 函数</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">int</span>)(<span class="number">10/3</span>)<span class="comment">;</span></span><br><span class="line">intdiv(<span class="number">10</span>, <span class="number">3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="list-的方括号写法"><a href="#list-的方括号写法" class="headerlink" title="list 的方括号写法"></a>list 的方括号写法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">arr = [1, 2, 3];</span></span><br><span class="line"><span class="meta">list($</span><span class="bash">a, <span class="variable">$b</span>, <span class="variable">$c</span>) = <span class="variable">$arr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">[$</span><span class="bash">a, <span class="variable">$b</span>, <span class="variable">$c</span>] = <span class="variable">$arr</span>;</span></span><br></pre></td></tr></table></figure><h3 id="小而巧的zval"><a href="#小而巧的zval" class="headerlink" title="小而巧的zval"></a>小而巧的zval</h3><p>定义：<img src="/images/zval.png" alt=""></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">typedef union _zend_value &#123;</span><br><span class="line">zend_long         lval<span class="comment">;// 整型</span></span><br><span class="line">double            dval<span class="comment">;// 浮点型</span></span><br><span class="line">zend_refcounted  *counted<span class="comment">;</span></span><br><span class="line">zend_string      *str<span class="comment">;              // 字符串</span></span><br><span class="line">zend_array       *arr<span class="comment">;              // 数组</span></span><br><span class="line">zend_object      *obj<span class="comment">;              // 对象</span></span><br><span class="line">zend_resource    *res<span class="comment">;              // 资源</span></span><br><span class="line">zend_reference   *ref<span class="comment">;</span></span><br><span class="line">zend_ast_ref     *ast<span class="comment">;</span></span><br><span class="line">zval             *zv<span class="comment">;</span></span><br><span class="line">void             *ptr<span class="comment">;</span></span><br><span class="line">zend_class_entry *ce<span class="comment">;                // 类</span></span><br><span class="line">zend_function    *func<span class="comment">;              // 函数</span></span><br><span class="line">struct &#123;</span><br><span class="line">uint32_t w1<span class="comment">;</span></span><br><span class="line">uint32_t w2<span class="comment">;</span></span><br><span class="line">&#125; ww<span class="comment">;</span></span><br><span class="line">&#125; zend_value<span class="comment">;</span></span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ZEND_ENDIAN_LOHI_4(</span><br><span class="line">zend_uchar    <span class="keyword">type</span>,<span class="regexp">/* active type */</span></span><br><span class="line">zend_uchar    type_flags,</span><br><span class="line">zend_uchar    const_flags,</span><br><span class="line">zend_uchar    reserved)    /* call info <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">&#125; v;</span></span><br><span class="line"><span class="regexp">uint32_t type_info;</span></span><br><span class="line"><span class="regexp">&#125; u1;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">union &#123;</span></span><br><span class="line"><span class="regexp">uint32_t     next;                 /</span>* hash collision chain *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     cache_slot;           /</span>* literal cache slot *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     lineno;               /</span>* line number (<span class="keyword">for</span> ast nodes) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     num_args;             /</span>* arguments number <span class="keyword">for</span> EX(This) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_pos;               /</span>* foreach position *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     fe_iter_idx;          /</span>* foreach iterator index *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">uint32_t     access_flags;         /</span>* <span class="class"><span class="keyword">class</span> <span class="title">constant</span> <span class="title">access</span> <span class="title">flags</span> */</span></span><br><span class="line">uint32_t     property_guard;       <span class="regexp">/* single property guard */</span></span><br><span class="line">&#125; u2;</span><br></pre></td></tr></table></figure><p>php7.1  常量字符串refcount=0 type=6(zend_string) flags=2<br>        变量字符串refcount=1 type=6(zend_string) flags=0</p><h3 id="php7内存管理"><a href="#php7内存管理" class="headerlink" title="php7内存管理"></a>php7内存管理</h3><h4 id="从malloc谈起内存管理"><a href="#从malloc谈起内存管理" class="headerlink" title="从malloc谈起内存管理"></a>从malloc谈起内存管理</h4><p>void *ptr=malloc(size);<br>free(ptr);    // free的时候没有传size，怎么做到准确释放size大小内存的呢？</p><h4 id="malloc的实现"><a href="#malloc的实现" class="headerlink" title="malloc的实现"></a>malloc的实现</h4><p>定义：<img src="/images/malloc.png" alt=""></p><h4 id="php7内存接口"><a href="#php7内存接口" class="headerlink" title="php7内存接口"></a>php7内存接口</h4><p>void *ptr=_emalloc(size);<br>_efree(ptr);</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>定义：<img src="/images/basic_malloc.png" alt=""></p><p>内存规格</p><p>内存预分配：使用mmap分配chunk<br>内存分类：<br>    1、Small(30种规格)（size &lt;= 3KB）<br>    2、Large(3KB &lt; size &lt;= 2MB-4KB)<br>    3、Huge(size &gt; 2MB-4KB)</p><p>内存分配流程<br>定义：<img src="/images/malloc_step.png" alt=""></p><p>small内存<br>定义：<img src="/images/small_malloc.png" alt=""><br>定义：<img src="/images/small_malloc_01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;太空船操作符-lt-gt&quot;&gt;&lt;a href=&quot;#太空船操作符-lt-gt&quot; class=&quot;headerlink&quot; title=&quot;太空船操作符 &amp;lt;=&amp;gt;&quot;&gt;&lt;/a&gt;太空船操作符 &amp;lt;=&amp;gt;&lt;/h3&gt;&lt;p&gt;太空船操作符用于比较两个表达式&lt;br&gt;例如 
      
    
    </summary>
    
      <category term="php7" scheme="http://yulongphp.github.io/categories/php7/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="php7" scheme="http://yulongphp.github.io/tags/php7/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记二</title>
    <link href="http://yulongphp.github.io/2018/11/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://yulongphp.github.io/2018/11/24/docker学习笔记二/</id>
    <published>2018-11-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:49:06.799Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FROM-指定基础镜像"><a href="#FROM-指定基础镜像" class="headerlink" title="FROM 指定基础镜像"></a>FROM 指定基础镜像</h3><p>所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。<br><a id="more"></a></p><p>在 <a href="https://store.docker.com/" target="_blank" rel="noopener">Docker Store</a> 上有非常多的高质量的官方镜像，有可以直接拿来使用的服务类的镜像，如 <a href="https://store.docker.com/images/nginx/" target="_blank" rel="noopener">nginx</a>、<a href="https://store.docker.com/images/redis/" target="_blank" rel="noopener">redis</a>、<a href="https://store.docker.com/images/mongo/" target="_blank" rel="noopener">mongo</a>、<a href="https://store.docker.com/images/mysql/" target="_blank" rel="noopener">mysql</a>、<a href="https://store.docker.com/images/httpd/" target="_blank" rel="noopener">httpd</a>、<a href="https://store.docker.com/images/php/" target="_blank" rel="noopener">php</a>、<a href="https://store.docker.com/images/tomcat/" target="_blank" rel="noopener">tomcat</a> 等；也有一些方便开发、构建、运行各种语言应用的镜像，如 <a href="https://store.docker.com/images/node/" target="_blank" rel="noopener">node</a>、<a href="https://store.docker.com/images/openjdk/" target="_blank" rel="noopener">openjdk</a>、<a href="https://store.docker.com/images/pyhon/" target="_blank" rel="noopener">python</a>、<a href="https://store.docker.com/images/ruby/" target="_blank" rel="noopener">ruby</a>、<a href="https://store.docker.com/images/golang/" target="_blank" rel="noopener">golang</a> 等。可以在其中寻找一个最符合我们最终目标的镜像为基础镜像进行定制。</p><p>如果没有找到对应服务的镜像，官方镜像中还提供了一些更为基础的操作系统镜像，如 <a href="https://store.docker.com/images/ubuntu/" target="_blank" rel="noopener">ubuntu</a>、<a href="https://store.docker.com/images/debian/" target="_blank" rel="noopener">debian</a>、<a href="https://store.docker.com/images/centos/" target="_blank" rel="noopener">centos</a>、<a href="https://store.docker.com/images/fedora/" target="_blank" rel="noopener">fedora</a>、<a href="https://store.docker.com/images/alpine/" target="_blank" rel="noopener">alpine</a> 等，这些操作系统的软件库为我们提供了更广阔的扩展空间。</p><p>除了选择现有镜像为基础镜像外，Docker 还存在一个特殊的镜像，名为 scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure></p><p>如果你以 scratch 为基础镜像的话，意味着你不以任何镜像为基础，接下来所写的指令将作为镜像第一层开始存在。</p><p>不以任何系统为基础，直接将可执行文件复制进镜像的做法并不罕见，比如 swarm、coreos/etcd。对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧。使用 Go 语言 开发的应用很多会使用这种方式来制作镜像，这也是为什么有人认为 Go 是特别适合容器微服务架构的语言的原因之一。</p><h3 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h3><p>RUN 指令是用来执行命令行命令的。由于命令行的强大能力，RUN 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ul><li><p><em>shell 格式</em>：<code>RUN &lt;命令&gt;</code>，就像直接在命令行中输入的命令一样。刚才写的 Dockerfile 中的 RUN 指令就是这种格式。</p>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure></li><li><p><em>exec 格式</em>：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。<br>既然 RUN 就像 Shell 脚本一样可以执行命令，那么我们是否就可以像 Shell 脚本一样把每个命令对应一个 RUN 呢？比如这样：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> debian:jessie</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="bash">RUN apt-get install -y gcc libc6-dev make</span></span><br><span class="line"><span class="bash">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span></span></span><br><span class="line"><span class="bash">RUN mkdir -p /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis</span></span><br><span class="line"><span class="bash">RUN make -C /usr/src/redis install</span></span><br></pre></td></tr></table></figure></li></ul><p>之前说过，Dockerfile 中每一个指令都会建立一层，RUN 也不例外。每一个 RUN 的行为，就和刚才我们手工建立镜像的过程一样：新建立一层，在其上执行这些命令，执行结束后，commit 这一层的修改，构成新的镜像。</p><p>而上面的这种写法，创建了 7 层镜像。这是完全没有意义的，而且很多运行时不需要的东西，都被装进了镜像里，比如编译环境、更新的软件包等等。结果就是产生非常臃肿、非常多层的镜像，不仅仅增加了构建部署的时间，也很容易出错。 这是很多初学 Docker 的人常犯的一个错误。</p><p>Union FS 是有最大层数限制的，比如 AUFS，曾经是最大不得超过 42 层，现在是不得超过 127 层。</p><p>上面的 Dockerfile 正确的写法应该是这样：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:jessie</span><br><span class="line"></span><br><span class="line">RUN buildDeps=<span class="string">'gcc libc6-dev make'</span> \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y <span class="variable">$buildDeps</span> \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-3.2.5.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; mkdir -p <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; tar -xzf redis.tar.gz -C /u</span>sr<span class="regexp">/src/</span>redis --strip-components=<span class="number">1</span> \</span><br><span class="line">    &amp;&amp; make -C <span class="regexp">/usr/</span>src<span class="regexp">/redis \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; make -C /u</span>sr<span class="regexp">/src/</span>redis install \</span><br><span class="line">    &amp;&amp; rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm redis.tar.gz \</span></span><br><span class="line"><span class="regexp">    &amp;&amp; rm -r /u</span>sr<span class="regexp">/src/</span>redis \</span><br><span class="line">    &amp;&amp; apt-get purge -y --auto-remove <span class="variable">$buildDeps</span></span><br></pre></td></tr></table></figure></p><p>首先，之前所有的命令只有一个目的，就是编译、安装 redis 可执行文件。因此没有必要建立很多层，这只是一层的事情。因此，这里没有使用很多个 RUN 对一一对应不同的命令，而是仅仅使用一个 RUN 指令，并使用 &amp;&amp; 将各个所需命令串联起来。将之前的 7 层，简化为了 1 层。在撰写 Dockerfile 的时候，要经常提醒自己，这并不是在写 Shell 脚本，而是在定义每一层该如何构建。</p><p>并且，这里为了格式化还进行了换行。Dockerfile 支持 Shell 类的行尾添加 \ 的命令换行方式，以及行首 # 进行注释的格式。良好的格式，比如换行、缩进、注释等，会让维护、排障更为容易，这是一个比较好的习惯。</p><p>此外，还可以看到这一组命令的最后添加了清理工作的命令，删除了为了编译构建所需要的软件，清理了所有下载、展开的文件，并且还清理了 apt 缓存文件。这是很重要的一步，我们之前说过，镜像是多层存储，每一层的东西并不会在下一层被删除，会一直跟随着镜像。因此镜像构建时，一定要确保每一层只添加真正需要添加的东西，任何无关的东西都应该清理掉。</p><p>很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。</p><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>好了，让我们再回到之前定制的 nginx 镜像的 Dockerfile 来。现在我们明白了这个 Dockerfile 的内容，那么让我们来构建这个镜像吧。</p><p>在 Dockerfile 文件所在目录执行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t nginx:v3 .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Step 1 : FROM nginx</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e43d811ce2f4</span></span><br><span class="line">Step 2 : RUN echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9cdc27646c7b</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 44aa4490ce2c</span></span><br><span class="line">Removing intermediate container 9cdc27646c7b</span><br><span class="line">Successfully built 44aa4490ce2c</span><br></pre></td></tr></table></figure></p><p>从命令的输出结果中，我们可以清晰的看到镜像的构建过程。在 Step 2 中，如同我们之前所说的那样，RUN 指令启动了一个容器 9cdc27646c7b，执行了所要求的命令，并最后提交了这一层 44aa4490ce2c，随后删除了所用到的这个容器 9cdc27646c7b。</p><p>这里我们使用了 docker build 命令进行镜像构建。其格式为：<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build [选项] &lt;上下文路径<span class="regexp">/URL/</span><span class="function">-&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里我们指定了最终镜像的名称 -t nginx:v3，构建成功后，我们可以像之前运行 nginx:v2 那样来运行这个镜像，其结果会和 nginx:v2 一样。</p><h3 id="镜像构建上下文（Context）"><a href="#镜像构建上下文（Context）" class="headerlink" title="镜像构建上下文（Context）"></a>镜像构建上下文（Context）</h3><p>如果注意，会看到 docker build 命令最后有一个 .。. 表示当前目录，而 Dockerfile 就在当前目录，因此不少初学者以为这个路径是在指定 Dockerfile 所在路径，这么理解其实是不准确的。如果对应上面的命令格式，你可能会发现，这是在指定上下文路径。那么什么是上下文呢？</p><p>首先我们要理解 docker build 的工作原理。Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 Docker Remote API，而如 docker 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker 功能，但实际上，一切都是使用的远程调用形式在服务端（Docker 引擎）完成。也因为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p><p>当我们进行镜像构建的时候，并非所有定制都会通过 RUN 指令完成，经常会需要将一些本地文件复制进镜像，比如通过 COPY 指令、ADD 指令等。而 docker build 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。那么在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？</p><p>这就引入了上下文的概念。当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p>如果在 Dockerfile 中这么写：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./package.json /app/</span></span><br></pre></td></tr></table></figure></p><p>这并不是要复制执行 docker build 命令所在的目录下的 package.json，也不是复制 Dockerfile 所在目录下的 package.json，而是复制 上下文（context） 目录下的 package.json。</p><p>因此，COPY 这类指令中的源文件的路径都是相对路径。这也是初学者经常会问的为什么 <code>COPY ../package.json /app</code> 或者 <code>COPY /opt/xxxx /app</code> 无法工作的原因，因为这些路径已经超出了上下文的范围，Docker 引擎无法获得这些位置的文件。如果真的需要那些文件，应该将它们复制到上下文目录中去。</p><p>现在就可以理解刚才的命令 <code>docker build -t nginx:v3 .</code>中的这个 <code>.</code>，实际上是在指定上下文的目录，docker build 命令会将该目录下的内容打包交给 Docker 引擎以帮助构建镜像。</p><p>如果观察 docker build 输出，我们其实已经看到了这个发送上下文的过程：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">build </span>-t nginx:<span class="built_in">v3</span> .</span><br><span class="line"><span class="symbol">Sending</span> <span class="keyword">build </span>context to Docker daemon <span class="number">2</span>.<span class="number">048</span> kB</span><br><span class="line"><span class="symbol">...</span></span><br></pre></td></tr></table></figure></p><p>理解构建上下文对于镜像构建是很重要的，避免犯一些不应该的错误。比如有些初学者在发现 COPY /opt/xxxx /app 不工作后，于是干脆将 Dockerfile 放到了硬盘根目录去构建，结果发现 docker build 执行后，在发送一个几十 GB 的东西，极为缓慢而且很容易构建失败。那是因为这种做法是在让 docker build 打包整个硬盘，这显然是使用错误。</p><p>一般来说，应该会将 Dockerfile 置于一个空目录下，或者项目根目录下。如果该目录下没有所需文件，那么应该把所需文件复制一份过来。如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。</p><p>那么为什么会有人误以为 . 是指定 Dockerfile 所在目录呢？这是因为在默认情况下，如果不额外指定 Dockerfile 的话，会将上下文目录下的名为 Dockerfile 的文件作为 Dockerfile。</p><p>这只是默认行为，实际上 Dockerfile 的文件名并不要求必须为 Dockerfile，而且并不要求必须位于上下文目录中，比如可以用 -f ../Dockerfile.php 参数指定某个文件作为 Dockerfile。</p><p>当然，一般大家习惯性的会使用默认的文件名 Dockerfile，以及会将其置于镜像构建上下文目录中。</p><h3 id="其它-docker-build-的用法"><a href="#其它-docker-build-的用法" class="headerlink" title="其它 docker build 的用法"></a>其它 docker build 的用法</h3><p>直接用 Git repo 进行构建<br>或许你已经注意到了，docker build 还支持从 URL 构建，比如可以直接从 Git repo 中构建：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git#:<span class="number">8.14</span></span><br><span class="line">docker build http<span class="variable">s:</span>//github.<span class="keyword">com</span>/twang2218/gitlab-<span class="keyword">ce</span>-zh.git\#:<span class="number">8.14</span></span><br><span class="line">Sending build context <span class="keyword">to</span> Docker daemon <span class="number">2.048</span> kB</span><br><span class="line">Step <span class="number">1</span> : FROM gitlab/gitlab-<span class="keyword">ce</span>:<span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span></span><br><span class="line"><span class="number">8.14</span>.<span class="number">0</span>-<span class="keyword">ce</span>.<span class="number">0</span>: Pulling from gitlab/gitlab-<span class="keyword">ce</span></span><br><span class="line">aed15891ba52: Already <span class="built_in">exists</span></span><br><span class="line"><span class="number">773</span>ae8583d14: Already <span class="built_in">exists</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这行命令指定了构建所需的 Git repo，并且指定默认的 master 分支，构建目录为 /8.14/，然后 Docker 就会自己去 git clone 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p><h3 id="用给定的-tar-压缩包构建"><a href="#用给定的-tar-压缩包构建" class="headerlink" title="用给定的 tar 压缩包构建"></a>用给定的 tar 压缩包构建</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker build <span class="symbol">http:</span>/<span class="regexp">/server/context</span>.tar.gz</span><br></pre></td></tr></table></figure><p>如果所给出的 URL 不是个 Git repo，而是个 tar 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p><h3 id="从标准输入中读取-Dockerfile-进行构建"><a href="#从标准输入中读取-Dockerfile-进行构建" class="headerlink" title="从标准输入中读取 Dockerfile 进行构建"></a>从标准输入中读取 Dockerfile 进行构建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build - &lt; Dockerfile</span></span><br></pre></td></tr></table></figure><p>或<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat Dockerfile | docker build -</span></span><br></pre></td></tr></table></figure></p><p>如果标准输入传入的是文本文件，则将其视为 Dockerfile，并开始构建。这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 COPY 进镜像之类的事情。</p><h3 id="从标准输入中读取上下文压缩包进行构建"><a href="#从标准输入中读取上下文压缩包进行构建" class="headerlink" title="从标准输入中读取上下文压缩包进行构建"></a>从标准输入中读取上下文压缩包进行构建</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build - &lt; context<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>如果发现标准输入的文件格式是 gzip、bzip2 以及 xz 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p><h3 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h3><p>格式：</p><ul><li>COPY [–chown=<user>:<group>] &lt;源路径&gt;… &lt;目标路径&gt;</group></user></li><li>COPY [–chown=<user>:<group>] [“&lt;源路径1&gt;”,… “&lt;目标路径&gt;”]<br>和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</group></user></li></ul><p>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span> <span class="keyword">package</span>.json <span class="regexp">/usr/</span>src<span class="regexp">/app/</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener">filepath.Match</a> 规则，如：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> hom* /mydir/</span></span><br><span class="line"><span class="bash">COPY hom?.txt /mydir/</span></span><br></pre></td></tr></table></figure></p><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>在使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code>选项来改变文件的所属用户及所属组。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=55:mygroup files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=bin files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=1 files* /mydir/</span></span><br><span class="line"><span class="bash">COPY --chown=10:11 files* /mydir/</span></span><br></pre></td></tr></table></figure></p><h3 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h3><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code><br>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV <span class="attribute">VERSION</span>=1.0 <span class="attribute">DEBUG</span>=on \</span><br><span class="line">    <span class="attribute">NAME</span>=<span class="string">"Happy Feet"</span></span><br></pre></td></tr></table></figure></li></ul><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。</p><p>下列指令可以支持环境变量展开：<br> <code>ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD</code></p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p><h3 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h3><p><code>格式：ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p><p>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><p>在 1.13 之前的版本，要求 <code>--build-arg</code>中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 <code>--build-arg</code>指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FROM-指定基础镜像&quot;&gt;&lt;a href=&quot;#FROM-指定基础镜像&quot; class=&quot;headerlink&quot; title=&quot;FROM 指定基础镜像&quot;&gt;&lt;/a&gt;FROM 指定基础镜像&lt;/h3&gt;&lt;p&gt;所谓定制镜像，那一定是以一个镜像为基础，在其上进行定制。就像我们之前运行了一个 nginx 镜像的容器，再进行修改一样，基础镜像是必须指定的。而 FROM 就是指定基础镜像，因此一个 Dockerfile 中 FROM 是必备的指令，并且必须是第一条指令。&lt;br&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yulongphp.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yulongphp.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PHP 代码安全杂谈</title>
    <link href="http://yulongphp.github.io/2018/10/25/PHP%20%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E6%9D%82%E8%B0%88/"/>
    <id>http://yulongphp.github.io/2018/10/25/PHP 代码安全杂谈/</id>
    <published>2018-10-25T04:56:19.000Z</published>
    <updated>2019-02-27T11:42:11.889Z</updated>
    
    <content type="html"><![CDATA[<p>转载自: <a href="https://www.sqlsec.com/2018/01/php.html" target="_blank" rel="noopener">https://www.sqlsec.com/2018/01/php.html</a></p><blockquote><p>虽然 PHP 是世界上最好的语言, 但是也有一些因为弱类型语言的安全性问题出现。WordPress 历史上就出现过由于 PHP 本身的缺陷而造成的一些安全性问题，如 CVE-2014-0166 中的 cookie 伪造就是利用了 PHP Hash 比较的缺陷。 当然一般这种情况实战中用到的不是很多，但是在 CTF 竞赛中却是一个值得去考察的一个知识点，特此记录总结之。</p></blockquote><a id="more"></a><h3 id="精度绕过缺陷"><a href="#精度绕过缺陷" class="headerlink" title="精度绕过缺陷"></a>精度绕过缺陷</h3><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h4><p>在用 PHP 进行浮点数的运算中, 经常会出现一些和预期结果不一样的值，这是由于浮点数的精度有限。尽管取决于系统，PHP 通常使用 <code>IEEE 754</code>双精度格式，则由于取整而导致的最大相对误差为 <code>1.11e-16</code>。非基本数学运算可能会给出更大误差，并且要考虑到进行复合运算时的误差传递。<br>下面看一个有趣的例子:<br><img src="/images/15170501261023.png" alt=""></p><p>以十进制能够精确表示的有理数如 <code>0.1</code> 或 <code>0.7</code>，无论有多少尾数都不能被内部所使用的二进制精确表示，因此不能在不丢失一点点精度的情况下转换为二进制的格式。这就会造成混乱的结果：例如，<code>floor((0.1+0.7)*10)</code> 通常会返回 <code>7</code> 而不是预期中的 <code>8</code>，因为该结果内部的表示其实是类似 <code>7.9999999999999991118…</code>。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h5 id="问鼎杯-2017-老眼昏花"><a href="#问鼎杯-2017-老眼昏花" class="headerlink" title="问鼎杯 2017 老眼昏花"></a>问鼎杯 2017 老眼昏花</h5><p>网上很多 write-up 感觉就像是看着答案写 write-up，个人感觉真正的 write-up 中应该体现自己的思考在里面。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="/images/15170519199340.jpg" alt=""></p><p>题目言简意赅，让我们把<code>2017</code>这个值传递给服务器。</p><h3 id="考察点"><a href="#考察点" class="headerlink" title="考察点"></a>考察点</h3><ul><li>PHP 浮点精确度</li></ul><h4 id="write-up"><a href="#write-up" class="headerlink" title="write-up"></a>write-up</h4><p><code>what year is this?</code> 所以第一反应是直接给 <code>year</code> 参数赋值为<code>2017</code>:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">year</span>=2017</span><br></pre></td></tr></table></figure></p><p>然而结果如下：<br><img src="/images/15170520955165.jpg" alt=""></p><p>有提示了，说明<code>year</code>这个参数是对的，但是<code>2017</code>中不可以出现<code>7</code>，这里如果不了解 php 精度的话，肯定是对<code>2017</code>进行各种编码绕过, 但是这里对编码也进行过滤了：<br><img src="/images/15171915115543.png" alt=""></p><p>所以最后一种可能就是利用 PHP 精度来绕过:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">year</span>=2016.99999999999</span><br></pre></td></tr></table></figure></p><p><img src="/images/15170528059980.png" alt=""></p><h3 id="类型转换的缺陷"><a href="#类型转换的缺陷" class="headerlink" title="类型转换的缺陷"></a>类型转换的缺陷</h3><h4 id="理论-1"><a href="#理论-1" class="headerlink" title="理论"></a>理论</h4><p>PHP 提供了<code>is_numeric</code>函数，用来变量判断是否为数字。PHP 弱类型语言的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型 intval 数字化再比。</p><h4 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h4><p><code>is_numeric()</code>用于判断是否是数字，通常配合数值判断。</p><h4 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">    $flag = <span class="string">'flag&#123;1S_numer1c_Not_S4fe&#125;'</span>;</span></span><br><span class="line"><span class="php">    $id = $_GET[<span class="string">'id'</span>];</span></span><br><span class="line"><span class="php">    is_numeric($id)?<span class="keyword">die</span>(<span class="string">"Sorry...."</span>):<span class="keyword">NULL</span>;    </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($id&gt;<span class="number">665</span>)&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> $flag;</span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="考察点-1"><a href="#考察点-1" class="headerlink" title="考察点"></a>考察点</h4><ul><li>PHP 类型转换缺陷</li></ul><h4 id="write-up-1"><a href="#write-up-1" class="headerlink" title="write-up"></a>write-up</h4><p>分析下代码: 首先对 GET 方式提交的参数<code>id</code>的值进行检验。<code>id</code>通过<code>is_numeric</code>函数来判断是否为数字，如果为数字的话，GG。如果不是数字的话，和<code>665</code>进行比较，<code>id</code>的值大于<code>665</code>的时候输出<code>flag</code>。<br>乍看上去又好像不可能这里，但是如果知道<code>PHP弱类型语言的一个特性，当一个整形和一个其他类型行比较的时候，会先把其他类型intval数字化再比</code>。这个特性的话就可以很好的绕过。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost/?id=666gg</span></span><br></pre></td></tr></table></figure><p><img src="/images/15171303549975.png" alt=""></p><h3 id="松散比较符的缺陷"><a href="#松散比较符的缺陷" class="headerlink" title="松散比较符的缺陷"></a>松散比较符的缺陷</h3><h4 id="理论-2"><a href="#理论-2" class="headerlink" title="理论"></a>理论</h4><p>php 比较相等性的运算符有两种，一种是严格比较，另一种是松散比较。</p><blockquote><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p></blockquote><p><img src="/images/15167718268515.png" alt=""></p><h5 id="严格比较符"><a href="#严格比较符" class="headerlink" title="严格比较符"></a>严格比较符</h5><p>严格比较符，会先判断两种字符串的类型是否相等，再比较。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">===   //全等</span></span><br><span class="line">!==   //不全等</span><br></pre></td></tr></table></figure><p><img src="/images/15170583823430.png" alt=""></p><h5 id="松散比较符"><a href="#松散比较符" class="headerlink" title="松散比较符"></a>松散比较符</h5><p>松散比较符，会先将字符串类型转换成相同，再比较。<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">==   //等于</span></span><br><span class="line">!=   //不等</span><br></pre></td></tr></table></figure></p><p><img src="/images/15170583319162.png" alt=""></p><p>PHP 会根据变量的值，自动把变量转换为正确的数据类型。这一点和 C 和 C++ 以及 Java 之类的语言明显不同。虽然这样 PHP 方便了程序员，但是随之而来却会带来一些安全性的问题。</p><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $a = <span class="keyword">null</span>;</span></span><br><span class="line"><span class="php">    $b = <span class="keyword">false</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $a==$b;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span></span><br><span class="line"><span class="php">    $c = <span class="string">""</span>;</span></span><br><span class="line"><span class="php">    $d = <span class="number">0</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $c==$d</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>由于 php 对变量自动转换的特性，这里面的<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">a==<span class="variable">$b</span> 与 <span class="variable">$c</span>==<span class="variable">$d</span> 均为真</span></span><br></pre></td></tr></table></figure></p><p>所以页面输出的结果为:<br><img src="/images/15167004076555.png" alt=""></p><h4 id="一个深入的例子"><a href="#一个深入的例子" class="headerlink" title="一个深入的例子"></a>一个深入的例子</h4><p><img src="/images/15167738799137.png" alt=""></p><p>下面结合 PHP 相等性比较缺陷再解释下会好懂一点:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">0</span>==<span class="string">"gg"</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">0</span>===<span class="string">"gg"</span>); <span class="comment">//false</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"gg"</span>);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>0</code>与<code>gg</code>进行松散性质的不严格比较，会将<code>gg</code>转换为数值，强制转换，由于<code>gg</code>是字符串，转化的结果是<code>0</code>, 所以 输出 <code>true</code></p></blockquote><blockquote><p><code>0</code>与<code>gg</code>进行严格 性质的严格比较，这里的<code>gg</code>是字符串类型，和 <code>int</code> 类型的<code>0</code>不相等，所以输出 <code>false</code></p></blockquote><blockquote><p><code>0</code>与<code>gg</code>进行松散性质的不严格比较，会将<code>gg</code>转换为数值，强制转换，由于<code>gg</code>是字符串，转化的结果是<code>0</code>, 不等于<code>1</code>，所以输出 <code>false</code></p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"1gg"</span>); <span class="comment">//true </span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="number">1</span>==<span class="string">"gg1"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p><code>1</code>与<code>1gg</code>进行松散性质的不严格比较，这里<code>1gg</code>被强制转换为 <code>int</code> 类型的时候会从字符串的第一位开始做判断进行转换，这里的<code>1gg</code>第一位是<code>1</code>，所以这里<code>1gg</code>被转换为<code>1</code>，所以输出 <code>true</code></p></blockquote><blockquote><p><code>1</code>与<code>gg1</code>进行严格 性质的严格比较，字符串<code>gg1</code>的第一位不是数字，所以它被强制转换为<code>0</code>，所以输出 <code>false</code></p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var_dump</span>(<span class="string">"0e123"</span> == <span class="string">"0e456"</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="selector-tag">var_dump</span>(<span class="string">"0e123"</span> == <span class="string">"0eabc"</span>);  <span class="comment">//flase</span></span><br></pre></td></tr></table></figure><p>这里比较特殊，字符串中出现了<code>0e</code>，PHP 手册介绍如下:</p><blockquote><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p></blockquote><blockquote><p><code>0e123</code>与<code>0e456</code>相互不严格性质比较的时候，会将<code>0e</code>这类字符串识为科学技术法的数字,0 的无论多少次方都是零，所以相等, 输出 <code>true</code></p></blockquote><blockquote><p><code>0e123</code>与<code>0eabc</code>相互进行不严格性质比较的时候，本应该将<code>0e</code>这类字符串识为科学技术法的数字, 但是这里的<code>0e</code>后面跟着的是<code>abc</code>, 数学中科学计数的指数不可以包含字母。所以这里字符串中虽然是<code>0e</code>开头，但是后面的abc却不符合科学技法的规范，所以输出是 <code>false</code></p></blockquote><h3 id="实践-2"><a href="#实践-2" class="headerlink" title="实践"></a>实践</h3><h5 id="md5-绕过-Hash-比较缺陷"><a href="#md5-绕过-Hash-比较缺陷" class="headerlink" title="md5 绕过 (Hash 比较缺陷)"></a>md5 绕过 (Hash 比较缺陷)</h5><p>南京邮电大学网络攻防训练平台中一道比较经典的<code>md5 collision</code>题，关于这道题目的 WriteUp 网上很多，但是真正深入分析的少之又少~~</p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><h5 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h5><p>源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $md51 = md5(<span class="string">'QNKCDZO'</span>);</span></span><br><span class="line"><span class="php">    $a = @$_GET[<span class="string">'a'</span>];</span></span><br><span class="line"><span class="php">    $md52 = @md5($a);</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">isset</span>($a))&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> ($a != <span class="string">'QNKCDZO'</span> &amp;&amp; $md51 == $md52) &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"nctf&#123;*****************&#125;"</span>;</span></span><br><span class="line"><span class="php">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"false!!!"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">echo</span> <span class="string">"please input a"</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="考察点-2"><a href="#考察点-2" class="headerlink" title="考察点"></a>考察点</h3><ul><li>简单的 PHP 代码审计</li><li>PHP 弱类型的 Hash 比较缺陷</li></ul><h4 id="write-up-2"><a href="#write-up-2" class="headerlink" title="write-up"></a>write-up</h4><p>从源码中可以得输入一个 a 的参数的变量，a 首先不等于<code>QNKCDZO</code>并且 a 得 md5 值必须等于<code>QNKCDZO</code>加密后的 md5 值。<br>乍一看好像不可能存在这样的值，但是这里<code>QNKCDZO</code>加密后的 md5 值为<code>0e830400451993494058024219903391</code> 这里是<code>0e</code>开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。 所以这里利用上面的弱类型的比较的缺陷来进行解题：<code>?a=s155964671a</code></p><p><img src="/images/15167786802641.png" alt=""> </p><p>字符串加密后<code>md5</code>为 <code>0exxxx</code> 的字符串 (x 必须是 10 进制数字) 列表</p><p>|  字符串     |              md5<br>|QNKCDZO     | 0e830400451993494058024219903391|<br>|240610708   | 0e462097431906509019562988736854|<br>|aabg7XSs    | 0e087386482136013740957780965295|<br>|aabC9RqS    | 0e041022518165728065344349536299|<br>|s878926199a | 0e545993274517709034328855841020|<br>|s155964671a | 0e342768416822451524974117254469|<br>|s214587387a | 0e848240448830537924465865611904|<br>|s214587387a | 0e848240448830537924465865611904|<br>|s878926199a | 0e545993274517709034328855841020|<br>|s1091221200a| 0e940624217856561557816327384675|<br>|s1885207154a| 0e509367213418206700842008763514|</p><h3 id="sha1-md5-加密函数漏洞缺陷"><a href="#sha1-md5-加密函数漏洞缺陷" class="headerlink" title="sha1() md5() 加密函数漏洞缺陷"></a>sha1() md5() 加密函数漏洞缺陷</h3><h3 id="理论-3"><a href="#理论-3" class="headerlink" title="理论"></a>理论</h3><p><code>md5()</code>和<code>sha1()</code>对一个数组进行加密将返回 NULL</p><h3 id="实践-3"><a href="#实践-3" class="headerlink" title="实践"></a>实践</h3><p>Boston Key Party CTF 2015: Prudential</p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><blockquote><p>I dont think sha1 isbroken.Prove me wrong.</p></blockquote><p>题目给了一个登陆框:<br><img src="/images/15171202342826.png" alt=""></p><h3 id="考察点-3"><a href="#考察点-3" class="headerlink" title="考察点"></a>考察点</h3><ul><li>sha1() 函数漏洞缺陷</li></ul><h4 id="write-up-3"><a href="#write-up-3" class="headerlink" title="write-up"></a>write-up</h4><p>源代码给出如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>level1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'style.css'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span></span><br><span class="line"><span class="php">      <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'&lt;p class="alert"&gt;Invalid password.&lt;/p&gt;'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./index.txt"</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>分析一下核心登录代码如下:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'name'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Your password can not be your name.'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">'name'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span><br></pre></td></tr></table></figure><p><code>GET</code>类型提交了两个字段<code>name</code>和<code>password</code>，获得 flag 要求的条件是：</p><ul><li>name != password</li><li>sha1(name) == sha1(password)</li></ul><p>这个乍看起来这是不可能的，但是这里利用<code>sha1()</code>函数在处理数组的时候由于无法处理将返回<code>NULL</code>可以绕过 if 语句的验证，if 条件成立将获得<code>flag</code>。<br>构造语句如下:</p><blockquote><p>?name[]=a&amp;password[]=b</p></blockquote><p>这里符合了 2 个拿到 flag 的条件：</p><ul><li>a 不等于 b</li><li>name 和 password 由于是数组，经过 sha1() 函数嫁给后都返回<code>NULL</code></li></ul><p>拿到 flag： <code>I_think_that_I_just_broke_sha1</code></p><h3 id="拓展总结"><a href="#拓展总结" class="headerlink" title="拓展总结"></a>拓展总结</h3><p>经过验证，不仅<code>sha1()</code>函数无法处理数组，这里<code>md5()</code>函数也有同样的问题，在处理数组的时候，都将返回<code>NULL</code><br>测试代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">$flag = <span class="string">'flag&#123;I_think_that_I_just_broke_md5&#125;'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> ($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>])</span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Your password can not be your username.'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> <span class="keyword">if</span> (md5($_GET[<span class="string">'username'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>($flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'Invalid password'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里面的核心代码如下:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>])</span><br><span class="line"><span class="meta">#并且得满足:</span></span><br><span class="line"><span class="keyword">if</span> (md5($_GET[<span class="string">'username'</span>]) === sha1($_GET[<span class="string">'password'</span>]))</span><br></pre></td></tr></table></figure><p>同样利用 <code>md5()</code>函数无法处理数组的这个漏洞，构造 get 请求拿到 flag:</p><blockquote><p>?username[]=a&amp;password[]=b</p></blockquote><p><img src="/images/15171211572131.png" alt=""></p><h3 id="字符串处理函数漏洞缺陷"><a href="#字符串处理函数漏洞缺陷" class="headerlink" title="字符串处理函数漏洞缺陷"></a>字符串处理函数漏洞缺陷</h3><h3 id="理论-4"><a href="#理论-4" class="headerlink" title="理论"></a>理论</h3><ul><li><code>strcmp()</code>函数: 比较两个字符串（区分大小写).<br>用法如下:</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="keyword">strcmp</span> ( <span class="keyword">string</span> $str1 , <span class="keyword">string</span> $str2 )</span><br></pre></td></tr></table></figure><p>具体的用法解释如下:<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数 `str1`第一个字符串。</span><br><span class="line">参数 `str2`第二个字符串。</span><br><span class="line">如果 `str1` 小于 `str2` 返回 `&lt; <span class="number">0</span>`；</span><br><span class="line">如果 `str1` 大于 `str2` 返回 `&gt; <span class="number">0</span>`；</span><br><span class="line">如果两者相等，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure></p><p>这个函数接受到了不符合的类型，例如<code>数组</code>类型, 函数将发生错误。但是在<code>5.3</code>之前的 php 中，显示了报错的警告信息后，将<code>return 0</code> !!!! 也就是虽然报了错，但却判定其相等了。</p><ul><li><code>ereg()</code>函数：字符串正则匹配。</li><li><code>strpos()</code>函数：查找字符串在另一字符串中第一次出现的位置，对大小写敏感。</li></ul><p>这 2 个函数都是用来处理字符串的，但是在传入数组参数后都将返回<code>NULL</code>。</p><h3 id="实践-4"><a href="#实践-4" class="headerlink" title="实践"></a>实践</h3><p>Boston Key Party CTF 2015: Northeastern Univ</p><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>Of course, a timing attack might be the answer, but Im quite sure that you can do better than that.<br>题目给了一个登陆框:<br><img src="/images/15171245693910.png" alt=""></p><h3 id="考察点-4"><a href="#考察点-4" class="headerlink" title="考察点"></a>考察点</h3><ul><li>字符串处理函数漏洞缺陷</li></ul><h4 id="write-up-4"><a href="#write-up-4" class="headerlink" title="write-up"></a>write-up</h4><p>给出源代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>level3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'style.css'</span> <span class="attr">type</span>=<span class="string">'text/css'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">require</span> <span class="string">'flag.php'</span>;</span></span><br><span class="line"><span class="php"></span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (strcmp($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)</span></span><br><span class="line"><span class="php">        <span class="keyword">die</span>(<span class="string">'Flag: '</span>.$flag);</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        <span class="keyword">print</span> <span class="string">'&lt;p class="alert"&gt;Invalid password.&lt;/p&gt;'</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./index.txt"</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分析一下核心登录代码如下:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">strcmp</span>($_GET[<span class="string">'password'</span>], $flag) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>这里使用了<code>==</code>松散比较了<code>$flag</code>和通过 GET 方式提交的<code>password</code>的值，如果想等的话，拿到 flag。<br>这里用的是<code>==</code>松散性质的比较，再利用字符串处理数组时将会报错，在<code>5.3</code>之前的 php 中，显示了报错的警告信息后，将<code>return 0</code>。所有这里将<code>password</code>参数指定为数组, 利用函数漏洞拿到<code>flag</code>:<br><img src="/images/15171263473948.png" alt=""> </p><h3 id="拓展总结-1"><a href="#拓展总结-1" class="headerlink" title="拓展总结"></a>拓展总结</h3><p>除了<code>strcmp()</code>函数外，<code>ereg()</code>和<code>strpos()</code>函数在处理数组的时候也会异常，返回<code>NULL</code>。<br>测试代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    error_reporting(<span class="number">0</span>);</span></span><br><span class="line"><span class="php">    $flag = <span class="string">'flag&#123;P@ssw0rd_1s_n0t_s4fe_By_d0uble_Equ4ls&#125;'</span>;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (<span class="keyword">isset</span> ($_GET[<span class="string">'password'</span>])) &#123;  </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (ereg (<span class="string">"^[a-zA-Z0-9]+$"</span>, $_GET[<span class="string">'password'</span>]) === <span class="keyword">FALSE</span>)  </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">'You password must be alphanumeric'</span>;  </span></span><br><span class="line"><span class="php">        <span class="keyword">else</span> <span class="keyword">if</span> (strpos ($_GET[<span class="string">'password'</span>], <span class="string">'--'</span>) !== <span class="keyword">FALSE</span>)  </span></span><br><span class="line"><span class="php">            <span class="keyword">die</span>($flag);  </span></span><br><span class="line"><span class="php">        <span class="keyword">else</span>  </span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">'Invalid password'</span>;  </span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>将参数 password 赋值一个数组传递进去：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://localhost/?password</span>[<span class="string"></span>]=gg</span><br></pre></td></tr></table></figure><p><code>ereg()函数</code> 是处理字符串的，传入数组后返回<code>NULL</code>，<code>NULL</code>和 <code>FALSE</code>，是不恒等（===）的，满足第一个<code>if</code>条件；而<code>strpos()函数</code>也是处理字符串的，传入数组后返回<code>NULL</code>，<code>NULL!==FALSE</code>，满足条件，拿到 flag:<br><img src="/images/15171277886030.png" alt=""> </p><h3 id="parse-str-函数变量覆盖缺陷"><a href="#parse-str-函数变量覆盖缺陷" class="headerlink" title="parse_str 函数变量覆盖缺陷"></a>parse_str 函数变量覆盖缺陷</h3><h3 id="理论-5"><a href="#理论-5" class="headerlink" title="理论"></a>理论</h3><p><code>parse_str</code> 函数的作用就是解析字符串并注册成变量，在注册变量之前不会验证当前变量是否存在，所以直接覆盖掉已有变量。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void parse_str ( string $str [,<span class="built_in"> array </span>&amp;$arr ] )</span><br></pre></td></tr></table></figure><p>str 输入的字符串。<br>arr 如果设置了第二个变量 arr，变量将会以数组元素的形式存入到这个数组，作为替代。</p><h3 id="实践-5"><a href="#实践-5" class="headerlink" title="实践"></a>实践</h3><p>测试代码:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">'flag&#123;V4ri4ble_M4y_Be_C0verEd&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span> (empty(<span class="variable">$_GET</span>[<span class="string">'b'</span>])) &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    die();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="string">"www.sqlsec.com"</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">'b'</span>];</span><br><span class="line">    @parse_str(<span class="variable">$b</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span>[<span class="number">0</span>] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5(<span class="variable">$a</span>[<span class="number">0</span>]) == md5(<span class="string">'QNKCDZO'</span>)) &#123;</span><br><span class="line">        echo <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'your answer is wrong~'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="考察点-5"><a href="#考察点-5" class="headerlink" title="考察点"></a>考察点</h3><ul><li>parse_str 变量覆盖缺陷</li></ul><h3 id="write-up-5"><a href="#write-up-5" class="headerlink" title="write-up"></a>write-up</h3><p>找到核心代码:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">@parse_str</span>($b)<span class="comment">;</span></span><br><span class="line"><span class="meta">#这里使用了parse_str函数来传递b的变量值</span></span><br><span class="line"><span class="keyword">if</span> ($a[0] != <span class="string">'QNKCDZO'</span> &amp;&amp; md5($a[0]) == md5(<span class="string">'QNKCDZO'</span>))</span><br><span class="line"><span class="meta">#这里用到的是文章上面的知识点md5()函数缺陷</span></span><br></pre></td></tr></table></figure><p>因为这里用到了<code>parse_str</code>函数来传递<code>b</code>，if 的语句的条件是拿<code>$a[0]</code>来比较的，有因为这里的变量 a 的值已经三是固定的了:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">a = <span class="string">"www.sqlsec.com"</span>;</span></span><br></pre></td></tr></table></figure><p>这里其实是我博客的地址~~ 不过不重要。<br>整体代码乍看起来又不可能，但是利用变量覆盖函数的缺陷这里可以对<code>a</code>的变量进行重新赋值，后面的的 if 语句再利用本文前面提到的<code>md5()</code>比较缺陷进行绕过:<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="link">http://localhost/?b=a</span>[<span class="string">0</span>]=240610708</span><br></pre></td></tr></table></figure></p><p><img src="/images/15171333801974.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自: &lt;a href=&quot;https://www.sqlsec.com/2018/01/php.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sqlsec.com/2018/01/php.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 PHP 是世界上最好的语言, 但是也有一些因为弱类型语言的安全性问题出现。WordPress 历史上就出现过由于 PHP 本身的缺陷而造成的一些安全性问题，如 CVE-2014-0166 中的 cookie 伪造就是利用了 PHP Hash 比较的缺陷。 当然一般这种情况实战中用到的不是很多，但是在 CTF 竞赛中却是一个值得去考察的一个知识点，特此记录总结之。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="php" scheme="http://yulongphp.github.io/categories/php/"/>
    
    
      <category term="php" scheme="http://yulongphp.github.io/tags/php/"/>
    
      <category term="安全" scheme="http://yulongphp.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://yulongphp.github.io/2018/10/24/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yulongphp.github.io/2018/10/24/docker学习笔记/</id>
    <published>2018-10-24T09:29:35.000Z</published>
    <updated>2019-01-02T09:58:20.907Z</updated>
    
    <content type="html"><![CDATA[<h3 id="docker-service-operate"><a href="#docker-service-operate" class="headerlink" title="docker service operate"></a>docker service operate</h3><p><code>systemctl start|stop|restart|status  docker</code></p><h3 id="List-Docker-CLI-commands"><a href="#List-Docker-CLI-commands" class="headerlink" title="List Docker CLI commands"></a>List Docker CLI commands</h3><p><code>docker</code><br><code>docker container --help</code></p><h3 id="Display-Docker-version-and-info"><a href="#Display-Docker-version-and-info" class="headerlink" title="Display Docker version and info"></a>Display Docker version and info</h3><p><code>docker --version</code><br><code>docker version</code><br><code>docker info</code></p><h3 id="Execute-Docker-image"><a href="#Execute-Docker-image" class="headerlink" title="Execute Docker image"></a>Execute Docker image</h3><p><code>docker run hello-world</code></p><h3 id="List-Docker-images"><a href="#List-Docker-images" class="headerlink" title="List Docker images"></a>List Docker images</h3><p><code>docker image ls</code></p><h3 id="List-Docker-containers-running-all-all-in-quiet-mode"><a href="#List-Docker-containers-running-all-all-in-quiet-mode" class="headerlink" title="List Docker containers (running, all, all in quiet mode)"></a>List Docker containers (running, all, all in quiet mode)</h3><p><code>docker container ls</code><br><code>docker container ls --all</code><br><code>docker container ls -aq</code></p><h3 id="Create-image-using-this-directory’s-Dockerfile"><a href="#Create-image-using-this-directory’s-Dockerfile" class="headerlink" title="Create image using this directory’s Dockerfile"></a>Create image using this directory’s Dockerfile</h3><p><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code><br><code>docker build -t friendlyhello .</code></p><h3 id="Run-“friendlyname”-mapping-port-4000-to-80"><a href="#Run-“friendlyname”-mapping-port-4000-to-80" class="headerlink" title="Run “friendlyname” mapping port 4000 to 80"></a>Run “friendlyname” mapping port 4000 to 80</h3><p><code>docker run -p 4000:80 friendlyhello</code> </p><h3 id="Same-thing-but-in-detached-mode"><a href="#Same-thing-but-in-detached-mode" class="headerlink" title="Same thing, but in detached mode"></a>Same thing, but in detached mode</h3><p><code>docker run -d -p 4000:80 friendlyhello</code>      </p><h3 id="List-all-running-containers"><a href="#List-all-running-containers" class="headerlink" title="List all running containers"></a>List all running containers</h3><p><code>docker container ls</code>                              </p><h3 id="List-all-containers-even-those-not-running"><a href="#List-all-containers-even-those-not-running" class="headerlink" title="List all containers, even those not running"></a>List all containers, even those not running</h3><p><code>docker container ls -a</code>            </p><h3 id="Gracefully-stop-the-specified-container"><a href="#Gracefully-stop-the-specified-container" class="headerlink" title="Gracefully stop the specified container"></a>Gracefully stop the specified container</h3><p><code>docker container stop &lt;hash&gt;</code>         </p><h3 id="Force-shutdown-of-the-specified-container"><a href="#Force-shutdown-of-the-specified-container" class="headerlink" title="Force shutdown of the specified container"></a>Force shutdown of the specified container</h3><p><code>docker container kill &lt;hash&gt;</code>        </p><h3 id="Remove-specified-container-from-this-machine"><a href="#Remove-specified-container-from-this-machine" class="headerlink" title="Remove specified container from this machine"></a>Remove specified container from this machine</h3><p><code>docker container rm &lt;hash&gt;</code>       </p><h3 id="Remove-all-containers"><a href="#Remove-all-containers" class="headerlink" title="Remove all containers"></a>Remove all containers</h3><p><code>docker container rm $(docker container ls -a -q)</code>       </p><h3 id="List-all-images-on-this-machine"><a href="#List-all-images-on-this-machine" class="headerlink" title="List all images on this machine"></a>List all images on this machine</h3><p><code>docker image ls -a</code>                           </p><h3 id="Remove-specified-image-from-this-machine"><a href="#Remove-specified-image-from-this-machine" class="headerlink" title="Remove specified image from this machine"></a>Remove specified image from this machine</h3><p><code>docker image rm &lt;image id&gt;</code>           </p><h3 id="Remove-all-images-from-this-machine"><a href="#Remove-all-images-from-this-machine" class="headerlink" title="Remove all images from this machine"></a>Remove all images from this machine</h3><p><code>docker image rm $(docker image ls -a -q)</code></p><h3 id="Log-in-this-CLI-session-using-your-Docker-credentials"><a href="#Log-in-this-CLI-session-using-your-Docker-credentials" class="headerlink" title="Log in this CLI session using your Docker credentials"></a>Log in this CLI session using your Docker credentials</h3><p><code>docker login</code>            </p><h3 id="Tag-for-upload-to-registry"><a href="#Tag-for-upload-to-registry" class="headerlink" title="Tag  for upload to registry"></a>Tag <image> for upload to registry</image></h3><p><code>docker tag &lt;image&gt; username/repository:tag</code></p><h3 id="Upload-tagged-image-to-registry"><a href="#Upload-tagged-image-to-registry" class="headerlink" title="Upload tagged image to registry"></a>Upload tagged image to registry</h3><p><code>docker push username/repository:tag</code>         </p><h3 id="Run-image-from-a-registry"><a href="#Run-image-from-a-registry" class="headerlink" title="Run image from a registry"></a>Run image from a registry</h3><p><code>docker run username/repository:tag</code>                 </p><h3 id="List-stacks-or-apps"><a href="#List-stacks-or-apps" class="headerlink" title="List stacks or apps"></a>List stacks or apps</h3><p><code>docker stack ls</code>                                        </p><h3 id="Run-the-specified-Compose-file"><a href="#Run-the-specified-Compose-file" class="headerlink" title="Run the specified Compose file"></a>Run the specified Compose file</h3><p><code>docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;</code> </p><h3 id="List-running-services-associated-with-an-app"><a href="#List-running-services-associated-with-an-app" class="headerlink" title="List running services associated with an app"></a>List running services associated with an app</h3><p><code>docker service ls</code>                </p><h3 id="List-tasks-associated-with-an-app"><a href="#List-tasks-associated-with-an-app" class="headerlink" title="List tasks associated with an app"></a>List tasks associated with an app</h3><p><code>docker service ps &lt;service&gt;</code>                 </p><h3 id="Inspect-task-or-container"><a href="#Inspect-task-or-container" class="headerlink" title="Inspect task or container"></a>Inspect task or container</h3><p><code>docker inspect &lt;task or container&gt;</code>                  </p><h3 id="List-container-IDs"><a href="#List-container-IDs" class="headerlink" title="List container IDs"></a>List container IDs</h3><p><code>docker container ls -q</code>                                    </p><h3 id="Tear-down-an-application"><a href="#Tear-down-an-application" class="headerlink" title="Tear down an application"></a>Tear down an application</h3><p><code>docker stack rm &lt;appname&gt;</code>                          </p><h3 id="Take-down-a-single-node-swarm-from-the-manager"><a href="#Take-down-a-single-node-swarm-from-the-manager" class="headerlink" title="Take down a single node swarm from the manager"></a>Take down a single node swarm from the manager</h3><p><code>docker swarm leave --force</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;docker-service-operate&quot;&gt;&lt;a href=&quot;#docker-service-operate&quot; class=&quot;headerlink&quot; title=&quot;docker service operate&quot;&gt;&lt;/a&gt;docker service opera
      
    
    </summary>
    
      <category term="docker" scheme="http://yulongphp.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yulongphp.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Github上开源的安全渗透攻击类工具集合</title>
    <link href="http://yulongphp.github.io/2018/08/24/hack_tools_assm/"/>
    <id>http://yulongphp.github.io/2018/08/24/hack_tools_assm/</id>
    <published>2018-08-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:56:31.242Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/yylingyao/p/8997607.html" target="_blank" rel="noopener">https://www.cnblogs.com/yylingyao/p/8997607.html</a></p><blockquote><p>本工具包收集的初衷是向各类行业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的各种开源或非开源安全扫描工具，以帮助安全从业人员对自身业务进行自检，从而提高安全性。</p></blockquote><p>免责说明<br>请勿用于非法的用途，否则造成的严重后果与本项目无关</p><a id="more"></a><h3 id="漏洞及渗透练习平台："><a href="#漏洞及渗透练习平台：" class="headerlink" title="漏洞及渗透练习平台："></a>漏洞及渗透练习平台：</h3><ul><li><a href="https://github.com/710leo/ZVulDrill" target="_blank" rel="noopener">https://github.com/710leo/ZVulDrill</a> (ZVulDrill )</li><li><a href="https://github.com/cliffe/secgen" target="_blank" rel="noopener">https://github.com/cliffe/secgen</a> (SecGen Ruby编写的一款工具，生成含漏洞的虚拟机)</li><li><a href="https://github.com/CSPF-Founder/btslab" target="_blank" rel="noopener">https://github.com/CSPF-Founder/btslab</a>  (btslab渗透测试实验室)</li><li><a href="https://github.com/WebGoat/WebGoat" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat</a> (WebGoat漏洞练习环境)</li><li><a href="https://github.com/WebGoat/WebGoat-Legacy" target="_blank" rel="noopener">https://github.com/WebGoat/WebGoat-Legacy</a> (WebGoat漏洞练习环境)</li><li><a href="https://github.com/RandomStorm/DVWA" target="_blank" rel="noopener">https://github.com/RandomStorm/DVWA</a> (Damn Vulnerable Web Application(漏洞练习平台))</li><li><a href="https://github.com/stamparm/DSVW" target="_blank" rel="noopener">https://github.com/stamparm/DSVW</a> (轻量网漏洞演示平台)</li><li><a href="https://github.com/joe-shenouda/awesome-cyber-skills" target="_blank" rel="noopener">https://github.com/joe-shenouda/awesome-cyber-skills</a> (黑客技术训练环境)</li><li><a href="https://github.com/OWASP/SecurityShepherd" target="_blank" rel="noopener">https://github.com/OWASP/SecurityShepherd</a> (网络及应用渗透训练平台)</li><li><a href="https://github.com/MyKings/docker-vulnerability-environment" target="_blank" rel="noopener">https://github.com/MyKings/docker-vulnerability-environment</a> (docker搭建的漏洞练习环境)</li><li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="noopener">https://github.com/Audi-1/sqli-labs</a> (数据库注入练习平台)</li><li><a href="https://github.com/cr0hn/vulnerable-node" target="_blank" rel="noopener">https://github.com/cr0hn/vulnerable-node</a> (用节点编写漏洞练习平台，如OWASP Node Goat)</li><li><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a> (花式扫描器 ：端口扫描器Nmap)</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> (本地网络扫描器)</li><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (子域名扫描器)</li><li><a href="https://github.com/jh00nbr/RouterhunterBR" target="_blank" rel="noopener">https://github.com/jh00nbr/RouterhunterBR</a> (漏洞路由扫描器)</li></ul><h3 id="信息搜集工具"><a href="#信息搜集工具" class="headerlink" title="信息搜集工具"></a>信息搜集工具</h3><ul><li><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a> (社工插件，可查找以电子邮件，电话，用户名的注册的所有网站账号信息)</li><li><a href="https://github.com/sea-god/gitscan" target="_blank" rel="noopener">https://github.com/sea-god/gitscan</a> (Github上的信息搜集，实时柯林斯查询扫描的Git的最新上传有关邮箱账号密码信息)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a> (github Repo信息搜集工具)</li></ul><h3 id="WEB："><a href="#WEB：" class="headerlink" title="WEB："></a>WEB：</h3><ul><li><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a> (木马后门的大合集)</li><li><a href="https://github.com/brianwrf/hackUtils" target="_blank" rel="noopener">https://github.com/brianwrf/hackUtils</a> (渗透以及网络攻击脚本)</li><li><a href="https://github.com/rootphantomer/hack_tools_for_me" target="_blank" rel="noopener">https://github.com/rootphantomer/hack_tools_for_me</a> (网络渗透小工具大合集)</li><li><a href="https://github.com/firesunCN/BlueLotus_XSSReceiver" target="_blank" rel="noopener">https://github.com/firesunCN/BlueLotus_XSSReceiver</a> (XSS数据接收平台)</li></ul><h3 id="XSS与CSRF工具"><a href="#XSS与CSRF工具" class="headerlink" title="XSS与CSRF工具"></a>XSS与CSRF工具</h3><ul><li><a href="https://github.com/evilcos/xssor" target="_blank" rel="noopener">https://github.com/evilcos/xssor</a> (xss转换工具)</li><li><p><a href="https://github.com/stasinopoulos/commix" target="_blank" rel="noopener">https://github.com/stasinopoulos/commix</a> (命令注入开发者的简称，网站向命令注入检测工具)</p></li><li><p><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">https://github.com/zt2/sqli-hunter</a> (Web代理，通过加载sqlmap api进行sqli实时检测)</p></li><li><p><a href="https://github.com/Chora10/Cknife" target="_blank" rel="noopener">https://github.com/Chora10/Cknife</a> (新版中国菜刀)</p></li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (混帐的泄露利用EXP)</li><li><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a> (浏览器攻击框架)</li><li><a href="https://github.com/khalilbijjou/WAFNinja" target="_blank" rel="noopener">https://github.com/khalilbijjou/WAFNinja</a> (自动化绕过WAF脚本)</li><li><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="noopener">https://github.com/jkbrzt/httpie</a> (HTTP命令行客户端，可以从命令行构造发送各种HTTP请求(类似于卷曲))</li><li><a href="https://github.com/firebug/firebug" target="_blank" rel="noopener">https://github.com/firebug/firebug</a> (浏览器调试利器)</li><li><a href="https://github.com/SpiderLabs/ModSecurity" target="_blank" rel="noopener">https://github.com/SpiderLabs/ModSecurity</a> (一款开源WAF)</li><li><a href="https://github.com/owtf/wafbypasser" target="_blank" rel="noopener">https://github.com/owtf/wafbypasser</a> (WAF绕过检测工具)</li><li><a href="https://github.com/julienbedard/browsersploit" target="_blank" rel="noopener">https://github.com/julienbedard/browsersploit</a> (浏览器攻击框架)</li><li><a href="https://github.com/guillotines/WebShell" target="_blank" rel="noopener">https://github.com/guillotines/WebShell</a> (网络端的木马后门管理器)</li><li><a href="https://github.com/mgeeky/tomcatWarDeployer" target="_blank" rel="noopener">https://github.com/mgeeky/tomcatWarDeployer</a> (Tomcat的的自动后门部署)</li></ul><h3 id="窗口域渗透工具："><a href="#窗口域渗透工具：" class="headerlink" title="窗口域渗透工具："></a>窗口域渗透工具：</h3><ul><li><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a> (窗户渗透神器)</li><li><a href="https://github.com/PowerShellMafia/PowerSploit" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit</a> (PowerShell中的渗透库合集)</li><li><a href="https://github.com/clymb3r/PowerShell" target="_blank" rel="noopener">https://github.com/clymb3r/PowerShell</a> (PowerShell的工具合集)</li><li><a href="https://github.com/putterpanda/mimikittenz" target="_blank" rel="noopener">https://github.com/putterpanda/mimikittenz</a> (从内存中提取敏感信息的工具)</li></ul><h3 id="FireEye的的红军渗透工具"><a href="#FireEye的的红军渗透工具" class="headerlink" title="FireEye的的红军渗透工具"></a>FireEye的的红军渗透工具</h3><ul><li><a href="https://github.com/chango77747/AdEnumerator" target="_blank" rel="noopener">https://github.com/chango77747/AdEnumerator</a></li><li><a href="https://github.com/Raikia/CredNinja" target="_blank" rel="noopener">https://github.com/Raikia/CredNinja</a></li><li><a href="https://github.com/ChrisTruncer/WMIOps" target="_blank" rel="noopener">https://github.com/ChrisTruncer/WMIOps</a></li><li><a href="https://github.com/ChrisTruncer/EyeWitness" target="_blank" rel="noopener">https://github.com/ChrisTruncer/EyeWitness</a></li><li><a href="https://github.com/ChrisTruncer/Exgress-Assess" target="_blank" rel="noopener">https://github.com/ChrisTruncer/Exgress-Assess</a></li></ul><h3 id="模糊："><a href="#模糊：" class="headerlink" title="模糊："></a>模糊：</h3><ul><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a> (网络向发子工具)</li><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (HTTP暴力破解，撞库攻击脚本)</li></ul><h3 id="漏洞利用及攻击框架："><a href="#漏洞利用及攻击框架：" class="headerlink" title="漏洞利用及攻击框架："></a>漏洞利用及攻击框架：</h3><ul><li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework</a> (无国界医生)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a> (POC调用框架，可加载Pocsuite，Tangscan，Beebeeto等)</li><li><a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="noopener">https://github.com/knownsec/Pocsuite</a> (Pocsuite)</li><li><a href="https://github.com/n0tr00t/Beebeeto-framework" target="_blank" rel="noopener">https://github.com/n0tr00t/Beebeeto-framework</a> (Beebeeto)</li></ul><h3 id="漏洞POC＆EXP："><a href="#漏洞POC＆EXP：" class="headerlink" title="漏洞POC＆EXP："></a>漏洞POC＆EXP：</h3><ul><li><a href="https://github.com/offensive-security/exploit-database" target="_blank" rel="noopener">https://github.com/offensive-security/exploit-database</a> (ExploitDB官方的Git的版本)</li><li><a href="https://github.com/80vul/phpcodz" target="_blank" rel="noopener">https://github.com/80vul/phpcodz</a> (PHP漏洞代码分析)</li><li><a href="https://github.com/FiloSottile/CVE-2016-2107" target="_blank" rel="noopener">https://github.com/FiloSottile/CVE-2016-2107</a> (CVE-2016至2107年简单测试)</li><li><a href="https://github.com/fjserna/CVE-2015-7547" target="_blank" rel="noopener">https://github.com/fjserna/CVE-2015-7547</a> (CVE-2015-7547 POC)</li><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a> (Java的的反序列化POC生成工具)</li><li><a href="https://github.com/foxglovesec/JavaUnserializeExploits" target="_blank" rel="noopener">https://github.com/foxglovesec/JavaUnserializeExploits</a> (JAVA反序列化EXP)</li><li><a href="https://github.com/CaledoniaProject/jenkins-cli-exploit" target="_blank" rel="noopener">https://github.com/CaledoniaProject/jenkins-cli-exploit</a> (Jenkins CommonCollections EXP)</li><li><a href="https://github.com/vlad902/hacking-team-windows-kernel-lpe" target="_blank" rel="noopener">https://github.com/vlad902/hacking-team-windows-kernel-lpe</a> (CVE-2015-2426 EXP(windows内核提权))</li><li><a href="https://github.com/hxer/vulnapp" target="_blank" rel="noopener">https://github.com/hxer/vulnapp</a> (使用 Docker 显示Web攻击(php本地文件包含结合phpinfo getshell以及ssrf结合curl的利用演示))</li><li><a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">https://github.com/GoSecure/php7-opcache-override</a> (PHP7缓存覆写漏洞演示及相关工具)</li><li><a href="https://github.com/XcodeGhostSource/XcodeGhost" target="_blank" rel="noopener">https://github.com/XcodeGhostSource/XcodeGhost</a> (XcodeGhost木马样本)</li><li><a href="https://github.com/citronneur/rdp" target="_blank" rel="noopener">https://github.com/citronneur/rdp</a> (哈希长度扩展攻击EXP)</li></ul><h3 id="中间人攻击及钓鱼："><a href="#中间人攻击及钓鱼：" class="headerlink" title="中间人攻击及钓鱼："></a>中间人攻击及钓鱼：</h3><p>中间人攻击框架</p><ul><li><a href="https://github.com/secretsquirrel/the-backdoor-factory" target="_blank" rel="noopener">https://github.com/secretsquirrel/the-backdoor-factory</a></li><li><a href="https://github.com/secretsquirrel/BDFProxy" target="_blank" rel="noopener">https://github.com/secretsquirrel/BDFProxy</a></li><li><a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a></li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a> (注册代码，阻止无线上网和间谍无线用户)</li><li><a href="https://github.com/intrepidusgroup/mallory" target="_blank" rel="noopener">https://github.com/intrepidusgroup/mallory</a> (可扩展的中间人代理工具)</li><li><a href="https://github.com/sophron/wifiphisher" target="_blank" rel="noopener">https://github.com/sophron/wifiphisher</a> (无线网络钓鱼)</li></ul><h3 id="密码破解："><a href="#密码破解：" class="headerlink" title="密码破解："></a>密码破解：</h3><ul><li><a href="https://github.com/shinnok/johnny" target="_blank" rel="noopener">https://github.com/shinnok/johnny</a> (密码破解工具)</li><li><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a> (本地存储的各类密码提取利器)</li></ul><h3 id="二进制及代码分析工具："><a href="#二进制及代码分析工具：" class="headerlink" title="二进制及代码分析工具："></a>二进制及代码分析工具：</h3><ul><li><a href="https://github.com/devttys0/binwalk" target="_blank" rel="noopener">https://github.com/devttys0/binwalk</a> (二进制分析工具)</li><li><a href="https://github.com/quarkslab/binmap" target="_blank" rel="noopener">https://github.com/quarkslab/binmap</a> (系统扫描器，用于寻找程序和库然后收集他们的依赖关系，链接等信息)</li><li><a href="https://github.com/0vercl0k/rp" target="_blank" rel="noopener">https://github.com/0vercl0k/rp</a> (rp ++是一个完整的cpp编写工具，旨在在PE/Elf/Mach-O(不支持FAT二进制文件)x86/x64二进制文件中查找ROP序列。)</li><li><a href="https://github.com/lillypad/badger" target="_blank" rel="noopener">https://github.com/lillypad/badger</a> (的Windows漏洞开发工具)</li><li><a href="https://github.com/bdcht/amoco" target="_blank" rel="noopener">https://github.com/bdcht/amoco</a> (二进制静态分析工具(Python))</li><li><a href="https://github.com/longld/peda" target="_blank" rel="noopener">https://github.com/longld/peda</a> (Python的开发GDB开发协助)</li><li><a href="https://github.com/ValdikSS/billgates-botnet-tracker" target="_blank" rel="noopener">https://github.com/ValdikSS/billgates-botnet-tracker</a> (对BillGate Linux Botnet系木马活动的监控工具)</li><li><a href="https://github.com/kevthehermit/RATDecoders" target="_blank" rel="noopener">https://github.com/kevthehermit/RATDecoders</a> (木马配置参数提取工具)</li><li><a href="https://github.com/angr/angr" target="_blank" rel="noopener">https://github.com/angr/angr</a> (Shellphish编写的二进制分析工具(CTF向))</li><li><a href="https://github.com/yinwang0/pysonar2" target="_blank" rel="noopener">https://github.com/yinwang0/pysonar2</a> (针对蟒蛇的静态代码分析工具)</li><li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener">https://github.com/koalaman/shellcheck</a> (一个自动化的脚本(壳)分析工具，用来给出警告和建议)</li><li><a href="https://github.com/ChiChou/etacsufbo" target="_blank" rel="noopener">https://github.com/ChiChou/etacsufbo</a> (基于AST的变换简易的JavaScript的反混淆辅助工具) </li></ul><h3 id="EXP编写框架及工具："><a href="#EXP编写框架及工具：" class="headerlink" title="EXP编写框架及工具："></a>EXP编写框架及工具：</h3><ul><li><a href="https://github.com/t00sh/rop-tool" target="_blank" rel="noopener">https://github.com/t00sh/rop-tool</a> (二进制EXP编写工具)</li><li><a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">https://github.com/Gallopsled/pwntools</a> (CTF Pwn类题目脚本编写框架)</li><li><a href="https://github.com/zTrix/zio" target="_blank" rel="noopener">https://github.com/zTrix/zio</a> (一个易于使用的IO库，用于打包开发)</li><li><a href="https://github.com/frida/frida" target="_blank" rel="noopener">https://github.com/frida/frida</a> (跨平台注入工具(插入JavaScript以浏览Windows，Mac，Linux，iOS 和 Android上的本机应用程序。))</li></ul><h3 id="隐写："><a href="#隐写：" class="headerlink" title="隐写："></a>隐写：</h3><ul><li><a href="https://github.com/abeluck/stegdetect" target="_blank" rel="noopener">https://github.com/abeluck/stegdetect</a> (隐写检测工具)</li></ul><h3 id="各类安全资料："><a href="#各类安全资料：" class="headerlink" title="各类安全资料："></a>各类安全资料：</h3><ul><li><a href="https://github.com/l3m0n/pentest_study" target="_blank" rel="noopener">https://github.com/l3m0n/pentest_study</a> (域渗透教程)</li><li><a href="http://www.primalsecurity.net/tutorials/python-tutorials/" target="_blank" rel="noopener">http://www.primalsecurity.net/tutorials/python-tutorials/</a> (python security教程(原文链接)</li><li><a href="https://github.com/smartFlash/pySecurity" target="_blank" rel="noopener">https://github.com/smartFlash/pySecurity</a></li><li><a href="https://github.com/ClickSecurity/data_hacking" target="_blank" rel="noopener">https://github.com/ClickSecurity/data_hacking</a> (data_hacking合集)</li><li><a href="https://github.com/exploitprotocol/mobile-security-wiki" target="_blank" rel="noopener">https://github.com/exploitprotocol/mobile-security-wiki</a> (移动安全维基)</li><li><a href="https://github.com/veficos/reverse-engineering-for-beginners" target="_blank" rel="noopener">https://github.com/veficos/reverse-engineering-for-beginners</a> (书籍“反向工程换初学者”)</li><li><a href="https://github.com/luyg24/IT_security" target="_blank" rel="noopener">https://github.com/luyg24/IT_security</a> (一些信息安全标准及设备配置)</li><li><a href="https://github.com/kbandla/APTnotes" target="_blank" rel="noopener">https://github.com/kbandla/APTnotes</a> (APT相关笔记)</li><li><a href="https://github.com/knownsec/KCon" target="_blank" rel="noopener">https://github.com/knownsec/KCon</a> (Kcon资料)</li><li><a href="https://github.com/bt3gl/My-Gray-Hacker-Resources" target="_blank" rel="noopener">https://github.com/bt3gl/My-Gray-Hacker-Resources</a> (周大福及黑客资源合集)</li><li><a href="https://github.com/zardus/ctf-tools" target="_blank" rel="noopener">https://github.com/zardus/ctf-tools</a> (CTF和安全工具大合集)</li><li><a href="https://github.com/citypw/DNFWAH" target="_blank" rel="noopener">https://github.com/citypw/DNFWAH</a> (“不要跟黑客”) </li></ul><h3 id="各类CTF资源"><a href="#各类CTF资源" class="headerlink" title="各类CTF资源"></a>各类CTF资源</h3><p>近年ctf writeup大全</p><ul><li><a href="https://github.com/ctfs/write-ups-2016" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2016</a></li><li><a href="https://github.com/ctfs/write-ups-2015" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015</a></li><li><a href="https://github.com/ctfs/write-ups-2014" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2014</a></li><li><a href="https://github.com/facebook/fbctf" target="_blank" rel="noopener">https://github.com/facebook/fbctf</a> (fbctf竞赛平台演示)</li><li><a href="https://github.com/ctfs/resources" target="_blank" rel="noopener">https://github.com/ctfs/resources</a> (CTF资源)</li></ul><h3 id="各类编程资源："><a href="#各类编程资源：" class="headerlink" title="各类编程资源："></a>各类编程资源：</h3><ul><li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="noopener">https://github.com/bayandin/awesome-awesomeness</a> (大礼包(什么都有))</li><li><a href="https://github.com/denysdovhan/bash-handbook" target="_blank" rel="noopener">https://github.com/denysdovhan/bash-handbook</a> (庆典 - 手册)</li><li><a href="https://github.com/jobbole/awesome-python-cn" target="_blank" rel="noopener">https://github.com/jobbole/awesome-python-cn</a> (蟒蛇资源大全)</li><li><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">https://github.com/xirong/my-git</a> (Git的的学习资料)</li><li><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">https://github.com/android-cn/android-open-project-analysis</a> (安卓开源代码解析)</li><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">https://github.com/vinta/awesome-python</a> (蟒蛇框架，库，资源大合集)</li><li><a href="https://github.com/VerbalExpressions/JSVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/JSVerbalExpressions</a> (JS正则表达式库(用于简化构造复杂的JS正则表达式)) </li></ul><h3 id="蟒蛇："><a href="#蟒蛇：" class="headerlink" title="蟒蛇："></a>蟒蛇：</h3><ul><li><a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="noopener">https://github.com/VerbalExpressions/PythonVerbalExpressions</a> (蟒正则表达式库(用于简化构造复杂的蟒正则表达式))</li><li><a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener">https://github.com/pyinvoke/invoke</a> (蟒蛇任务管理以及命令执行库)</li><li><a href="https://github.com/pyinstaller/pyinstaller" target="_blank" rel="noopener">https://github.com/pyinstaller/pyinstaller</a> (python exe打包库)</li><li><a href="https://github.com/orf/cyborg" target="_blank" rel="noopener">https://github.com/orf/cyborg</a> (PY3爬虫框架)</li><li><a href="https://github.com/CoreSecurity/impacket" target="_blank" rel="noopener">https://github.com/CoreSecurity/impacket</a> (一个提供底层接口数据包编程和网络协议支持的蟒蛇库)</li><li><a href="https://github.com/kennethreitz/requests" target="_blank" rel="noopener">https://github.com/kennethreitz/requests</a> (蟒蛇请求库)</li><li><a href="https://github.com/mahmoud/boltons" target="_blank" rel="noopener">https://github.com/mahmoud/boltons</a> (蟒蛇实用工具合集)</li><li><a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a> (蟒蛇爬虫系统)</li><li><a href="https://github.com/P1kachu/v0lt" target="_blank" rel="noopener">https://github.com/P1kachu/v0lt</a> (CTF向蟒蛇工具包) </li></ul><h3 id="科学上网："><a href="#科学上网：" class="headerlink" title="科学上网："></a>科学上网：</h3><ul><li><a href="https://github.com/XX-net/XX-Net" target="_blank" rel="noopener">https://github.com/XX-net/XX-Net</a> (科学上网工具)</li></ul><h3 id="福利："><a href="#福利：" class="headerlink" title="福利："></a>福利：</h3><ul><li><a href="https://github.com/east520/AutoGetRedEnv" target="_blank" rel="noopener">https://github.com/east520/AutoGetRedEnv</a> (微信自动抢红包动态库)</li><li><a href="https://github.com/geeeeeeeeek/WeChatLuckyMoney" target="_blank" rel="noopener">https://github.com/geeeeeeeeek/WeChatLuckyMoney</a> (微信抢红包插件(安卓版))</li><li><a href="https://github.com/yangyangwithgnu/hardseed" target="_blank" rel="noopener">https://github.com/yangyangwithgnu/hardseed</a> (神器)</li></ul><h3 id="甲方安全工程师生存指南："><a href="#甲方安全工程师生存指南：" class="headerlink" title="甲方安全工程师生存指南："></a>甲方安全工程师生存指南：</h3><ul><li><a href="https://github.com/thomaspatzke/WASE" target="_blank" rel="noopener">https://github.com/thomaspatzke/WASE</a> (网页索引及日志搜索工具)</li><li><a href="https://github.com/Kozea/wdb" target="_blank" rel="noopener">https://github.com/Kozea/wdb</a> (一款CS结构的网络调试器)</li><li><a href="https://github.com/aramosf/recoversqlite/" target="_blank" rel="noopener">https://github.com/aramosf/recoversqlite/</a> (从sqlite的数据库中删除的注册表恢复信息。)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (自动化的模板注入攻击检测工具)</li><li><a href="https://github.com/client9/libinjection" target="_blank" rel="noopener">https://github.com/client9/libinjection</a> (SQLI词法解析分析器)</li><li><a href="https://github.com/zxsecurity/gpsnitch" target="_blank" rel="noopener">https://github.com/zxsecurity/gpsnitch</a> (全球定位系统欺骗检测工具)</li><li><a href="https://github.com/biggiesmallsAG/nightHawkResponse" target="_blank" rel="noopener">https://github.com/biggiesmallsAG/nightHawkResponse</a> (应急处置响应框架)</li><li><a href="https://github.com/FallibleInc/security-guide-for-developers" target="_blank" rel="noopener">https://github.com/FallibleInc/security-guide-for-developers</a> (网络安全开发指南)</li><li><a href="https://github.com/4ido10n/wooyun-drops-all-articles-package" target="_blank" rel="noopener">https://github.com/4ido10n/wooyun-drops-all-articles-package</a> (乌云知识库全部文章)</li><li><a href="https://github.com/paralax/awesome-honeypots" target="_blank" rel="noopener">https://github.com/paralax/awesome-honeypots</a> (蜜罐资源合集)</li><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (自动化代码审计工具)</li><li><a href="https://github.com/HatBoy/Pcap-Analyzer" target="_blank" rel="noopener">https://github.com/HatBoy/Pcap-Analyzer</a> (蟒蛇编写的离线网络数据包分析器)</li><li><a href="https://github.com/leonteale/pentestpackage" target="_blank" rel="noopener">https://github.com/leonteale/pentestpackage</a> (渗透测试常见小工具打包)</li><li><a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">https://github.com/phith0n/Mind-Map</a> (各类安全资料：)</li><li><a href="https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428" target="_blank" rel="noopener">https://github.com/SecWiki/sec-chart/tree/294d7c1ff1eba297fa892dda08f3c05e90ed1428</a> (安全脑图合集 )</li></ul><h3 id="有关信息安全的一些流程图收集"><a href="#有关信息安全的一些流程图收集" class="headerlink" title="有关信息安全的一些流程图收集"></a>有关信息安全的一些流程图收集</h3><ul><li><a href="https://github.com/sindresorhus/awesome#security" target="_blank" rel="noopener">https://github.com/sindresorhus/awesome#security</a> (令人敬畏的名单)</li></ul><h3 id="蜜罐："><a href="#蜜罐：" class="headerlink" title="蜜罐："></a>蜜罐：</h3><ul><li><a href="https://github.com/desaster/kippo" target="_blank" rel="noopener">https://github.com/desaster/kippo</a> (SSH蜜罐)</li><li><a href="https://github.com/awhitehatter/mailoney" target="_blank" rel="noopener">https://github.com/awhitehatter/mailoney</a> (SMTP蜜罐)</li><li><a href="https://github.com/mushorg/glastopf" target="_blank" rel="noopener">https://github.com/mushorg/glastopf</a> (网络应用蜜罐)</li><li><a href="https://github.com/jordan-wright/elastichoney" target="_blank" rel="noopener">https://github.com/jordan-wright/elastichoney</a> (一个简单的Elasticsearch蜜罐)</li><li><a href="https://github.com/atiger77/Dionaea" target="_blank" rel="noopener">https://github.com/atiger77/Dionaea</a> (基于docker的蜜罐系统) </li></ul><blockquote><p>Scanners-Box是来自github平台的开源扫描仪的集合，包括子域枚举，数据库漏洞扫描程序，弱密码或信息泄漏扫描仪，端口扫描仪，指纹扫描仪和其他大型扫描仪，模块化扫描仪等。对于其他众所周知的扫描工具，如：Nmap，w3af，brakeman将不会包含在收集范围内。安全行业从业人员常用工具指引，包括各类在线安全学习资料和安全检测工具，欢迎大家持续贡献！</p></blockquote><h3 id="入门指南"><a href="#入门指南" class="headerlink" title="入门指南"></a>入门指南</h3><ul><li><a href="https://wizardforcel.gitbooks.io/web-hacking-101/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/web-hacking-101/content/</a> (Web Hacking 101 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/asani/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/asani/content/</a> (浅入浅出Android安全 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/lpad/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/lpad/content/</a> (Android 渗透测试学习手册 中文版)</li><li><a href="https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/kali-linux-web-pentest-cookbook/content/</a> (Kali Linux Web渗透测试秘籍 中文版)</li><li><a href="https://github.com/hardenedlinux/linux-exploit-development-tutorial" target="_blank" rel="noopener">https://github.com/hardenedlinux/linux-exploit-development-tutorial</a> (Linux exploit 开发入门)</li><li><a href="https://www.gitbook.com/book/t0data/burpsuite/details" target="_blank" rel="noopener">https://www.gitbook.com/book/t0data/burpsuite/details</a> (burpsuite实战指南)</li><li><a href="https://github.com/qazbnm456/awesome-web-security" target="_blank" rel="noopener">https://github.com/qazbnm456/awesome-web-security</a> (Web安全资料和资源列表)</li><li><a href="https://sec-wiki.com/" target="_blank" rel="noopener">https://sec-wiki.com/</a> (安全维基百科)</li></ul><h3 id="fuzz工具收集"><a href="#fuzz工具收集" class="headerlink" title="fuzz工具收集"></a>fuzz工具收集</h3><ul><li><a href="https://github.com/ivanfratric/winafl" target="_blank" rel="noopener">https://github.com/ivanfratric/winafl</a></li><li><a href="https://github.com/attekett/NodeFuzz" target="_blank" rel="noopener">https://github.com/attekett/NodeFuzz</a></li><li><a href="https://github.com/google/oss-fuzz" target="_blank" rel="noopener">https://github.com/google/oss-fuzz</a></li><li><a href="http://blog.topsec.com.cn/ad_lab/alphafuzzer/" target="_blank" rel="noopener">http://blog.topsec.com.cn/ad_lab/alphafuzzer/</a></li><li><a href="http://llvm.org/docs/LibFuzzer.html" target="_blank" rel="noopener">http://llvm.org/docs/LibFuzzer.html</a></li></ul><h3 id="子域名枚举"><a href="#子域名枚举" class="headerlink" title="子域名枚举"></a>子域名枚举</h3><ul><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (子域名字典穷举)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a> (子域名枚举与地图标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a> (在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a> (根据DNS记录查询子域名)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a> (基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a> (使用CloudFlare进行子域名枚举的脚本)</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a> (A domain scanner)</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a> (Knock Subdomain Scan)</li><li><a href="https://github.com/Evi1CLAY/CoolPool/tree/master/Python/DomainSeeker" target="_blank" rel="noopener">https://github.com/Evi1CLAY/CoolPool/tree/master/Python/DomainSeeker</a> (多方式收集目标子域名信息)</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> (兄弟域名查询)</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a> (基于dns查询的子域名枚举)</li></ul><h3 id="web应用扫描器"><a href="#web应用扫描器" class="headerlink" title="web应用扫描器"></a>web应用扫描器</h3><ul><li><a href="http://github.com/Arachni/arachni" target="_blank" rel="noopener">http://github.com/Arachni/arachni</a> (web应用安全扫描器框架 <a href="http://www.arachni-scanner.com" target="_blank" rel="noopener">http://www.arachni-scanner.com</a>)</li></ul><h3 id="数据库扫描、注入工具"><a href="#数据库扫描、注入工具" class="headerlink" title="数据库扫描、注入工具"></a>数据库扫描、注入工具</h3><ul><li><a href="https://github.com/sqlmapproject/sqlmap" target="_blank" rel="noopener">https://github.com/sqlmapproject/sqlmap</a> (注入工具之王sqlmap)</li><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a> (一款基于SQLMAP和Charles的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a> (99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a> (一款针对mongoDB的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a> (SQL盲注利用框架)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a> (攻击SQLSERVER的Powershell脚本框架)</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a> (又一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a> (MongoDB审计及渗透工具)</li><li><a href="https://github.com/commixproject/commix" target="_blank" rel="noopener">https://github.com/commixproject/commix</a> (注入点命令执行利用工具)</li></ul><h3 id="弱口令或信息泄漏扫描"><a href="#弱口令或信息泄漏扫描" class="headerlink" title="弱口令或信息泄漏扫描"></a>弱口令或信息泄漏扫描</h3><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a> (一个简单的HTTP暴力破解、撞库攻击脚本)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a> (一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a> (.git文件夹泄漏利用工具)</li><li><a href="https://github.com/LoRexxar/BScanner" target="_blank" rel="noopener">https://github.com/LoRexxar/BScanner</a> (基于字典的目录扫描小工具)</li><li><a href="https://github.com/she11c0der/fenghuangscanner_v3" target="_blank" rel="noopener">https://github.com/she11c0der/fenghuangscanner_v3</a> (各种端口及弱口令检测，作者wilson9x1，原地址失效)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a> (对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a> (根据用户习惯生成弱口令探测字典脚本)</li><li><a href="https://github.com/RicterZ/genpAss" target="_blank" rel="noopener">https://github.com/RicterZ/genpAss</a> (中国特色的弱口令生成器)</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a> (go写的协程版的ssh\redis\mongodb弱口令破解工具)</li><li><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">https://github.com/n0tr00t/Sreg</a> (通过输入email、phone、username的返回用户注册的所有互联网护照信息)</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a> (GitHub敏感信息扫描工具)</li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a> (GitHub敏感信息扫描工具,包括检测commit等)</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a> (暴力破解字典建立工具)</li><li><a href="https://github.com/GDSSecurity/xxe-recursive-download" target="_blank" rel="noopener">https://github.com/GDSSecurity/xxe-recursive-download</a> (xxe漏洞递归下载工具)</li><li><a href="https://buer.haus/xxegen/" target="_blank" rel="noopener">https://buer.haus/xxegen/</a> (xxe在线生成利用工具)</li></ul><h3 id="物联网设备扫描"><a href="#物联网设备扫描" class="headerlink" title="物联网设备扫描"></a>物联网设备扫描</h3><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a> (物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a> (使用nmap扫描IoT设备)</li><li><a href="https://github.com/jh00nbr/Routerhunter-2.0" target="_blank" rel="noopener">https://github.com/jh00nbr/Routerhunter-2.0</a> (路由器漏洞扫描利用)</li><li><a href="https://github.com/reverse-shell/routersploit" target="_blank" rel="noopener">https://github.com/reverse-shell/routersploit</a> (路由器漏洞利用框架)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a> (telnet服务密码撞库)</li><li><a href="https://github.com/RUB-NDS/PRET" target="_blank" rel="noopener">https://github.com/RUB-NDS/PRET</a> (打印机攻击框架)</li></ul><h3 id="XSS扫描"><a href="#XSS扫描" class="headerlink" title="XSS扫描"></a>XSS扫描</h3><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a> (Cross-Site Scripting Bruteforcer)</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> (A small python script to check for Cross-Site Tracing)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> (PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> (批量扫描xss的python脚本)</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a> (自动化检测页面是否存在XSS和CSRF漏洞的浏览器插件)</li></ul><h3 id="企业网络自检"><a href="#企业网络自检" class="headerlink" title="企业网络自检"></a>企业网络自检</h3><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a> (详细的内部网络信息扫描器)</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a> (javascript实现的本地网络扫描器)</li><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a> (网络资产识别引擎，漏洞检测引擎)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a> (企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱、子域名、Hosts)</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a> (搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息)</li></ul><h3 id="webshell检测以及病毒分析工具"><a href="#webshell检测以及病毒分析工具" class="headerlink" title="webshell检测以及病毒分析工具"></a>webshell检测以及病毒分析工具</h3><ul><li><a href="https://github.com/We5ter/Scanners-Box/tree/master/webshell/" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box/tree/master/webshell/</a> (简单的php后门检测工具以及webshell样本库)</li><li><a href="https://github.com/ym2011/ScanBackdoor" target="_blank" rel="noopener">https://github.com/ym2011/ScanBackdoor</a> (Webshell扫描工具)</li><li><a href="https://github.com/yassineaddi/BackdoorMan" target="_blank" rel="noopener">https://github.com/yassineaddi/BackdoorMan</a> (PHP后门扫描)</li><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a> (又一款webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a> (哈勃分析系统，linux系统病毒分析及安全检测)</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a> (使用python实现的集成ClamAV、ESET、Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a> (一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a> (测试效率高达99%的webshell检测工具)</li></ul><h3 id="内网安全渗透测试工具集"><a href="#内网安全渗透测试工具集" class="headerlink" title="内网安全渗透测试工具集"></a>内网安全渗透测试工具集</h3><ul><li><a href="https://github.com/0xwindows/VulScritp" target="_blank" rel="noopener">https://github.com/0xwindows/VulScritp</a> (企业内网渗透脚本，包括banner扫描、端口扫描；各种通用漏洞利用等)</li><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a> (基于网络流量的内网探测框架)</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a> (调用 Windows API 枚举用户登录信息)</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a> (自动化利用XSS入侵内网)</li><li><a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a> (本机密码查看提取工具)</li><li><a href="https://github.com/huntergregal/mimipenguin" target="_blank" rel="noopener">https://github.com/huntergregal/mimipenguin</a> (linux密码抓取神器)</li></ul><h3 id="端口扫描、指纹识别以及中间件扫描"><a href="#端口扫描、指纹识别以及中间件扫描" class="headerlink" title="端口扫描、指纹识别以及中间件扫描"></a>端口扫描、指纹识别以及中间件扫描</h3><ul><li><a href="https://nmap.org/download.html" target="_blank" rel="noopener">https://nmap.org/download.html</a> (Nmap端口扫描器之王,<a href="https://svn.nmap.org/" target="_blank" rel="noopener">https://svn.nmap.org/</a>)</li><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a> (目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a> (动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a> (WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a> (ssl类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a> (web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a> (web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a> (网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a> (a fast Network scanner inspired by Masscan and Zmap)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a> (网络资产信息扫描, ICMP存活探测,端口扫描，端口指纹服务识别)</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a> (中间件扫描)</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a> (Web path scanner)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a> (C段Banner与路径扫描)</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a> (端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a> (waf自动暴破)</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a> (尝试找出cdn背后的真实ip)</li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a> (基于Bing搜索引擎的C段/旁站查询，多线程，支持API)</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a> (多线程WEB目录爆破工具)</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a> (一个爬虫式的网段Web主机发现小工具)</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a> (thorn上实现的分布式任务分发的ip端口漏洞扫描器)</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a> (类似 zgrab 的快速 TCP 指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a> (CDN识别、检测)</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a> (基于爬虫的web路径扫描器)</li></ul><h3 id="针对性漏洞测试工具"><a href="#针对性漏洞测试工具" class="headerlink" title="针对性漏洞测试工具"></a>针对性漏洞测试工具</h3><ul><li><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a> ( java反序列化利用工具)</li><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a> (Jenkins漏洞探测、用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a> (discuz漏洞扫描)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a> (CMS攻击框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a> (IIS短文件名漏洞扫描)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a> (flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a> (服务器端模板注入漏洞的半自动化工具)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a> (服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a> (docker扫描工具)</li><li><a href="https://github.com/GoSecure/break-fast-serial" target="_blank" rel="noopener">https://github.com/GoSecure/break-fast-serial</a> (借助DNS解析来检测Java反序列化漏洞工具)</li><li><a href="https://github.com/dirtycow/dirtycow.github.io" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io</a> (脏牛提权漏洞exp)</li></ul><h3 id="无线网络渗透、扫描"><a href="#无线网络渗透、扫描" class="headerlink" title="无线网络渗透、扫描"></a>无线网络渗透、扫描</h3><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a>(无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a> (Python网络/渗透测试工具)</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a> (无线安全渗透测试套件)</li></ul><h3 id="代码静态扫描、代码运行栈跟踪"><a href="#代码静态扫描、代码运行栈跟踪" class="headerlink" title="代码静态扫描、代码运行栈跟踪"></a>代码静态扫描、代码运行栈跟踪</h3><ul><li><a href="https://github.com/exakat/php-static-analysis-tools" target="_blank" rel="noopener">https://github.com/exakat/php-static-analysis-tools</a> (php静态扫描工具集)</li><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a> (白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a> (静态php代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a> (跟踪、分析PHP运行情况的工具)</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a> (NodeJS应用代码审计)</li><li><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">https://github.com/pwnsdx/BadCode</a> (PHP代码审计)</li><li><a href="https://github.com/thesp0nge/dawnscanner" target="_blank" rel="noopener">https://github.com/thesp0nge/dawnscanner</a> (ruby源码审计)</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a> (Ruby on Rails应用程序的安全漏洞)</li><li><a href="https://github.com/ajinabraham/Mobile-Security-Framework-MobSF/" target="_blank" rel="noopener">https://github.com/ajinabraham/Mobile-Security-Framework-MobSF/</a>(app黑盒审计)</li><li><a href="https://github.com/alibaba/iOSSecAudit" target="_blank" rel="noopener">https://github.com/alibaba/iOSSecAudit</a> (iOS安全审计)</li></ul><h3 id="模块化扫描、综合扫描器"><a href="#模块化扫描、综合扫描器" class="headerlink" title="模块化扫描、综合扫描器"></a>模块化扫描、综合扫描器</h3><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a> (自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a> (分布式web漏洞扫描框架，集合owasp top10漏洞扫描和边界资产发现能力)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a> (BkScanner 分布式、插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a> (被动式漏洞扫描)</li><li><a href="https://github.com/alpha1e0/pentestdb" target="_blank" rel="noopener">https://github.com/alpha1e0/pentestdb</a> (WEB渗透测试数据库)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a> (基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a> (自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a> (定向全自动化渗透测试工具)</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a> (自动化渗透测试框架)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a> (扫描效果未验证)</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a> (渗透测试插件化并发框架)</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a> (Scanner in Python3.5 for SQLi/XSS/LFI/RFI and other Vulns)</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a> (web端的在线漏洞扫描)</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a> (开发中…)</li></ul><h3 id="Android系列工具："><a href="#Android系列工具：" class="headerlink" title="Android系列工具："></a>Android系列工具：</h3><ul><li><a href="http://sec-redclub.com/index.php/archives/439/" target="_blank" rel="noopener">http://sec-redclub.com/index.php/archives/439/</a></li></ul><h3 id="DDOS防护："><a href="#DDOS防护：" class="headerlink" title="DDOS防护："></a>DDOS防护：</h3><ul><li><a href="https://github.com/ywjt/Dshield" target="_blank" rel="noopener">https://github.com/ywjt/Dshield</a></li></ul><h3 id="Database-firewall："><a href="#Database-firewall：" class="headerlink" title="Database firewall："></a>Database firewall：</h3><ul><li><a href="https://nim4.github.io/DBShield/" target="_blank" rel="noopener">https://nim4.github.io/DBShield/</a></li></ul><h3 id="waf开源及规则："><a href="#waf开源及规则：" class="headerlink" title="waf开源及规则："></a>waf开源及规则：</h3><ul><li><a href="https://github.com/xsec-lab/x-waf" target="_blank" rel="noopener">https://github.com/xsec-lab/x-waf</a></li><li><a href="https://github.com/loveshell/ngx_lua_waf" target="_blank" rel="noopener">https://github.com/loveshell/ngx_lua_waf</a></li><li><a href="https://github.com/SpiderLabs/owasp-modsecurity-crs/tree/master/base_rules" target="_blank" rel="noopener">https://github.com/SpiderLabs/owasp-modsecurity-crs/tree/master/base_rules</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://www.cnblogs.com/yylingyao/p/8997607.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/yylingyao/p/8997607.html&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本工具包收集的初衷是向各类行业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的各种开源或非开源安全扫描工具，以帮助安全从业人员对自身业务进行自检，从而提高安全性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;免责说明&lt;br&gt;请勿用于非法的用途，否则造成的严重后果与本项目无关&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="hack" scheme="http://yulongphp.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>2019年Github上开源的安全渗透攻击类工具集合</title>
    <link href="http://yulongphp.github.io/2018/07/24/github_hack_tool/"/>
    <id>http://yulongphp.github.io/2018/07/24/github_hack_tool/</id>
    <published>2018-07-24T09:29:35.000Z</published>
    <updated>2019-02-14T08:53:29.897Z</updated>
    
    <content type="html"><![CDATA[<p>本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性。</p><p>转载自: <a href="http://netsecurity.51cto.com/art/201812/588880.htm" target="_blank" rel="noopener">http://netsecurity.51cto.com/art/201812/588880.htm</a></p><p>集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举，数据库漏洞扫描，弱口令或信息泄漏扫描，端口扫描，指纹识别以及其他大型扫描器或模块化扫描器。<br>项目地址：<a href="https://github.com/We5ter/Scanners-Box" target="_blank" rel="noopener">https://github.com/We5ter/Scanners-Box</a></p><a id="more"></a><h3 id="子域名枚举扫描器或爆破工具"><a href="#子域名枚举扫描器或爆破工具" class="headerlink" title="子域名枚举扫描器或爆破工具"></a>子域名枚举扫描器或爆破工具</h3><ul><li><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a> (lijiejie开发的一款使用广泛的子域名爆破枚举工具)</li><li><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">https://github.com/ring04h/wydomain</a> (猪猪侠开发的一款域名收集全面，精准的子域名枚举工具)</li><li><a href="https://github.com/le4f/dnsmaper" target="_blank" rel="noopener">https://github.com/le4f/dnsmaper</a>(子域名枚举爆破工具以及地图位置标记)</li><li><a href="https://github.com/0xbug/orangescan" target="_blank" rel="noopener">https://github.com/0xbug/orangescan</a>(提供web界面的在线子域名信息收集工具)</li><li><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">https://github.com/TheRook/subbrute</a>(高效精准的子域名爆破工具，同时也是扫描器中最常用的子域名API库)</li><li><a href="https://github.com/We5ter/GSDF" target="_blank" rel="noopener">https://github.com/We5ter/GSDF</a>(基于谷歌SSL透明证书的子域名查询脚本)</li><li><a href="https://github.com/mandatoryprogrammer/cloudflare_enum" target="_blank" rel="noopener">https://github.com/mandatoryprogrammer/cloudflare_enum</a>(使用CloudFlare进行子域名枚举的脚本)</li><li><a href="https://github.com/guelfoweb/knock" target="_blank" rel="noopener">https://github.com/guelfoweb/knock</a>(Knock子域名获取，可用于查找子域名接管漏洞)</li><li><a href="https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker" target="_blank" rel="noopener">https://github.com/exp-db/PythonPool/tree/master/Tools/DomainSeeker</a>(多方式收集目标子域名信息)</li><li><a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a>(兄弟域名查询)</li><li><a href="https://github.com/chuhades/dnsbrute" target="_blank" rel="noopener">https://github.com/chuhades/dnsbrute</a>(高效的子域名爆破工具)</li><li><a href="https://github.com/yanxiu0614/subdomain3" target="_blank" rel="noopener">https://github.com/yanxiu0614/subdomain3</a>(一款高效的子域名爆破工具)</li><li><a href="https://github.com/michenriksen/aquatone" target="_blank" rel="noopener">https://github.com/michenriksen/aquatone</a>(子域名枚举，探测工具。可用于子域名接管漏洞探测)</li><li><a href="https://github.com/evilsocket/dnssearch" target="_blank" rel="noopener">https://github.com/evilsocket/dnssearch</a>(一款子域名爆破工具)</li><li><a href="https://github.com/reconned/domained" target="_blank" rel="noopener">https://github.com/reconned/domained</a>(可用于子域名收集的一款工具)</li><li><a href="https://github.com/bit4woo/Teemo" target="_blank" rel="noopener">https://github.com/bit4woo/Teemo</a>(域名收集及枚举工具)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a>(邮箱，服务器信息收集及子域名枚举工具)</li><li><a href="https://github.com/swisskyrepo/Subdomino" target="_blank" rel="noopener">https://github.com/swisskyrepo/Subdomino</a>(子域名枚举，端口扫描，服务存活确认)</li></ul><h3 id="自动爬虫实现的子域名收集工具"><a href="#自动爬虫实现的子域名收集工具" class="headerlink" title="自动爬虫实现的子域名收集工具"></a>自动爬虫实现的子域名收集工具</h3><ul><li><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a>(快速子域枚举工具)</li><li><a href="https://github.com/jonluca/Anubis" target="_blank" rel="noopener">https://github.com/jonluca/Anubis</a>(子域名枚举及信息搜集工具)</li><li><a href="https://github.com/n4xh4ck5/N4xD0rk" target="_blank" rel="noopener">https://github.com/n4xh4ck5/N4xD0rk</a>(子域名查询工具)</li><li><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">https://github.com/infosec-au/altdns</a>(一款高效的子域名爆破工具)</li><li><a href="https://github.com/FeeiCN/ESD" target="_blank" rel="noopener">https://github.com/FeeiCN/ESD</a>(基于AsyncIO协程以及非重复字典的子域名爆破工具)</li><li><a href="https://github.com/giovanifss/Dumb" target="_blank" rel="noopener">https://github.com/giovanifss/Dumb</a>(快速而灵活的子域名爆破工具)</li><li><a href="https://github.com/UnaPibaGeek/ctfr" target="_blank" rel="noopener">https://github.com/UnaPibaGeek/ctfr</a>(通过域名透明证书记录获取子域名)</li><li><a href="https://github.com/caffix/amass" target="_blank" rel="noopener">https://github.com/caffix/amass</a>(Go语言开发的子域名枚举工具)</li><li><a href="https://github.com/Ice3man543/subfinder" target="_blank" rel="noopener">https://github.com/Ice3man543/subfinder</a>(继承于sublist3r项目的模块化体系结构，一个强劲的子域名枚举工具)</li></ul><h3 id="数据库类漏洞扫描器或爆破工具"><a href="#数据库类漏洞扫描器或爆破工具" class="headerlink" title="数据库类漏洞扫描器或爆破工具"></a>数据库类漏洞扫描器或爆破工具</h3><ul><li><a href="https://github.com/0xbug/SQLiScanner" target="_blank" rel="noopener">https://github.com/0xbug/SQLiScanner</a>(一款基于SQLMAP和查尔斯的被动SQL注入漏洞扫描工具)</li><li><a href="https://github.com/stamparm/DSSS" target="_blank" rel="noopener">https://github.com/stamparm/DSSS</a>(99行代码实现的sql注入漏洞扫描器)</li><li><a href="https://github.com/LoRexxar/Feigong" target="_blank" rel="noopener">https://github.com/LoRexxar/Feigong</a>(针对各种情况自由变化的MySQL注入脚本)</li><li><a href="https://github.com/youngyangyang04/NoSQLAttack" target="_blank" rel="noopener">https://github.com/youngyangyang04/NoSQLAttack</a>(一款针对MongoDB中的攻击工具)</li><li><a href="https://github.com/Neohapsis/bbqsql" target="_blank" rel="noopener">https://github.com/Neohapsis/bbqsql</a>(SQL盲注利用框架)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a>(攻击SQLSERVER的Powershell的脚本框架)</li><li><a href="https://github.com/WhitewidowScanner/whitewidow" target="_blank" rel="noopener">https://github.com/WhitewidowScanner/whitewidow</a>(一款数据库扫描器)</li><li><a href="https://github.com/stampery/mongoaudit" target="_blank" rel="noopener">https://github.com/stampery/mongoaudit</a>(MongoDB审计及渗透工具)</li><li><a href="https://github.com/torque59/Nosql-Exploitation-Framework" target="_blank" rel="noopener">https://github.com/torque59/Nosql-Exploitation-Framework</a>(NoSQL扫描/爆破工具)</li><li><a href="https://github.com/missDronio/blindy" target="_blank" rel="noopener">https://github.com/missDronio/blindy</a>(MySQL盲注爆破工具)</li><li><a href="https://github.com/fengxuangit/Fox-scan" target="_blank" rel="noopener">https://github.com/fengxuangit/Fox-scan</a>(基于SQLMAP的主动和被动资源发现的漏洞扫描工具)</li><li><a href="https://github.com/NetSPI/PowerUpSQL" target="_blank" rel="noopener">https://github.com/NetSPI/PowerUpSQL</a>(用于SQL Server审计的powershell脚本)</li><li><a href="https://github.com/JohnTroony/Blisqy" target="_blank" rel="noopener">https://github.com/JohnTroony/Blisqy</a>(用于http header中的时间盲注爆破工具，仅针对MySQL / MariaDB)</li><li><a href="https://github.com/ron190/jsql-injection" target="_blank" rel="noopener">https://github.com/ron190/jsql-injection</a>(Java编写的SQL注入工具)</li><li><a href="https://github.com/Hadesy2k/sqliv" target="_blank" rel="noopener">https://github.com/Hadesy2k/sqliv</a>(基于搜索引擎的批量SQL注入漏洞扫描器)</li><li><a href="https://github.com/s0md3v/sqlmate" target="_blank" rel="noopener">https://github.com/s0md3v/sqlmate</a>(在sqlmap基础上增加了目录扫描，hash爆破等功能)</li><li><a href="https://github.com/m8r0wn/enumdb" target="_blank" rel="noopener">https://github.com/m8r0wn/enumdb</a>(Mysys以及MSSQL爆破脱裤工具)</li><li><a href="https://github.com/9tail123/wooscan" target="_blank" rel="noopener">https://github.com/9tail123/wooscan</a>(批量查询网站在乌云是否存在忽略的sql注入漏洞并自动调用sqlmap测试)</li></ul><h3 id="弱口令-弱用户名扫描器或爆破工具"><a href="#弱口令-弱用户名扫描器或爆破工具" class="headerlink" title="弱口令/弱用户名扫描器或爆破工具"></a>弱口令/弱用户名扫描器或爆破工具</h3><ul><li><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">https://github.com/lijiejie/htpwdScan</a>(一个简单的HTTP暴力破解，撞库攻击脚本)</li><li><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">https://github.com/ysrc/F-Scrack</a>(对各类服务进行弱口令检测的脚本)</li><li><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">https://github.com/Mebus/cupp</a>(根据用户习惯生成弱口令探测字典脚本)</li><li><a href="https://github.com/netxfly/crack_ssh" target="_blank" rel="noopener">https://github.com/netxfly/crack_ssh</a>(Go写的协程版的ssh \ redis \ mongodb弱口令破解工具)</li><li><a href="https://github.com/LandGrey/pydictor" target="_blank" rel="noopener">https://github.com/LandGrey/pydictor</a>(暴力破解字典建立工具)</li><li><a href="https://github.com/shengqi158/weak_password_detect" target="_blank" rel="noopener">https://github.com/shengqi158/weak_password_detect</a>(多线程探测弱口令)</li><li><a href="https://github.com/s0md3v/Blazy" target="_blank" rel="noopener">https://github.com/s0md3v/Blazy</a>(支持测试CSRF，Clickjacking，Cloudflare和WAF的弱口令探测器)</li><li><a href="https://github.com/MooseDojo/myBFF" target="_blank" rel="noopener">https://github.com/MooseDojo/myBFF</a>(对CiscoVPN，Citrix Gateway等各类服务进行弱口令检测的脚本)</li></ul><h3 id="物联网设备识别工具或扫描器"><a href="#物联网设备识别工具或扫描器" class="headerlink" title="物联网设备识别工具或扫描器"></a>物联网设备识别工具或扫描器</h3><ul><li><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a>(物联网设备默认密码扫描检测工具)</li><li><a href="https://github.com/shodan-labs/iotdb" target="_blank" rel="noopener">https://github.com/shodan-labs/iotdb</a>(使用nmap扫描IoT设备)</li><li><a href="https://github.com/googleinurl/RouterHunterBR" target="_blank" rel="noopener">https://github.com/googleinurl/RouterHunterBR</a>(路由器设备漏洞扫描利用)</li><li><a href="https://github.com/scu-igroup/telnet-scanner" target="_blank" rel="noopener">https://github.com/scu-igroup/telnet-scanner</a>(Telnet服务密码撞库)</li><li><a href="https://github.com/viraintel/OWASP-Nettacker" target="_blank" rel="noopener">https://github.com/viraintel/OWASP-Nettacker</a>(自动化信息搜集及渗透测试工具，比较适用于IoT扫描)</li><li><a href="https://github.com/threat9/routersploit" target="_blank" rel="noopener">https://github.com/threat9/routersploit</a>(嵌入式设备漏洞扫描及利用工具)</li></ul><h3 id="反射型或基于DOM的XSS扫描器"><a href="#反射型或基于DOM的XSS扫描器" class="headerlink" title="反射型或基于DOM的XSS扫描器"></a>反射型或基于DOM的XSS扫描器</h3><ul><li><a href="https://github.com/shawarkhanethicalhacker/BruteXSS" target="_blank" rel="noopener">https://github.com/shawarkhanethicalhacker/BruteXSS</a>(一款XSS扫描器，可暴力注入参数)</li><li><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a>(小型XSS扫描器，也可检测CRLF，XSS，点击劫持的)</li><li><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a>(PHP版本的反射型xss扫描)</li><li><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a>(批量扫描XSS的python脚本)</li><li><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a>(自动化检测页面是否存在XSS和跨站请求伪造漏洞的浏览器插件)</li><li><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a>(使用命令行进行XSS批量检测)</li><li><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noopener">https://github.com/s0md3v/XSStrike</a>(可识别和绕过WAF的XSS扫描工具)</li><li><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a>(支持GET，POST方式的高效XSS扫描器)</li></ul><h3 id="企业资产管理或信息泄露搜集工具"><a href="#企业资产管理或信息泄露搜集工具" class="headerlink" title="企业资产管理或信息泄露搜集工具"></a>企业资产管理或信息泄露搜集工具</h3><ul><li><a href="https://github.com/ysrc/xunfeng" target="_blank" rel="noopener">https://github.com/ysrc/xunfeng</a>(网络资产识别引擎，漏洞检测引擎)</li><li><a href="https://github.com/laramies/theHarvester" target="_blank" rel="noopener">https://github.com/laramies/theHarvester</a>(企业被搜索引擎收录敏感资产信息监控脚本：员工邮箱，子域名，主持人)</li><li><a href="https://github.com/x0day/Multisearch-v2" target="_blank" rel="noopener">https://github.com/x0day/Multisearch-v2</a>(Bing，google，360，zoomeye 等搜索引擎聚合搜索，可用于发现企业被搜索引擎收录的敏感资产信息)</li><li><a href="https://github.com/Ekultek/Zeus-Scanner" target="_blank" rel="noopener">https://github.com/Ekultek/Zeus-Scanner</a>(能成抓取搜索引擎隐藏的url，并交由sqlmap，nmap扫描)</li><li><a href="https://github.com/0xbug/Biu-framework" target="_blank" rel="noopener">https://github.com/0xbug/Biu-framework</a>(企业内网基础服务安全扫描框架)</li><li><a href="https://github.com/metac0rtex/GitHarvester" target="_blank" rel="noopener">https://github.com/metac0rtex/GitHarvester</a>(github Repo信息搜集工具)</li><li><a href="https://github.com/shengqi158/svnhack" target="_blank" rel="noopener">https://github.com/shengqi158/svnhack</a>(.svn文件夹泄漏利用工具)</li><li><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">https://github.com/repoog/GitPrey</a>(GitHub敏感信息扫描工具)</li><li><a href="https://github.com/0xbug/Hawkeye" target="_blank" rel="noopener">https://github.com/0xbug/Hawkeye</a>(企业资产，敏感信息GitHub泄露监控系统)</li><li><a href="https://github.com/lianfeng30/githubscan" target="_blank" rel="noopener">https://github.com/lianfeng30/githubscan</a>(根据企业关键词进行项目检索以及相应敏感文件和文件内容扫描的工具)</li><li><a href="https://github.com/UnkL4b/GitMiner" target="_blank" rel="noopener">https://github.com/UnkL4b/GitMiner</a>(github敏感信息搜索工具)</li><li><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">https://github.com/lijiejie/GitHack</a>( .git文件夹泄漏利用工具)</li><li><a href="https://github.com/dxa4481/truffleHog" target="_blank" rel="noopener">https://github.com/dxa4481/truffleHog</a>(GitHub敏感信息扫描工具，包括检测提交等)</li><li><a href="https://github.com/1N3/Goohak" target="_blank" rel="noopener">https://github.com/1N3/Goohak</a>(自动化对指定域名进行Google hacking搜索并收集信息)</li><li><a href="https://github.com/UKHomeOffice/repo-security-scanner" target="_blank" rel="noopener">https://github.com/UKHomeOffice/repo-security-scanner</a>(用于搜索git的承诺中的敏感信息，例如密码，私钥等的客户端工具)</li><li><a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a>(Github敏感信息泄露扫描)</li><li><a href="https://github.com/MiSecurity/x-patrol" target="_blank" rel="noopener">https://github.com/MiSecurity/x-patrol</a>(Github泄露巡航工具)</li><li><a href="https://github.com/1N3/BlackWidow" target="_blank" rel="noopener">https://github.com/1N3/BlackWidow</a>(Web站点信息搜集工具，包括邮箱，电话等信息)</li><li><a href="https://github.com/anshumanbh/git-all-secrets" target="_blank" rel="noopener">https://github.com/anshumanbh/git-all-secrets</a>(集合多个开源GitHub敏感信息扫描的企业信息泄露巡航工具)</li><li><a href="https://github.com/s0md3v/Photon" target="_blank" rel="noopener">https://github.com/s0md3v/Photon</a>(可以提取网址，电子邮件，文件，网站帐户等的高速爬虫)</li></ul><h3 id="webshell的检测或木马分析工具"><a href="#webshell的检测或木马分析工具" class="headerlink" title="webshell的检测或木马分析工具"></a>webshell的检测或木马分析工具</h3><ul><li><a href="https://github.com/he1m4n6a/findWebshell" target="_blank" rel="noopener">https://github.com/he1m4n6a/findWebshell</a>(一款简单的webshell检测工具)</li><li><a href="https://github.com/Tencent/HaboMalHunter" target="_blank" rel="noopener">https://github.com/Tencent/HaboMalHunter</a>(哈勃分析系统，LINUX系统病毒分析及安全检测)</li><li><a href="https://github.com/PlagueScanner/PlagueScanner" target="_blank" rel="noopener">https://github.com/PlagueScanner/PlagueScanner</a>(使用python实现的集成ClamAV，ESET，Bitdefender的反病毒引擎)</li><li><a href="https://github.com/nbs-system/php-malware-finder" target="_blank" rel="noopener">https://github.com/nbs-system/php-malware-finder</a>(一款高效率PHP-webshell扫描工具)</li><li><a href="https://github.com/emposha/PHP-Shell-Detector/" target="_blank" rel="noopener">https://github.com/emposha/PHP-Shell-Detector/</a>(测试效率高达99%的webshell检测工具)</li><li><a href="https://github.com/erevus-cn/scan_webshell" target="_blank" rel="noopener">https://github.com/erevus-cn/scan_webshell</a>(一款简洁的的Webshell扫描工具)</li><li><a href="https://github.com/emposha/Shell-Detector" target="_blank" rel="noopener">https://github.com/emposha/Shell-Detector</a>(Webshell扫描工具，支持php / perl / asp / aspx webshell扫描)</li><li><a href="https://github.com/m4rco-/dorothy2" target="_blank" rel="noopener">https://github.com/m4rco-/dorothy2</a>(一款木马，僵尸网络分析框架)</li><li><a href="https://github.com/droidefense/engine" target="_blank" rel="noopener">https://github.com/droidefense/engine</a>(高级安卓木马病毒分析框架)</li></ul><h3 id="内网渗透或扫描工具"><a href="#内网渗透或扫描工具" class="headerlink" title="内网渗透或扫描工具"></a>内网渗透或扫描工具</h3><ul><li><a href="https://github.com/lcatro/network_backdoor_scanner" target="_blank" rel="noopener">https://github.com/lcatro/network_backdoor_scanner</a>(基于网络流量的内网探测框架)</li><li><a href="https://github.com/fdiskyou/hunter" target="_blank" rel="noopener">https://github.com/fdiskyou/hunter</a>(调用Windows API枚举用户登录信息)</li><li><a href="https://github.com/BlackHole1/WebRtcXSS" target="_blank" rel="noopener">https://github.com/BlackHole1/WebRtcXSS</a>(自动化利用XSS入侵内网)</li></ul><h3 id="中间件扫描器或指纹识别工具"><a href="#中间件扫描器或指纹识别工具" class="headerlink" title="中间件扫描器或指纹识别工具"></a>中间件扫描器或指纹识别工具</h3><ul><li><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">https://github.com/ring04h/wyportmap</a>(目标端口扫描+系统服务指纹识别)</li><li><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">https://github.com/ring04h/weakfilescan</a>(动态多线程敏感信息泄露检测工具)</li><li><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a>(WAF产品指纹识别)</li><li><a href="https://github.com/rbsec/sslscan" target="_blank" rel="noopener">https://github.com/rbsec/sslscan</a>(SSL类型识别)</li><li><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">https://github.com/urbanadventurer/whatweb</a>(Web指纹识别)</li><li><a href="https://github.com/tanjiti/FingerPrint" target="_blank" rel="noopener">https://github.com/tanjiti/FingerPrint</a>(Web应用指纹识别)</li><li><a href="https://github.com/nanshihui/Scan-T" target="_blank" rel="noopener">https://github.com/nanshihui/Scan-T</a>(网络爬虫式指纹识别)</li><li><a href="https://github.com/OffensivePython/Nscan" target="_blank" rel="noopener">https://github.com/OffensivePython/Nscan</a>(基于Masscan和Zmap的网络扫描器)</li><li><a href="https://github.com/ywolf/F-NAScan" target="_blank" rel="noopener">https://github.com/ywolf/F-NAScan</a>(网络资产信息扫描，ICMP存活探测，端口扫描，端口指纹服务识别)</li><li><a href="https://github.com/ywolf/F-MiddlewareScan" target="_blank" rel="noopener">https://github.com/ywolf/F-MiddlewareScan</a>(中间件扫描)</li><li><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">https://github.com/maurosoria/dirsearch</a>(web路径收集与扫描)</li><li><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">https://github.com/x0day/bannerscan</a>(C段横幅与路径扫描)</li><li><a href="https://github.com/RASSec/RASscan" target="_blank" rel="noopener">https://github.com/RASSec/RASscan</a>(端口服务扫描)</li><li><a href="https://github.com/3xp10it/bypass_waf" target="_blank" rel="noopener">https://github.com/3xp10it/bypass_waf</a>(waf自动暴破)</li><li><a href="https://github.com/3xp10it/xcdn" target="_blank" rel="noopener">https://github.com/3xp10it/xcdn</a>(尝试找出cdn背后的真实ip)</li><li><a href="https://github.com/Xyntax/BingC" target="_blank" rel="noopener">https://github.com/Xyntax/BingC</a>(基于Bing搜索引擎的C段/旁站查询，多线程，支持API)</li><li><a href="https://github.com/Xyntax/DirBrute" target="_blank" rel="noopener">https://github.com/Xyntax/DirBrute</a>(多线程WEB目录爆破工具)</li><li><a href="https://github.com/zer0h/httpscan" target="_blank" rel="noopener">https://github.com/zer0h/httpscan</a>(一个爬虫式的网段Web主机发现小工具)</li><li><a href="https://github.com/lietdai/doom" target="_blank" rel="noopener">https://github.com/lietdai/doom</a>(Thorn上实现的分布式任务分发的ip端口漏洞扫描器)</li><li><a href="https://github.com/chichou/grab.js" target="_blank" rel="noopener">https://github.com/chichou/grab.js</a>(类似zgrab的快速TCP指纹抓取解析工具，支持更多协议)</li><li><a href="https://github.com/Nitr4x/whichCDN" target="_blank" rel="noopener">https://github.com/Nitr4x/whichCDN</a>(CDN识别，检测)</li><li><a href="https://github.com/secfree/bcrpscan" target="_blank" rel="noopener">https://github.com/secfree/bcrpscan</a>(基于爬虫的web路径扫描器)</li><li><a href="https://github.com/mozilla/ssh_scan" target="_blank" rel="noopener">https://github.com/mozilla/ssh_scan</a>(服务器ssh配置信息扫描)</li><li><a href="https://github.com/18F/domain-scan" target="_blank" rel="noopener">https://github.com/18F/domain-scan</a>(针对域名及其子域名的资产数据检测/扫描，包括http / https检测等)</li><li><a href="https://github.com/ggusoft/inforfinder" target="_blank" rel="noopener">https://github.com/ggusoft/inforfinder</a>(域名资产收集及指纹识别工具)</li><li><a href="https://github.com/boy-hack/gwhatweb" target="_blank" rel="noopener">https://github.com/boy-hack/gwhatweb</a>(CMS识别python gevent实现)</li><li><a href="https://github.com/Mosuan/FileScan" target="_blank" rel="noopener">https://github.com/Mosuan/FileScan</a>(敏感文件扫描/二次判断降低误报率/扫描内容规则化/多目录扫描)</li><li><a href="https://github.com/Xyntax/FileSensor" target="_blank" rel="noopener">https://github.com/Xyntax/FileSensor</a>(基于爬虫的动态敏感文件探测工具)</li><li><a href="https://github.com/deibit/cansina" target="_blank" rel="noopener">https://github.com/deibit/cansina</a>(web路径扫描工具)</li><li><a href="https://github.com/0xbug/Howl" target="_blank" rel="noopener">https://github.com/0xbug/Howl</a>(网络设备web服务指纹扫描与检索)</li><li><a href="https://github.com/mozilla/cipherscan" target="_blank" rel="noopener">https://github.com/mozilla/cipherscan</a>(目标主机服务ssl类型识别)</li><li><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a>(Web应用fuzz工具，框架，同时可用于web路径/服务扫描)</li><li><a href="https://github.com/s0md3v/Breacher" target="_blank" rel="noopener">https://github.com/s0md3v/Breacher</a>(多线程的后台路径扫描器，也可用于发现重定向漏洞后执行)</li><li><a href="https://github.com/ztgrace/changeme" target="_blank" rel="noopener">https://github.com/ztgrace/changeme</a>(弱口令扫描器，不仅支持普通登录页，也支持ssh，mongodb等组件)</li><li><a href="https://github.com/medbenali/CyberScan" target="_blank" rel="noopener">https://github.com/medbenali/CyberScan</a>(渗透测试辅助工具，支持分析数据包，解码，端口扫描，IP地址分析等)</li><li><a href="https://github.com/m0nad/HellRaiser" target="_blank" rel="noopener">https://github.com/m0nad/HellRaiser</a>(基于nmap的扫描器，与cve漏洞关联)</li><li><a href="https://github.com/scipag/vulscan" target="_blank" rel="noopener">https://github.com/scipag/vulscan</a>(基于nmap的高级漏洞扫描器，命令行环境使用)</li><li><a href="https://github.com/jekyc/wig" target="_blank" rel="noopener">https://github.com/jekyc/wig</a>(web应用信息搜集工具)</li><li><a href="https://github.com/eldraco/domain_analyzer" target="_blank" rel="noopener">https://github.com/eldraco/domain_analyzer</a>(围绕web服务的域名进行信息收集和“域传送”等漏洞扫描，也支持针对背后的服务器端口扫描等)</li><li><a href="https://github.com/cloudtracer/paskto" target="_blank" rel="noopener">https://github.com/cloudtracer/paskto</a>(基于Nikto扫描规则的被动式路径扫描以及信息爬虫)</li><li><a href="https://github.com/zerokeeper/WebEye" target="_blank" rel="noopener">https://github.com/zerokeeper/WebEye</a>(快速识别WEB服务器类型，CMS类型，WAF类型，WHOIS信息，以及语言框架)</li><li><a href="https://github.com/m3liot/shcheck" target="_blank" rel="noopener">https://github.com/m3liot/shcheck</a>(用于检查web服务的http header的安全性)</li><li><a href="https://github.com/aipengjie/sensitivefilescan" target="_blank" rel="noopener">https://github.com/aipengjie/sensitivefilescan</a>(一款高效快捷的敏感文件扫描工具)</li><li><a href="https://github.com/fnk0c/cangibrina" target="_blank" rel="noopener">https://github.com/fnk0c/cangibrina</a>(通过字典穷举，google，robots.txt等途径的跨平台后台管理路径扫描器)</li><li><a href="https://github.com/n4xh4ck5/CMSsc4n" target="_blank" rel="noopener">https://github.com/n4xh4ck5/CMSsc4n</a>(常规CMS指纹识别)</li><li><a href="https://github.com/Ekultek/WhatWaf" target="_blank" rel="noopener">https://github.com/Ekultek/WhatWaf</a>(WAF指纹识别及自动化绕过工具)</li><li><a href="https://github.com/dzonerzy/goWAPT" target="_blank" rel="noopener">https://github.com/dzonerzy/goWAPT</a>(网络应用模糊工具，框架，同时可用于网络路径/服务扫描)</li><li><a href="https://github.com/blackye/webdirdig" target="_blank" rel="noopener">https://github.com/blackye/webdirdig</a>(web敏感目录/信息泄漏扫描脚本)</li><li><a href="https://github.com/GitHackTools/BillCipher" target="_blank" rel="noopener">https://github.com/GitHackTools/BillCipher</a>(用于网站或IP地址的信息收集工具)</li><li><a href="https://github.com/boy-hack/w8fuckcdn" target="_blank" rel="noopener">https://github.com/boy-hack/w8fuckcdn</a>(通过扫描全网获得真实IP的自动化程序)</li><li><a href="https://github.com/boy-hack/w11scan" target="_blank" rel="noopener">https://github.com/boy-hack/w11scan</a>(分布式WEB指纹识别平台)</li><li><a href="https://github.com/Nekmo/dirhunt" target="_blank" rel="noopener">https://github.com/Nekmo/dirhunt</a>(爬虫式web目录扫描工具)</li></ul><h3 id="专用-即特定性针对某些组件-扫描器"><a href="#专用-即特定性针对某些组件-扫描器" class="headerlink" title="专用(即特定性针对某些组件)扫描器"></a>专用(即特定性针对某些组件)扫描器</h3><ul><li><a href="https://github.com/blackye/Jenkins" target="_blank" rel="noopener">https://github.com/blackye/Jenkins</a>(Jenkins漏洞探测，用户抓取爆破)</li><li><a href="https://github.com/code-scan/dzscan" target="_blank" rel="noopener">https://github.com/code-scan/dzscan</a>(首款集成化的Discuz扫描工具)</li><li><a href="https://github.com/chuhades/CMS-Exploit-Framework" target="_blank" rel="noopener">https://github.com/chuhades/CMS-Exploit-Framework</a>(一款简洁优雅的CMS扫描利用框架)</li><li><a href="https://github.com/lijiejie/IIS_shortname_Scanner" target="_blank" rel="noopener">https://github.com/lijiejie/IIS_shortname_Scanner</a>(IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/riusksk/FlashScanner" target="_blank" rel="noopener">https://github.com/riusksk/FlashScanner</a>(flashxss扫描)</li><li><a href="https://github.com/coffeehb/SSTIF" target="_blank" rel="noopener">https://github.com/coffeehb/SSTIF</a>(一个起毛服务器端模板注入漏洞的半自动化工具)</li><li><a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">https://github.com/epinna/tplmap</a>(服务器端模板注入漏洞检测与利用工具)</li><li><a href="https://github.com/cr0hn/dockerscan" target="_blank" rel="noopener">https://github.com/cr0hn/dockerscan</a>(Docker扫描工具)</li><li><a href="https://github.com/m4ll0k/WPSeku" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSeku</a>(一款精简的wordpress扫描工具)</li><li><a href="https://github.com/rastating/wordpress-exploit-framework" target="_blank" rel="noopener">https://github.com/rastating/wordpress-exploit-framework</a>(集成化wordpress漏洞利用框架)</li><li><a href="https://github.com/ilmila/J2EEScan" target="_blank" rel="noopener">https://github.com/ilmila/J2EEScan</a>(用于扫描J2EE应用的一款burpsuite插件)</li><li><a href="https://github.com/riusksk/StrutScan" target="_blank" rel="noopener">https://github.com/riusksk/StrutScan</a>(一款基于perl的strut2的历史漏洞扫描器)</li><li><a href="https://github.com/D35m0nd142/LFISuite" target="_blank" rel="noopener">https://github.com/D35m0nd142/LFISuite</a>(本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/0x4D31/salt-scanner" target="_blank" rel="noopener">https://github.com/0x4D31/salt-scanner</a>(基于Salt Open以及Vulners Linux Audit API的linux漏洞扫描器，支持与JIRA，slack平台结合使用)</li><li><a href="https://github.com/tijme/angularjs-csti-scanner" target="_blank" rel="noopener">https://github.com/tijme/angularjs-csti-scanner</a>(自动化探测客户端AngularJS模板注入漏洞工具)</li><li><a href="https://github.com/irsdl/IIS-ShortName-Scanner" target="_blank" rel="noopener">https://github.com/irsdl/IIS-ShortName-Scanner</a>(Java编写的IIS短文件名暴力枚举漏洞利用工具)</li><li><a href="https://github.com/swisskyrepo/Wordpresscan" target="_blank" rel="noopener">https://github.com/swisskyrepo/Wordpresscan</a>(基于WPScan以及WPSeku的优化版wordpress扫描器)</li><li><a href="https://github.com/CHYbeta/cmsPoc" target="_blank" rel="noopener">https://github.com/CHYbeta/cmsPoc</a>(CMS渗透测试框架)</li><li><a href="https://github.com/rudSarkar/crlf-injector" target="_blank" rel="noopener">https://github.com/rudSarkar/crlf-injector</a>(CRLF注入漏洞批量扫描)</li><li><a href="https://github.com/3gstudent/Smbtouch-Scanner" target="_blank" rel="noopener">https://github.com/3gstudent/Smbtouch-Scanner</a>(自动化扫描内网中存在的由影子经纪人泄露的ETERNAL系列漏洞)</li><li><a href="https://github.com/utiso/dorkbot" target="_blank" rel="noopener">https://github.com/utiso/dorkbot</a>(通过定制化的谷歌搜索引擎进行漏洞页面搜寻及扫描)</li><li><a href="https://github.com/OsandaMalith/LFiFreak" target="_blank" rel="noopener">https://github.com/OsandaMalith/LFiFreak</a>(本地文件包含漏洞利用及扫描工具，支持反弹shell)</li><li><a href="https://github.com/mak-/parameth" target="_blank" rel="noopener">https://github.com/mak-/parameth</a>(用于枚举脚本的GET / POST未知参数字段)</li><li><a href="https://github.com/Lucifer1993/struts-scan" target="_blank" rel="noopener">https://github.com/Lucifer1993/struts-scan</a>(struts2的漏洞全版本检测和利用工具)</li><li><a href="https://github.com/hahwul/a2sv" target="_blank" rel="noopener">https://github.com/hahwul/a2sv</a>(SSL漏洞扫描，例如心脏滴血漏洞等)</li><li><a href="https://github.com/NullArray/DorkNet" target="_blank" rel="noopener">https://github.com/NullArray/DorkNet</a>(基于搜索引擎的漏洞网页搜寻)</li><li><a href="https://github.com/NickstaDB/BaRMIe" target="_blank" rel="noopener">https://github.com/NickstaDB/BaRMIe</a>(用于攻击爆破Java Remote Method Invocation服务的工具)</li><li><a href="https://github.com/RetireJS/grunt-retire" target="_blank" rel="noopener">https://github.com/RetireJS/grunt-retire</a>(扫描js扩展库的常见漏洞)</li><li><a href="https://github.com/kotobukki/BDA" target="_blank" rel="noopener">https://github.com/kotobukki/BDA</a>(针对的hadoop /火花等大数据平台的的漏洞探测工具)</li><li><a href="https://github.com/jagracey/Regex-DoS" target="_blank" rel="noopener">https://github.com/jagracey/Regex-DoS</a>(RegEx拒绝服务扫描器)</li><li><a href="https://github.com/milesrichardson/docker-onion-nmap" target="_blank" rel="noopener">https://github.com/milesrichardson/docker-onion-nmap</a>(使用NMAP扫描的Tor网络上隐藏的“洋葱”服务)</li><li><a href="https://github.com/Moham3dRiahi/XAttacker" target="_blank" rel="noopener">https://github.com/Moham3dRiahi/XAttacker</a>(Web CMS Exploit工具，包含针对主流CMS的66个不同的漏洞利用)</li><li><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a>(一个迷你的信息泄漏批量扫描脚本)</li><li><a href="https://github.com/almandin/fuxploider" target="_blank" rel="noopener">https://github.com/almandin/fuxploider</a>(文件上传漏洞扫描器及利用工具)</li><li><a href="https://github.com/Ice3man543/SubOver" target="_blank" rel="noopener">https://github.com/Ice3man543/SubOver</a>(子域名接管漏洞检测工具，支持30+云服务托管检测)</li><li><a href="https://github.com/Jamalc0m/wphunter" target="_blank" rel="noopener">https://github.com/Jamalc0m/wphunter</a>(WordPress的漏洞扫描器，同时也支持敏感文件泄露扫描)</li><li><a href="https://github.com/retirejs/retire.js" target="_blank" rel="noopener">https://github.com/retirejs/retire.js</a>(检测网站依赖的JavaScript库中存在的已知通用漏洞)</li><li><a href="https://github.com/3xp10it/xupload" target="_blank" rel="noopener">https://github.com/3xp10it/xupload</a>(自动检测上传功能是否可上传webshell)</li><li><a href="https://github.com/mobrine-mob/M0B-tool" target="_blank" rel="noopener">https://github.com/mobrine-mob/M0B-tool</a>(CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/rezasp/vbscan" target="_blank" rel="noopener">https://github.com/rezasp/vbscan</a>(论坛框架vBulletin黑盒漏洞扫描器)</li><li><a href="https://github.com/MrSqar-Ye/BadMod" target="_blank" rel="noopener">https://github.com/MrSqar-Ye/BadMod</a>(CMS指纹识别及自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/CMSeeK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/CMSeeK</a>(CMS漏洞检测和利用套件)</li><li><a href="https://github.com/cloudsploit/scans" target="_blank" rel="noopener">https://github.com/cloudsploit/scans</a>(AWS安全审计工具)</li><li><a href="https://github.com/radenvodka/SVScanner" target="_blank" rel="noopener">https://github.com/radenvodka/SVScanner</a>(针对wp，magento，joomla等CMS的漏洞扫描器及自动利用工具)</li><li><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">https://github.com/rezasp/joomscan</a>(OWASP旗下joomla漏洞扫描项目)</li><li><a href="https://github.com/6IX7ine/djangohunter" target="_blank" rel="noopener">https://github.com/6IX7ine/djangohunter</a>(用于检测因错误配置导致敏感信息暴露的Django应用程序)</li></ul><h3 id="无线网络-审计-扫描器"><a href="#无线网络-审计-扫描器" class="headerlink" title="无线网络(审计)扫描器"></a>无线网络(审计)扫描器</h3><ul><li><a href="https://github.com/savio-code/fern-wifi-cracker/" target="_blank" rel="noopener">https://github.com/savio-code/fern-wifi-cracker/</a>(无线安全审计工具)</li><li><a href="https://github.com/m4n3dw0lf/PytheM" target="_blank" rel="noopener">https://github.com/m4n3dw0lf/PytheM</a>(Python网络/渗透测试工具)</li><li><a href="https://github.com/P0cL4bs/WiFi-Pumpkin" target="_blank" rel="noopener">https://github.com/P0cL4bs/WiFi-Pumpkin</a>(无线安全渗透测试套件)</li><li><a href="https://github.com/MisterBianco/BoopSuite" target="_blank" rel="noopener">https://github.com/MisterBianco/BoopSuite</a>(无线网络审计工具，支持2-5GHZ频段)</li><li><a href="https://github.com/DanMcInerney/LANs.py" target="_blank" rel="noopener">https://github.com/DanMcInerney/LANs.py</a>(ARP欺骗，无线网络劫持)</li><li><a href="https://github.com/besimaltnok/PiFinger" target="_blank" rel="noopener">https://github.com/besimaltnok/PiFinger</a>(检查wifi是否是“大菠萝”所开放的热点，并给予网络评分)</li><li><a href="https://github.com/derv82/wifite2" target="_blank" rel="noopener">https://github.com/derv82/wifite2</a>(自动化无线网络攻击工具wifite的重构版本)</li></ul><h3 id="局域网络-本地网络-扫描器"><a href="#局域网络-本地网络-扫描器" class="headerlink" title="局域网络(本地网络)扫描器"></a>局域网络(本地网络)扫描器</h3><ul><li><a href="https://github.com/sowish/LNScan" target="_blank" rel="noopener">https://github.com/sowish/LNScan</a>(基于BBScan via.lijiejie的本地网络扫描)</li><li>你自己网络扫描</li><li><a href="https://github.com/SkyLined/LocalNetworkScanner" target="_blank" rel="noopener">https://github.com/SkyLined/LocalNetworkScanner</a>(基于JavaScript的的本地网络扫描)</li><li>自由软件网址：地址端口扫描</li></ul><h3 id="代码审计工具或扫描器"><a href="#代码审计工具或扫描器" class="headerlink" title="代码审计工具或扫描器"></a>代码审计工具或扫描器</h3><ul><li><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">https://github.com/wufeifei/cobra</a>(白盒代码安全审计系统)</li><li><a href="https://github.com/OneSourceCat/phpvulhunter" target="_blank" rel="noopener">https://github.com/OneSourceCat/phpvulhunter</a>(静态PHP代码审计)</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">https://github.com/Qihoo360/phptrace</a>(跟踪，分析PHP运行情况的工具)</li><li><a href="https://github.com/ajinabraham/NodeJsScan" target="_blank" rel="noopener">https://github.com/ajinabraham/NodeJsScan</a>(的NodeJS应用代码审计)</li><li><a href="https://github.com/shengqi158/pyvulhunter" target="_blank" rel="noopener">https://github.com/shengqi158/pyvulhunter</a>(Python应用审计)</li><li><a href="https://github.com/presidentbeef/brakeman" target="_blank" rel="noopener">https://github.com/presidentbeef/brakeman</a>(Ruby on Rails应用静态代码分析)</li><li><a href="https://github.com/python-security/pyt" target="_blank" rel="noopener">https://github.com/python-security/pyt</a>(Python应用静态代码审计)</li><li><a href="https://github.com/m4ll0k/WPSploit" target="_blank" rel="noopener">https://github.com/m4ll0k/WPSploit</a>(WordPress插件代码安全审计)</li><li><a href="https://github.com/emanuil/php-reaper" target="_blank" rel="noopener">https://github.com/emanuil/php-reaper</a>(用于扫描PHP应用程序中可能存在SQL漏洞的ADOdb代码)</li><li><a href="https://github.com/lowjoel/phortress" target="_blank" rel="noopener">https://github.com/lowjoel/phortress</a>(用于检测潜在安全漏洞的PHP静态代码分析工具)</li></ul><h3 id="模块化设计扫描器或漏洞检测框架"><a href="#模块化设计扫描器或漏洞检测框架" class="headerlink" title="模块化设计扫描器或漏洞检测框架"></a>模块化设计扫描器或漏洞检测框架</h3><ul><li><a href="https://github.com/az0ne/AZScanner" target="_blank" rel="noopener">https://github.com/az0ne/AZScanner</a>(自动漏洞扫描器，子域名爆破，端口扫描，目录爆破，常用框架漏洞检测)</li><li><a href="https://github.com/blackye/lalascan" target="_blank" rel="noopener">https://github.com/blackye/lalascan</a>(集合owasp top10漏洞扫描和边界资产发现能力的分布式web漏洞扫描框架)</li><li><a href="https://github.com/blackye/BkScanner" target="_blank" rel="noopener">https://github.com/blackye/BkScanner</a>(BkScanner分布式，插件化web漏洞扫描器)</li><li><a href="https://github.com/ysrc/GourdScanV2" target="_blank" rel="noopener">https://github.com/ysrc/GourdScanV2</a>(ysrc出品的被动式漏洞扫描工具)</li><li><a href="https://github.com/netxfly/passive_scan" target="_blank" rel="noopener">https://github.com/netxfly/passive_scan</a>(基于http代理的web漏洞扫描器)</li><li><a href="https://github.com/1N3/Sn1per" target="_blank" rel="noopener">https://github.com/1N3/Sn1per</a>(自动化扫描器，包括中间件扫描以及设备指纹识别)</li><li><a href="https://github.com/RASSec/pentestEr_Fully-automatic-scanner" target="_blank" rel="noopener">https://github.com/RASSec/pentestEr_Fully-automatic-scanner</a>(定向全自动化渗透测试工具)</li><li><a href="https://github.com/3xp10it/3xp10it" target="_blank" rel="noopener">https://github.com/3xp10it/3xp10it</a>(自动化渗透测试框架，支持cdn真实ip查找，指纹识别等)</li><li><a href="https://github.com/Lcys/lcyscan" target="_blank" rel="noopener">https://github.com/Lcys/lcyscan</a>(蟒插件化漏洞扫描器，支持生成扫描报表)</li><li><a href="https://github.com/Xyntax/POC-T" target="_blank" rel="noopener">https://github.com/Xyntax/POC-T</a>(渗透测试插件化并发框架)</li><li><a href="https://github.com/v3n0m-Scanner/V3n0M-Scanner" target="_blank" rel="noopener">https://github.com/v3n0m-Scanner/V3n0M-Scanner</a>(支持检测SQLI / XSS / LFI / RFI等漏洞的扫描器)</li><li><a href="https://github.com/Skycrab/leakScan" target="_blank" rel="noopener">https://github.com/Skycrab/leakScan</a>(Web图形化的漏洞扫描框架)</li><li><a href="https://github.com/zhangzhenfeng/AnyScan" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/AnyScan</a>(一款网络化的自动化渗透测试框架)</li><li><a href="https://github.com/Tuhinshubhra/RED_HAWK" target="_blank" rel="noopener">https://github.com/Tuhinshubhra/RED_HAWK</a>(一款集成信息收集，漏洞扫描，指纹识别等的多合一扫描工具)</li><li><a href="https://github.com/Arachni/arachni" target="_blank" rel="noopener">https://github.com/Arachni/arachni</a>(高度集成化的Web应用漏洞扫描框架，支持REST，RPC等api调用)</li><li><a href="https://github.com/infobyte/faraday" target="_blank" rel="noopener">https://github.com/infobyte/faraday</a>(集成化渗透测试辅助平台及漏洞管理平台)</li><li><a href="https://github.com/juansacco/exploitpack" target="_blank" rel="noopener">https://github.com/juansacco/exploitpack</a>(渗透测试集成框架，包含超过38,000+攻击)</li><li><a href="https://github.com/swisskyrepo/DamnWebScanner" target="_blank" rel="noopener">https://github.com/swisskyrepo/DamnWebScanner</a>(基于铬/歌剧插件的被动式漏洞扫描)</li><li><a href="https://github.com/anilbaranyelken/tulpar" target="_blank" rel="noopener">https://github.com/anilbaranyelken/tulpar</a>(支持多种网络漏洞扫描，命令行环境使用)</li><li><a href="https://github.com/m4ll0k/Spaghetti" target="_blank" rel="noopener">https://github.com/m4ll0k/Spaghetti</a>(web应用扫描器，支持指纹识别，文件目录爆破，SQL / XSS / RFI等漏洞扫描，也可直接用于struts，ShellShock等扫描)</li><li><a href="https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest" target="_blank" rel="noopener">https://github.com/Yukinoshita47/Yuki-Chan-The-Auto-Pentest</a>(集成子域名枚举，nmap，waf指纹识别等模块的web应用扫描器)</li><li><a href="https://github.com/0xsauby/yasuo" target="_blank" rel="noopener">https://github.com/0xsauby/yasuo</a>(使用ruby开发的扫描网络中主机存在的第三方web应用服务漏洞)</li><li><a href="https://github.com/hatRiot/clusterd" target="_blank" rel="noopener">https://github.com/hatRiot/clusterd</a>(Web应用自动化扫描框架，支持自动化上传webshell)</li><li><a href="https://github.com/erevus-cn/pocscan" target="_blank" rel="noopener">https://github.com/erevus-cn/pocscan</a>(一款开源Poc调用框架，可轻松调用Pocsuite，Tangscan，Beebeeto，Knowsec老版本POC，可使用docker部署)</li><li><a href="https://github.com/TophantTechnology/osprey" target="_blank" rel="noopener">https://github.com/TophantTechnology/osprey</a>(斗象能力中心出品并长期维护的开源漏洞检测框架)</li><li><a href="https://github.com/yangbh/Hammer" target="_blank" rel="noopener">https://github.com/yangbh/Hammer</a>(Web应用漏洞扫描框架)</li><li><a href="https://github.com/Lucifer1993/AngelSword" target="_blank" rel="noopener">https://github.com/Lucifer1993/AngelSword</a>(Web应用漏洞扫描框架，基于python3)</li><li><a href="https://github.com/secrary/EllaScanner" target="_blank" rel="noopener">https://github.com/secrary/EllaScanner</a>(被动式漏洞扫描，支持历史cve编号漏洞识别)</li><li><a href="https://github.com/zaproxy/zaproxy" target="_blank" rel="noopener">https://github.com/zaproxy/zaproxy</a>(OWASP ZAP核心项目出品的综合性渗透测试工具)</li><li><a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">https://github.com/sullo/nikto</a>(Web服务综合型扫描器，用于指定目标的资产收集，安全配置缺陷或者安全漏洞扫描)</li><li><a href="https://github.com/s0md3v/Striker" target="_blank" rel="noopener">https://github.com/s0md3v/Striker</a>(一款多方位信息收集，指纹识别及漏洞扫描工具)</li><li><a href="https://github.com/dermotblair/webvulscan" target="_blank" rel="noopener">https://github.com/dermotblair/webvulscan</a>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞，支持输出pdf报告)</li><li><a href="https://github.com/alienwithin/OWASP-mth3l3m3nt-framework" target="_blank" rel="noopener">https://github.com/alienwithin/OWASP-mth3l3m3nt-framework</a>(渗透测试辅助工具，综合利用框架)</li><li><a href="https://github.com/toyakula/luna" target="_blank" rel="noopener">https://github.com/toyakula/luna</a>(基于被动式扫描框架的自动化web漏洞扫描工具)</li><li><a href="https://github.com/Manisso/fsociety" target="_blank" rel="noopener">https://github.com/Manisso/fsociety</a>(渗透测试辅助框架，包含信息搜集，无线渗透，网络应用扫描等功能)</li><li><a href="https://github.com/boy-hack/w9scan" target="_blank" rel="noopener">https://github.com/boy-hack/w9scan</a>(内置1200+插件的web漏洞扫描框架)</li><li><a href="https://github.com/YalcinYolalan/WSSAT" target="_blank" rel="noopener">https://github.com/YalcinYolalan/WSSAT</a>(Web服务安全评估工具，提供基于windows操作系统的简单.exe应用)</li><li><a href="https://github.com/AmyangXYZ/AssassinGo" target="_blank" rel="noopener">https://github.com/AmyangXYZ/AssassinGo</a>(使用去开发的可扩展以及高并发渗透测试框架)</li><li><a href="https://github.com/jeffzh3ng/InsectsAwake" target="_blank" rel="noopener">https://github.com/jeffzh3ng/InsectsAwake</a>(基于Flask应用框架的漏洞扫描系统)</li><li><a href="https://github.com/m4ll0k/Galileo" target="_blank" rel="noopener">https://github.com/m4ll0k/Galileo</a>(一个操作上类似metasploit的web应用安全审计框架)</li><li><a href="https://github.com/joker25000/Optiva-Framework" target="_blank" rel="noopener">https://github.com/joker25000/Optiva-Framework</a>(一款web应用漏洞扫描器，支持扫描反射型以及存储型xss，sql injection等漏洞)</li><li><a href="https://github.com/theInfectedDrake/TIDoS-Framework" target="_blank" rel="noopener">https://github.com/theInfectedDrake/TIDoS-Framework</a>(集成104个模块的Web应用程序渗透测试框架)</li></ul><h3 id="高级持续性威胁-APT-相关工具"><a href="#高级持续性威胁-APT-相关工具" class="headerlink" title="高级持续性威胁(APT)相关工具"></a>高级持续性威胁(APT)相关工具</h3><ul><li><a href="https://github.com/Neo23x0/Loki" target="_blank" rel="noopener">https://github.com/Neo23x0/Loki</a>(一款APT入侵痕迹扫描器)</li></ul><h3 id="工控系统及大型网络相关安全工具"><a href="#工控系统及大型网络相关安全工具" class="headerlink" title="工控系统及大型网络相关安全工具"></a>工控系统及大型网络相关安全工具</h3><ul><li><a href="https://github.com/w3h/icsmaster/tree/master/nse" target="_blank" rel="noopener">https://github.com/w3h/icsmaster/tree/master/nse</a>(ICS设备nmap扫描脚本)</li><li><a href="https://github.com/OpenNetworkingFoundation/DELTA" target="_blank" rel="noopener">https://github.com/OpenNetworkingFoundation/DELTA</a>(SDN安全评估框架)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本仓库收集的初衷是为向各类企业安全从业人员提供在企业信息安全防护体系建设过程中可以参考的开源安全扫描工具，以期望企业能够利用这些扫描器对自身业务进行自检，从而提高自身业务安全性。&lt;/p&gt;
&lt;p&gt;转载自: &lt;a href=&quot;http://netsecurity.51cto.com/art/201812/588880.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://netsecurity.51cto.com/art/201812/588880.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;集合github平台上的安全行业从业者自研开源扫描器的仓库，包括子域名枚举，数据库漏洞扫描，弱口令或信息泄漏扫描，端口扫描，指纹识别以及其他大型扫描器或模块化扫描器。&lt;br&gt;项目地址：&lt;a href=&quot;https://github.com/We5ter/Scanners-Box&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/We5ter/Scanners-Box&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="hack" scheme="http://yulongphp.github.io/tags/hack/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能监控那些令人激赏的命令行工具</title>
    <link href="http://yulongphp.github.io/2016/03/30/linux%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yulongphp.github.io/2016/03/30/linux性能监控常用命令/</id>
    <published>2016-03-30T07:30:00.000Z</published>
    <updated>2018-08-22T09:43:49.632Z</updated>
    
    <content type="html"><![CDATA[<p>转载出处：<a href="http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance" target="_blank" rel="noopener">http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance</a><br>英文原文：<a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/" target="_blank" rel="noopener">18 Command Line Tools to Monitor Linux Performance</a></p><p>对于系统和网络管理员来说每天监控和调试Linux系统的性能问题是一项繁重的工作。在IT领域作为一名Linux系统的管理员工作5年后，我逐渐认识到监控和保持系统启动并运行是多么的不容易。基于此原因，我们已编写了最常使用的18个命令行工具列表，这些工具将有助于每个Linux/Unix 系统管理员的工作。这些命令行工具可以在各种Linux系统下使用，可以用于监控和查找产生性能问题的原因。这个命令行工具列表提供了足够的工具，您可以挑选适用于您的监控场景的工具。<br><a id="more"></a></p><h3 id="1-Top-Linux进程监控"><a href="#1-Top-Linux进程监控" class="headerlink" title="1.Top-Linux进程监控"></a>1.Top-Linux进程监控</h3><p>Linux下的Top命令是一个性能监控程序，许多系统管理员常常用它来监控Linux性能，在许多<strong>Linux或者类Unix</strong>操作系统里都有这个命令。Top命令用于按一定的顺序显示所有正在运行而且处于活动状态的实时进程，而且会定期更新显示结果。这条命令显示了<strong>CPU的使用率、内存使用率、交换内存使用大小、高速缓存使用大小、缓冲区使用大小，进程PID、所使用命令</strong>以及其他。它还可以显示正在运行进程的内存和CPU占用多的情况。对系统管理员来说，top命令式是一个非常有用的，它可用于监控系统并在需要的时候采取正确的处理动作。让我们看看实际中的top命令。</p><pre><code># top </code></pre><p><a href="http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/Top%20Command%20Example" target="_blank" rel="noopener"><img src="/images/topCommandExample.jpg" alt="Top Command Example" title="Top Command Example"></a> Top命令举例<br> <strong>有关Top命令更多的例子，请阅读</strong> <a href="http://www.tecmint.com/12-top-command-examples-in-linux/" target="_blank" rel="noopener">:Linux下12个使用Top命令的例子</a>。</p><h3 id="2-VmStat-–-虚拟内存统计"><a href="#2-VmStat-–-虚拟内存统计" class="headerlink" title="2. VmStat – 虚拟内存统计"></a>2. VmStat – 虚拟内存统计</h3><p>Linux 的&nbsp;<strong>VmStat</strong>&nbsp;命令用于显示<strong>虚拟内存</strong>、<strong>内核线程</strong>、<strong>磁盘</strong>、<strong>系统进程</strong>、<strong>I/O 块</strong>、<strong>中断</strong>、<strong>CPU 活动</strong> 等的统计信息。缺省情况下， vmstat 命令在 Linux 系统下不可用，你需要安装一个包含了 vmstat 程序的&nbsp;<strong>sysstat</strong>&nbsp;软件包。命令格式的常见用法是：</p><pre><code># vmstatprocs -----------memory---------- ---swap-- -----io---- --system-- -----cpu----- r  b   swpd   free  inact active   si   so    bi    bo   in   cs us sy id wa st 1  0      0 810420  97380  70628    0    0   115     4   89   79  1  6 90  3  0</code></pre><p><strong>更多的 vmstat 例子，请阅读 :</strong> <a href="http://www.tecmint.com/linux-performance-monitoring-with-vmstat-and-iostat-commands/" target="_blank" rel="noopener">6 Linux 下的 Vmstat 命令实例</a> </p><h3 id="3-Lsof-列出打开的文件"><a href="#3-Lsof-列出打开的文件" class="headerlink" title="3.Lsof-列出打开的文件"></a>3.Lsof-列出打开的文件</h3><p>在许多Linux或者类Unix系统里都有lsof命令，它常用于以列表的形式显示所有打开的文件和进程。打开的文件包括<strong>磁盘文件、网络套接字、管道、设备和进程</strong>。使用这条命令的主要情形之一就是在无法挂载磁盘和显示正在使用或者打开某个文件的错误信息的时候。使用这条命令，你可以很容易地看到正在使用哪个文件。这条命令最常用的格式如下：</p><pre>#&nbsp;lsofCOMMAND&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USER&nbsp;&nbsp;&nbsp;FD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DEVICE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SIZE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NODE&nbsp;NAMEinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;cwd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4096&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;/init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;rtd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4096&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;/init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;txt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;38652&nbsp;&nbsp;&nbsp;17710339&nbsp;/sbin/initinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;129900&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196453&nbsp;/lib/ld-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;1693812&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196454&nbsp;/lib/libc-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;20668&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196479&nbsp;/lib/libdl-2.5.soinit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;245376&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196419&nbsp;/lib/libsepol.so.1init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;mem&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104,2&nbsp;&nbsp;&nbsp;&nbsp;93508&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;196431&nbsp;/lib/libselinux.so.1init&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;&nbsp;&nbsp;10u&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FIFO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,17&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;953&nbsp;/dev/initctl</pre> <p><strong>有关lsof命令的用法和例子的更多信息，请参考</strong>： <a href="http://www.tecmint.com/10-lsof-command-examples-in-linux/" target="_blank" rel="noopener">Linux下10个使用lsof命令的例子</a>。</p><h3 id="4-Tcpdump-网络包分析器"><a href="#4-Tcpdump-网络包分析器" class="headerlink" title="4.Tcpdump-网络包分析器"></a>4.Tcpdump-网络包分析器</h3><p><strong>Tcpdump</strong>是最广泛使用的<strong>网络包分析器或者包监控程序</strong>之一，它用于捕捉或者过滤网络上指定接口上接收或者传输的<strong>TCP/IP</strong>包。它还有一个选项用于把捕捉到的包保存到文件里，以便以后进行分析。在几乎所有主要的Linux发布里，tcpdump都可以使用。</p><pre>#&nbsp;tcpdump&nbsp;-i&nbsp;eth0tcpdump:&nbsp;verbose&nbsp;output&nbsp;suppressed,&nbsp;use&nbsp;-v&nbsp;or&nbsp;-vv&nbsp;for&nbsp;full&nbsp;protocol&nbsp;decodelistening&nbsp;on&nbsp;eth0,&nbsp;link-type&nbsp;EN10MB&nbsp;(Ethernet),&nbsp;capture&nbsp;size&nbsp;96&nbsp;bytes22:08:59.617628&nbsp;IP&nbsp;tecmint.com.ssh&nbsp;&gt;&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472:&nbsp;P&nbsp;2532133365:2532133481(116)&nbsp;ack&nbsp;3561562349&nbsp;win&nbsp;964822:09:07.653466&nbsp;IP&nbsp;tecmint.com.ssh&nbsp;&gt;&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472:&nbsp;P&nbsp;116:232(116)&nbsp;ack&nbsp;1&nbsp;win&nbsp;964822:08:59.617916&nbsp;IP&nbsp;115.113.134.3.static-mumbai.vsnl.net.in.28472&nbsp;&gt;&nbsp;tecmint.com.ssh:&nbsp;.&nbsp;ack&nbsp;116&nbsp;win&nbsp;64347</pre> <p><strong>要想获得更多有关tcpdump用法的信息，请参阅</strong>： <a href="http://www.tecmint.com/12-tcpdump-commands-a-network-sniffer-tool/" target="_blank" rel="noopener">Linux下12个使用Tcpdump命令的例子。</a> </p><h3 id="5-Netstat-网络状态统计"><a href="#5-Netstat-网络状态统计" class="headerlink" title="5.Netstat-网络状态统计"></a>5.Netstat-网络状态统计</h3><p>Netstat是一个用于监控<strong>进出网络</strong>的包和网络接口统计的命令行工具。它是一个非常有用的工具，系统管理员可以用来监控网络性能，定位并解决网络相关问题。</p><pre>#&nbsp;netstat&nbsp;-a&nbsp;|&nbsp;moreActive&nbsp;Internet&nbsp;connections&nbsp;(servers&nbsp;and&nbsp;established)Proto&nbsp;Recv-Q&nbsp;Send-Q&nbsp;Local&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Foreign&nbsp;Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Statetcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:mysql&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:sunrpc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:realm-rusd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:ftp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:ipp&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;localhost.localdomain:42709&nbsp;TIME_WAITtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;localhost.localdomain:smtp&nbsp;&nbsp;localhost.localdomain:42710&nbsp;TIME_WAITtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:http&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:ssh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTENtcp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;*:https&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*:*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LISTEN</pre> <p><strong>有关Netstat更多的例子，请参阅</strong>: <a href="http://www.tecmint.com/20-netstat-commands-for-linux-network-management/" target="_blank" rel="noopener">Linux下20个使用Netstat命令的例子。</a> </p><h3 id="6-Htop-–-Linux进程监控"><a href="#6-Htop-–-Linux进程监控" class="headerlink" title="6. Htop – Linux进程监控"></a>6. Htop – Linux进程监控</h3><p><strong>Htop</strong>&nbsp;是一个非常高级的交互式的实时linux进程监控工具。 它和top命令十分相似，但是它具有更丰富的特性，例如用户可以友好地管理进程，快捷键，垂直和水平方式显示进程等等。 Htop是一个第三方工具，它不包含在linux系统中，你需要使用YUM包管理工具去安装它。 关于安装的更多信息，请阅读下文.</p><pre>#&nbsp;htop</pre> <p><img src="/images/htopCommandExample.jpg" alt="Htop Command Example" title="Htop Command Example"> </p><p>Htop 命令示例截图</p><p><strong>对于Htop的安装，请读&nbsp;: <a href="http://www.tecmint.com/install-htop-linux-process-monitoring-for-rhel-centos-fedora/" target="_blank" rel="noopener">在Linux安装Htop(Linux进程监控)</a></strong> </p><h3 id="7-Iotop-监控Linux磁盘I-O"><a href="#7-Iotop-监控Linux磁盘I-O" class="headerlink" title="7.Iotop-监控Linux磁盘I/O"></a><strong>7.Iotop-监控Linux磁盘I/O</strong></h3><p><strong>Iotop</strong>命令同样也非常类似于<strong>top**</strong>命令<strong>和</strong>Htop程序<strong>，不过它具有监控并显示实时</strong>磁盘I/O和进程**的统计功能。在查找具体进程和大量使用磁盘读写进程的时候，这个工具就非常有用。</p><pre>#&nbsp;iotop</pre> <p><img src="/images/ioTopCommandExample.jpg" alt="Iotop Command Example" title="Iotop Command Example"> Iotop命令举例的截图<br> <strong>有关如何安装和使用iotop的信息，请阅读</strong>： <a href="http://www.tecmint.com/install-iotop-monitor-linux-disk-io-in-rhel-centos-and-fedora/" target="_blank" rel="noopener">在Linux下安装Iotop。</a> </p><h3 id="8-Iostat-输入-输出统计"><a href="#8-Iostat-输入-输出统计" class="headerlink" title="8.Iostat-输入/输出统计"></a>8.Iostat-输入/输出统计</h3><p><strong>Iostat</strong>是一个用于收集显示系统存储设备<strong>输入和输出</strong>状态统计的简单工具。这个工具常常用来追踪存储设备的性能问题，其中存储设备包括<strong>设备、本地磁盘，以及诸如使用NFS等的远端磁盘</strong>。</p><pre>#&nbsp;iostatLinux&nbsp;2.6.18-238.9.1.el5&nbsp;(tecmint.com)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;09/13/2012avg-cpu:&nbsp;&nbsp;%user&nbsp;&nbsp;&nbsp;%nice&nbsp;%system&nbsp;%iowait&nbsp;&nbsp;%steal&nbsp;&nbsp;&nbsp;%idle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.60&nbsp;&nbsp;&nbsp;&nbsp;3.65&nbsp;&nbsp;&nbsp;&nbsp;1.04&nbsp;&nbsp;&nbsp;&nbsp;4.29&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;88.42Device:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tps&nbsp;&nbsp;&nbsp;Blk_read/s&nbsp;&nbsp;&nbsp;Blk_wrtn/s&nbsp;&nbsp;&nbsp;Blk_read&nbsp;&nbsp;&nbsp;Blk_wrtncciss/c0d0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;17.79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;545.80&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;256.52&nbsp;&nbsp;855159769&nbsp;&nbsp;401914750cciss/c0d0p1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5459&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3518cciss/c0d0p2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16.45&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;533.97&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;245.18&nbsp;&nbsp;836631746&nbsp;&nbsp;384153384cciss/c0d0p3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.58&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.97&nbsp;&nbsp;&nbsp;&nbsp;8737650&nbsp;&nbsp;&nbsp;&nbsp;6215544cciss/c0d0p4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.00&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0cciss/c0d0p5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.63&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5.03&nbsp;&nbsp;&nbsp;&nbsp;5936778&nbsp;&nbsp;&nbsp;&nbsp;7882528cciss/c0d0p6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.08&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.46&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.34&nbsp;&nbsp;&nbsp;&nbsp;3847771&nbsp;&nbsp;&nbsp;&nbsp;3659776</pre> <p><strong>有关iostat用法和举例的更多信息，请访问</strong>: <a href="http://www.tecmint.com/linux-performance-monitoring-with-vmstat-and-iostat-commands/" target="_blank" rel="noopener">Linux下6个使用iostat命令的例子</a>。</p><h3 id="9-IPTraf-实时局域网IP监控"><a href="#9-IPTraf-实时局域网IP监控" class="headerlink" title="9.IPTraf-实时局域网IP监控"></a>9.IPTraf-实时局域网IP监控</h3><p><strong>IPTraf</strong>是一个在<strong>Linux</strong>控制台运行的、开放源代码的实时网络（<strong>局域网</strong>）监控应用。它采集了大量信息，比如通过网络的IP流量监控，包括TCP标记、ICMP详细信息、TCP/UDP流量分离、TCP连接包和字节数。同时还采集有关接口状态的常见信息和详细信息：TCP、UDP、IP、ICMP、非IP，IP校验和错误，接口活动等。</p><p><img src="/images/iptraf.png" alt="IP Traffic Monitor"> </p><p>IP流量监控<br> <strong>有关IPTraf工具用法以及其他更多信息，请访问：</strong> <a href="http://www.tecmint.com/real-time-interactive-ip-lan-monitoring-with-iptraf-tool/" target="_blank" rel="noopener">IPTraf网络监控工具</a>。</p><h3 id="10-psacct-或者-acct-监视用户活动"><a href="#10-psacct-或者-acct-监视用户活动" class="headerlink" title="10. psacct 或者 acct - 监视用户活动"></a>10. psacct 或者 acct - 监视用户活动</h3><p>psacct或者acct工具用于监视系统里每个用户的活动状况。这两个服务进程运行在后台，它们对系统上运行的每个用户的所有活动进行近距离监视，同时还监视这些活动所使用的资源情况。</p><p>系统管理员可以使用这两个工具跟踪每个用户的活动，比如用户正在做什么，他们提交了那些命令，他们使用了多少资源，他们在系统上持续了多长时间等等。</p><p>有关这些命令的安装和用法举例信息，请参阅文章：<a href="http://www.tecmint.com/how-to-monitor-user-activity-with-psacct-or-acct-tools/" target="_blank" rel="noopener">使用psacct或者acct监视用户活动</a>。</p><h3 id="11-Monit-Linux进程和服务监控工具"><a href="#11-Monit-Linux进程和服务监控工具" class="headerlink" title="11.Monit - Linux进程和服务监控工具"></a>11.Monit - Linux进程和服务监控工具</h3><p>Monit是一个免费的开源软件，也是一个基于网络的进程监控工具。它能自动监控和管理系统进程，程序，文件，文件夹，权限，总和验证码和文件系统。</p><p>这个软件能监控像Apache, MySQL, Mail, FTP, ProFTP, Nginx, SSH这样的服务。你可以通过命令行或者这个软件提供的网络借口来查看系统状态。</p><p><img src="/images/moint.jpg" alt="The Interface of Moint"> </p><p>Monit Linux系统监控</p><p>更多内容请参阅：<a href="http://www.tecmint.com/how-to-install-and-setup-monit-linux-process-and-services-monitoring-program/" target="_blank" rel="noopener">用Monit监控Linux进程</a> </p><h3 id="12-NetHogs-监视每个进程使用的网络带宽"><a href="#12-NetHogs-监视每个进程使用的网络带宽" class="headerlink" title="12.NetHogs-监视每个进程使用的网络带宽"></a>12.NetHogs-监视每个进程使用的网络带宽</h3><p><strong>NetHogs</strong>是一个开放源源代码的很小程序（与Linux下的<strong>top命令</strong>很相似），它密切监视着系统上每个进程的网络活动。同时还追踪着每个程序或者应用所使用的实时网络带宽。</p><p><img src="/images/netHogs.jpg" alt="NetHogs Linux Bandwidth Monitoring"> </p><p>NetHogs：Linux下的带宽监视<br> <strong>更多信息请参阅：</strong> <a href="http://www.tecmint.com/nethogs-monitor-per-process-network-bandwidth-usage-in-real-time/" target="_blank" rel="noopener">使用NetHogs监视Linux的网络带宽使用状况。</a></p><h3 id="13-iftop-监视网络带宽"><a href="#13-iftop-监视网络带宽" class="headerlink" title="13.iftop-监视网络带宽"></a>13.iftop-监视网络带宽</h3><p><strong>iftop</strong>是另一个在控制台运行的开放源代码系统监控应用，它显示了系统上通过网络接口的应用网络带宽使用（源主机或者目的主机）的列表，这个列表定期更新。iftop用于监视网络的使用情况，而<strong>‘top’</strong>用于监视CPU的使用情况。iftop是<strong>‘top’</strong>工具系列中的一员，它用于监视所选接口，并显示两个主机间当前网络带宽的使用情况。</p><p><img src="/images/iftop.png" alt="iftop - Network Bandwidth Monitoring"> </p><p>iftop-监视网络带宽。</p><p><strong>更多信息请参阅：</strong><a href="http://www.tecmint.com/install-iftop-bandwidth-monitoring-tool-in-rhel-centos-fedora/" target="_blank" rel="noopener">iftop-监视网络带宽的使用情况</a>。</p><h3 id="14-Monitorix-系统和网络监控"><a href="#14-Monitorix-系统和网络监控" class="headerlink" title="14 Monitorix-系统和网络监控"></a>14 Monitorix-系统和网络监控</h3><p>Monitorix 是一个免费的轻量级应用工具，它的设计初衷是运行和监控Linux/Unix服务器系统和资源等。它有一个HTTP 网络服务器，这个服务器有规律的收集系统和网络的信息并以图形化的形式展示出来。它监控系统的平均负载和使用，内存分配、磁盘健康状况、系统服务、网络端口、邮件统计（Sendmail，Postfix,Dovecot等），MySQL统计，等等。它就是用来监控系统的总体性能，帮助发现失误、瓶颈和异常活动的。</p><p><img src="/images/Monitorix.png" alt=""> </p><h3 id="15-Arpwatch-–-以太网活动监视器"><a href="#15-Arpwatch-–-以太网活动监视器" class="headerlink" title="15. Arpwatch – 以太网活动监视器"></a>15. Arpwatch – 以太网活动监视器</h3><p><strong>Arpwatch</strong>被设计用来监控Linux上的以太网地址解析 (<strong>MAC</strong>和<strong>IP</strong>地址的变化)。他在一段时间内持续监控以太网活动并输出IP和MAC地址配对变动的日志。它还可以向管理员发送邮件通知，对地址配对的增改发出警告。这对于检测网络上的ARP攻击很有用。&nbsp;</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/monitor-ethernet-activity-in-linux/" target="_blank" rel="noopener">Arpwatch to Monitor Ethernet Activity</a> </p><h3 id="16-Suricata-–-网络安全监控"><a href="#16-Suricata-–-网络安全监控" class="headerlink" title="16. Suricata – 网络安全监控"></a>16. Suricata – 网络安全监控</h3><p><strong>Suricata</strong>&nbsp;是一个开源的高性能网络安全、入侵检测和反监测工具，可以运行Linux、FreeBSD和Windows上。非营利组织<strong>OISF</strong> (<strong>Open Information Security Foundation</strong>)开发并拥有其版权。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/suricata-a-network-intrusion-detection-prevention-system/" target="_blank" rel="noopener">Suricata – A Network Intrusion Detection and Prevention System</a> </p><h3 id="17-VnStat-PHP-–-网络流量监控"><a href="#17-VnStat-PHP-–-网络流量监控" class="headerlink" title="17. VnStat PHP – 网络流量监控"></a>17. VnStat PHP – 网络流量监控</h3><p><strong>VnStat PHP</strong>&nbsp;是流行网络工具”vnstat”的基于web的前端呈现。<strong>VnStat PHP</strong>&nbsp;将网络使用情况呈现在漂亮的图形界面中。他可以显示以小时、日、月计的上传和下载流量并输出总结报告。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/vnstat-php-frontend-for-monitoring-network-bandwidth/" target="_blank" rel="noopener">VnStat PHP – Monitoring Network Bandwidth</a> </p><h3 id="18-Nagios-–-网络-服务器监控"><a href="#18-Nagios-–-网络-服务器监控" class="headerlink" title="18. Nagios – 网络/服务器监控"></a>18. Nagios – 网络/服务器监控</h3><p>Nagios是领先而强大的开源监控系统，他可以让网络/系统管理员在问题影响到正常的业务之前发现并解决它们。有了Nagios系统，管理员可以在单个窗口内远程检测Linux、Windows、开关、路由器和打印机。它可以危险警告并指出系统/服务器是否有异常，这可以间接帮助你在问题发生之前采取抢救措施。</p><p><strong>更多信息请参阅</strong> : <a href="http://www.tecmint.com/install-nagios-in-linux/" target="_blank" rel="noopener">Install Nagios Monitoring System to Monitor Remote Linux/Windows Hosts</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载出处：&lt;a href=&quot;http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oschina.net/translate/command-line-tools-to-monitor-linux-performance&lt;/a&gt;&lt;br&gt;英文原文：&lt;a href=&quot;http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;18 Command Line Tools to Monitor Linux Performance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于系统和网络管理员来说每天监控和调试Linux系统的性能问题是一项繁重的工作。在IT领域作为一名Linux系统的管理员工作5年后，我逐渐认识到监控和保持系统启动并运行是多么的不容易。基于此原因，我们已编写了最常使用的18个命令行工具列表，这些工具将有助于每个Linux/Unix 系统管理员的工作。这些命令行工具可以在各种Linux系统下使用，可以用于监控和查找产生性能问题的原因。这个命令行工具列表提供了足够的工具，您可以挑选适用于您的监控场景的工具。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yulongphp.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yulongphp.github.io/tags/linux/"/>
    
      <category term="service" scheme="http://yulongphp.github.io/tags/service/"/>
    
      <category term="nginx" scheme="http://yulongphp.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>C语言的局部变量和全局变量</title>
    <link href="http://yulongphp.github.io/2015/06/02/C%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yulongphp.github.io/2015/06/02/C语言的局部变量和全局变量/</id>
    <published>2015-06-02T09:22:13.000Z</published>
    <updated>2018-08-22T09:43:49.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在一个函数内部定义的变量称为<strong>局部变量</strong>，它的作用域仅限于该函数内，也就是说只有本函数内才能使用它们，在此函数以外是不能使用这些变量的。</p><p>例如：<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, c;          <span class="comment">/* a, b, c 有效 */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;          <span class="comment">/* x, y, i, j  有效*/</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;          <span class="comment">/* m, n 有效*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>几点说明：<br>    1) <code>main</code>函数中定义的变量也是局部变量，只能在<code>main</code>函数中使用；同时，<code>main</code>函数中也不能使用其它函数中定义的变量。main 函数也是一个函数，与其它函数地位平等。<br>    2) 不同函数中可以使用相同名字的变量，它们代表不同的对象，在内存中站不同的单元，互不混淆。<br>    3) 形式参数也是局部变量。<strong>实参给形参传值的过程也就是给局部变量赋值的过程</strong>。<br>    4) 在一个函数内部，可以在复合语句中定义变量，这些变量只在本复合语句中有效，这种复合语句也称为<code>“分程序”</code> 或 <code>“语句块”</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;          <span class="comment">/* a, b 在整个本函数内 有效*/</span></span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> c;         <span class="comment">/* c 只在当前&#123;&#125; 内有效*/</span></span><br><span class="line">c = a+b;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量c只在复合语句（程序块）内有效，离开该复合语句该变量就无效，释放内存。</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>程序的编译单位是源程序文件，一个源文件可以包含一个或若干个函数。在函数内部定义的变量是<strong>局部变量</strong>，而在函数之外定义的而变量称为外部变量，外部变量是<strong>全局变量</strong>（也称全程变量）。全局变量可以为本文件中其他函数所共用。它的有效范围为从定义变量的位置开始到本源文件结束。</p><p>例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>, q=<span class="number">5</span>;               <span class="comment">/*  p, q 在整个源文件中有效 */</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, c;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c1, c2;                <span class="comment">/*  外部变量 c1, c2 在此位置到文件结尾有效  */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了便于区分局部变量和全局变量，在C程序设计人员中有一个习惯（但非规定），将全局变量名的第一个字母用大写表示。</p><p>说明：<br>    1) 设置全局扁郎是增加了函数间数据联系的取到。由于同一文件中的所有函数都能引用全局变量的值，因此如果在一个函数中改变了全局变量的值，就能狗影响到其他函数，相当于各个函数间有直接的传递通道。由于函数的调用只能带回一个返回值，因此有时候可以利用全局变量增加函数间的联系通道，通过函数调用能够得到一个以上的值。<br>    2) 建议不在必要时不要使用全局变量，原因如下<br>        ① 全局变量在程序的全部执行过程中都占用存储单元，而不是仅在需要时才开辟单元。<br>        ② 它是函数的通用性降低了，因为函数在执行时要依赖于其所在的外部变量。如果将一个函数移植到另一个文件中，还要将有关的外部变量及值一起移植过去。但若该外部变量与其他文件与其他文件的变量名冲突时，就会出现问题，降低了程序的可靠性和通用性。在程序设计中，在划分模块式要求模块的<code>**内聚性**</code>强、与其他模块的<code>**耦合性**</code>弱。即模块的功能要单一（不要把许多互不相干的功能放到一个模块中），与其他模块的相互影响要尽量少，而用全局变量是不符合这个原则的。一般要求把c程序中的函数做成一个封闭体，除了可以通过<code>实参——形参</code>的渠道与外界发生联系外，没有其他渠道。这样的程序移植性好，可读性强。<br>        ③ 使用全局变量过多，会降低程序的清晰性，人们往往难以清楚的判断出每个瞬时各个外部变量的值。在各个函数执行时都有坑呢改变外部变量的值，程序容易出错。因此，要限制使用外部变量<br>        ④ 如果在同一个源文件件中，外部变量与局部变量同名，则在局部变量的作用范围内，外部变量被<code>屏蔽</code>，即它不起作用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;局部变量&quot;&gt;&lt;a href=&quot;#局部变量&quot; class=&quot;headerlink&quot; title=&quot;局部变量&quot;&gt;&lt;/a&gt;局部变量&lt;/h4&gt;&lt;p&gt;在一个函数内部定义的变量称为&lt;strong&gt;局部变量&lt;/strong&gt;，它的作用域仅限于该函数内，也就是说只有本函数内才能使用它们，在此函数以外是不能使用这些变量的。&lt;/p&gt;
&lt;p&gt;例如：&lt;br&gt;
    
    </summary>
    
      <category term="C" scheme="http://yulongphp.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://yulongphp.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>c语言输入和输出</title>
    <link href="http://yulongphp.github.io/2015/05/31/c%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>http://yulongphp.github.io/2015/05/31/c语言输入和输出/</id>
    <published>2015-05-31T09:36:18.000Z</published>
    <updated>2018-08-22T09:43:49.629Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C语言在显示器上输出数据"><a href="#C语言在显示器上输出数据" class="headerlink" title="C语言在显示器上输出数据"></a>C语言在显示器上输出数据</h4><p>在C语言中，有三个函数可以用来在显示器上输出数据：<br>puts()：只能输出字符串，在《C语言在屏幕上显示内容》中已经进行了介绍。<br>putchar()：只能输出单个字符，本节将会介绍。<br>printf()：可以输出各种类型的数据，在《在屏幕上输出各种类型的数据》《C语言中的整数》中都进行了介绍，本节要进行更加深入的讲解。</p><a id="more"></a><p>printf() 是最灵活、最复杂、最常用的输出函数，完全可以替代 puts() 和 putchar()，大家一定要掌握。<br>putchar()</p><p>putchar() 函数只能用来输出单个字符，例如：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    putchar(<span class="string">'a'</span>)<span class="comment">;</span></span><br><span class="line">    putchar(<span class="number">7</span>)<span class="comment">;</span></span><br><span class="line">    putchar(<span class="string">'\x46'</span>)<span class="comment">;</span></span><br><span class="line">    system(<span class="string">"pause"</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序，输出 aF，同时会听到喇叭发出“嘟”的声音。<br>关于换行</p><p>puts() 函数在输出结束时会自动换行，而 printf() 和 putchar() 不会，需要手动添加换行符\n。如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="string">"c.biancheng.net"</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'Z'</span>;</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>c.biancheng.net<br>Z100Z请按任意键继续. . .<br>printf() 的高级用法</p><p>这一节的内容有些繁杂，如果你希望加快学习进度，尽早写出有趣的代码，也可以跳过这节，后面遇到不懂的 printf 输出再来回顾。<br>虽然我们已经熟悉了 printf，但是还没有把它发挥到极致，printf 可以有更加“炫酷”的输出。</p><p>假如现在老师要求我们用C语言输出一个 4×4 的整数矩阵，为了增强阅读性，数字要对齐，怎么办呢？我们显然可以这样来做：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="attribute">a1</span>=20, <span class="attribute">a2</span>=345, <span class="attribute">a3</span>=700, <span class="attribute">a4</span>=22;</span><br><span class="line">    int <span class="attribute">b1</span>=56720, <span class="attribute">b2</span>=9999, <span class="attribute">b3</span>=20098, <span class="attribute">b4</span>=2;</span><br><span class="line">    int <span class="attribute">c1</span>=233, <span class="attribute">c2</span>=205, <span class="attribute">c3</span>=1, <span class="attribute">c4</span>=6666;</span><br><span class="line">    int <span class="attribute">d1</span>=34, <span class="attribute">d2</span>=0, <span class="attribute">d3</span>=23, <span class="attribute">d4</span>=23006783;</span><br><span class="line">    printf(<span class="string">"%d        %d       %d       %d\n"</span>, a1, a2, a3, a4);</span><br><span class="line">    printf(<span class="string">"%d     %d      %d     %d\n"</span>, b1, b2, b3, b4);</span><br><span class="line">    printf(<span class="string">"%d       %d       %d         %d\n"</span>, c1, c2, c3, c4);</span><br><span class="line">    printf(<span class="string">"%d        %d         %d        %d\n"</span>, d1, d2, d3, d4);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>20        345       700       22<br>56720     9999      20098     2<br>233       205       1         6666<br>34        0         23        23006783<br>矩阵一般在大学的《高等数学》中会讲到，m×n 的数字矩阵可以理解为把 m×n 个数字摆放成 m 行 n 列的样子。<br>看，这是多么地自虐，要敲那么多空格，还要严格控制空格数，否则输出就会错位。</p><p>类似的需求随处可见，整齐的格式会更加美观，让人觉得生动有趣。我们大可不必像上面一样，printf 可以更好的控制输出格式。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int <span class="attribute">a1</span>=20, <span class="attribute">a2</span>=345, <span class="attribute">a3</span>=700, <span class="attribute">a4</span>=22;</span><br><span class="line">    int <span class="attribute">b1</span>=56720, <span class="attribute">b2</span>=9999, <span class="attribute">b3</span>=20098, <span class="attribute">b4</span>=2;</span><br><span class="line">    int <span class="attribute">c1</span>=233, <span class="attribute">c2</span>=205, <span class="attribute">c3</span>=1, <span class="attribute">c4</span>=6666;</span><br><span class="line">    int <span class="attribute">d1</span>=34, <span class="attribute">d2</span>=0, <span class="attribute">d3</span>=23, <span class="attribute">d4</span>=23006783;</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, a1, a2, a3, a4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, b1, b2, b3, b4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, c1, c2, c3, c4);</span><br><span class="line">    printf(<span class="string">"%-9d %-9d %-9d %-9d\n"</span>, d1, d2, d3, d4);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>20        345       700       22<br>56720     9999      20098     2<br>233       205       1         6666<br>34        0         23        23006783<br>这样写起来更加方便，即使改变某个数字，也无需修改 printf 语句。</p><p>%-9d中，d表示以十进制输出，9表示最少占9个字符的宽度，宽度不足以空格补齐，-表示左对齐。综合起来，%-9d表示以十进制输出，左对齐，宽度最小为9个字符。大家可以亲自试试%9d的输出效果。</p><p>printf 格式控制字符的完整形式如下：</p><pre><code>%[flags][width][.precision]type</code></pre><blockquote><p>[xxx] 并不是C语言规定的格式，只是一种习惯写法，表示此处的内容可有可无，后面会经常见到这样的写法。</p></blockquote><p>1) type 也就是以什么类型输出，比如 %d、%f、%c，type 就分别对应 d、f、c；%-9d中 type 对应 d。type 必须有。</p><p>2) width 表示最小输出宽度，也就是占几个字符的位置；%-9d中 width 对应 9。</p><p>对于整数和小数，默认右对齐，不足的宽度以空格补齐，例如：<br>printf(“%10d%12f”, 234, 9.8);<br>输出结果为：<br>       234    9.800000<br>234 前面共有7个空格，9.8 前面有4个空格。</p><p>3) .precision 表示输出精度。</p><p>对于 %d，.precision 表示的其实是最小输出宽度，与 width 不同的是，不足的宽度以 0 补齐，例如：<br>printf(“%.10d\n”, 4309);<br>输出结果为：<br>0000004309</p><p>对于 %f，.precision 表示小数的位数，不足以 0 补齐，也就是精度，例如：<br>printf(“%.10f %.3f\n”, 23.988, 2.9328745);<br>输出结果为：<br>23.9880000000 2.933</p><p>4) flags 是标志字符，<code>%-9d</code>中 flags 对应<code>-</code>。</p><p>几种常见的标志字符<br><img src="/images/cFlags.png" alt=""></p><blockquote><p>有兴趣的读者可以猛击这里查看更多关于 printf 的输出格式。<br>printf 的这些格式规范不是“小把戏”，优美的输出格式随处可见，例如 dos 下的 dir 命令，会整齐地列出当前目录下的文件：<br><img src="/images/dosDir.png" alt=""></p></blockquote><h4 id="C语言从键盘输入数据"><a href="#C语言从键盘输入数据" class="headerlink" title="C语言从键盘输入数据"></a>C语言从键盘输入数据</h4><p>程序是人机交互的媒介，有输出必然也有输入。在C语言中，有多个函数可以从键盘获得用户输入：</p><ul><li>scanf()：和 printf() 类似，scanf() 可以输入多种类型的数据。</li><li>getchar()、getche()、getch()：这三个函数都用于输入单个字符。</li><li>gets()：获取一行数据，并作为字符串处理。</li></ul><p>scanf() 是最灵活、最复杂、最常用的输入函数，但它不能完全取代其他函数，大家都要有所了解。<br>scanf()函数</p><p>scanf 是 scan format 的缩写，意思是格式化扫描，也就是从键盘获得用户输入。我们先来看一个例子：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);  <span class="comment">//输入整数并赋值给变量a</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);  <span class="comment">//输入整数并赋值给变量b</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);  <span class="comment">//计算a+b的值</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;c, &amp;d);  <span class="comment">//输入两个整数并分别赋值给c、d</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c*d=%d\n"</span>, c*d);  <span class="comment">//计算c*d的值</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>12↙<br>60↙<br>a+b=72<br>10 23↙<br>c*d=230</p><blockquote><p>↙表示按下回车键。</p></blockquote><p>从键盘输入12，按下回车键，scanf() 就会读取输入数据并赋值给变量 a，本次输入结束，执行下一条语句。接着给变量b赋值，也是同样的道理。</p><p>第9行代码中，我们同时输入两个整数并分别赋值给c、d。注意”%d %d”之间是有空格的，所以输入数据时也要有空格。也就是说，输入数据的格式要和控制字符串的格式一致。</p><p>scanf 和 printf 非常相似：<br>scanf(“%d %d”, &amp;a, &amp;b);  // 获取用户输入的两个整数，分别赋值给变量 a 和 b<br>printf(“%d %d”, a, b);  // 将变量 a 和 b 的是在显示器上输出。<br>它们都有格式控制字符串，都有变量列表。不同的是，scanf 的变量前要带一个<code>&amp;</code>符号；&amp;称为<strong>取地址符</strong>，也就是获取变量在<strong>内存中的地址</strong>。</p><p>在《二进制思想以及数据的存储》一节中讲到，数据是以二进制的形式保存在内存中的，字节（Byte）是最小的可操作单位。为了便于管理，我们给每个字节分配了一个编号，使用该字节时，只要知道编号就可以，就像每个学生都有学号，老师会随机抽取学号来让学生回答问题。字节的编号是有顺序的，从 0 开始，接下来是 1、2、3……</p><p>下图是 4G 内存中每个字节的编号（以十六进制表示）：<br><img src="/images/hexMemory.png" alt=""></p><p>这个编号，就叫做<code>地址（Address）</code>。<code>int a</code>;会在内存中分配四个字节的空间，我们将第一个字节的地址称为变量 a 的地址，也就是<code>&amp;a</code>的值。对于前面讲到的整数、浮点数、字符，都要使用 &amp; 获取它们的地址，scanf 会根据地址把读取到的数据写入内存。</p><p>我们不妨将它们的地址输出看一下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="string">'F'</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">12</span>;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">452</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&amp;a=%#x, &amp;b=%#x, &amp;c=%#x\n"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br>&amp;a=0x18ff48, &amp;b=0x18ff44, &amp;c=0x18ff40</p><p><img src="/images/memoryAddress.png" alt=""></p><p>图：a、b、c 的内存地址</p><blockquote><p>注意：你看到的地址是虚拟地址，并不等于它在物理内存中的地址。虚拟内存是现代操作系统因内存管理的需要才提出的概念，dos 下没有这个概念，用户看到的都是真实的地址。CPU 操作的是物理内存地址，所以虚拟地址必须经过转换才能交给 CPU，这是 OS 的工作，对用户是透明的。</p></blockquote><p>再来看一个 scanf 的例子：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    scanf(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);</span><br><span class="line">    scanf(<span class="string">"%d   %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b=%d\n"</span>, a+b);</span><br><span class="line">    scanf(<span class="string">"%d, %d, %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a+b+c=%d\n"</span>, a+b+c);</span><br><span class="line">   </span><br><span class="line">    scanf(<span class="string">"%d is bigger than %d"</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"a-b=%d\n"</span>, a-b);</span><br><span class="line">    <span class="keyword">system</span>(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>10    20↙<br>a+b=30<br>100 200↙<br>a+b=300<br>56,45,78↙<br>a+b+c=179<br>25 is bigger than 11↙<br>a-b=14</p><p>第一个 scanf() 的格式控制字符串为<code>&quot;%d %d&quot;</code>，中间有一个空格，而我们却输入了<code>10    20</code>，中间有多个空格。<br>第二个 scanf() 的格式控制字符串为<code>&quot;%d   %d&quot;</code>，中间有多个空格，而我们却输入了<code>100 200</code>，中间只有一个空格。这说明 scanf() 对输入数据之间的空格的处理比较宽松，并不要求空格数严格对应。</p><p>第三个 scanf() 的控制字符串为<code>&quot;%d, %d, %d&quot;</code>，中间以逗号分隔，所以输入的整数也要以逗号分隔。</p><p>第四个 scanf() 要求整数之间以<code>is bigger than</code>分隔。</p><p>每次用户按下回车键，程序就会认为用户输入结束，scanf() 开始读取用户输入的内容，并根据格式控制字符串从中提取数据，只要用户输入的内容和格式控制字符串匹配，就能够正确提取。</p><p>本质上讲，用户输入的内容都是字符串，scanf() 完成的是从字符串中提取有效数据的过程。<br>输入单个字符</p><p>scanf 用于接收用户输入的各种数据，如果仅仅是输入单个字符，也可以使用 getchar()、getche() 或 getch()。</p><p>getchar() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    c=getchar();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p>#↙<br>c=’#’</p><p>你也可以将第5、6行的语句合并为一个：</p><pre><code>char c = getchar();</code></pre><p>getche() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getche();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><p>#c=’#’</p><p>大家亲自运行程序会发现，刚输入字符 #，getche() 就立即获取，不会等到用户按下回车键，所以运行结果中没有换行。而 getchr() 不是，它要等到用户按下回车键才能确认输入结束，所以运行结果中有换行。</p><blockquote><p>conio.h不是C标准库中的头文件，在ISO和POSIX标准中均没有定义。conio是Console Input/Output（控制台输入输出）的简写，其中定义了通过控制台进行数据输入和数据输出的函数，主要是一些用户通过按键盘产生的对应操作，比如getch()函数等等。大部分DOS，Windows，PharLap，DOSX，OS/2等平台上的C编译器提供此文件，UNIX和Linux平台的C编译器本身通常不包含此头文件，但已经有其兼容，可参考：<a href="http://conio.sourceforge.net/。" target="_blank" rel="noopener">http://conio.sourceforge.net/。</a><br>   另外大家平时主要是利用conio.h这个头文件中的getch()函数，即读取键盘字符但是不显示出来（without echo)，但是含有conio.h的程序在linux无法直接编译通过，因为linux没有这个头文件，除了利用上述的兼容包外还可以在linux采用原生的方法达到同样的效果，那就是利用linux系统的命令stty –echo，它代表不显示输入内容，源代码如下:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input a char:"</span>);</span><br><span class="line">system(<span class="string">"stty -echo"</span>);</span><br><span class="line">c=getchar();</span><br><span class="line">system(<span class="string">"stty echo"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You have inputed:%c \n"</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getch() 使用示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=getch();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c='%c'\n"</span>, c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序，输入 #，结果为：<br>c=’#’</p><p>大家亲自运行程序会发现，getch() 和 getche() 类似，输入一个字符就立即获取，不会等待用户按下回车键。与 getche() 不同的是，getch() 输入的 # 并没有显示出来。</p><p>在C语言中，将用户输入的内容显示在屏幕上叫做回显（Echo）。getchar()、getche() 是有回显的，而 getch() 没有回显。</p><p>回显在大部分情况下是有必要的，它能够与用户及时交互，让用户清楚地看到自己输入的内容。但在某些特殊情况下，我们却不希望有回显，例如输入密码，有回显是非常危险的，容易被偷窥。</p><p>另外需要注意的是：getchar() 位于 stdio.h 头文件中，是C语言规定的标准函数；而 getche()、getch() 位于 conio.h 中，它们都不是标准函数，不保证在任何编译器下都有效。<br>输入字符串</p><p>这里由于大家的基础知识还不够，没有学到数组和指针，暂时无法深入讲解。下面仅作一个演示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[<span class="number">30</span>], str2[<span class="number">30</span>];  <span class="comment">//定义两个字符数组</span></span><br><span class="line">    gets(str1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str2);</span><br><span class="line">    <span class="built_in">puts</span>(str1);</span><br><span class="line">    <span class="built_in">puts</span>(str2);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br>The world is beautiful!↙<br>Hello World!↙<br>The world is beautiful!<br>Hello</p><p>gets() 会读取用户输入的整行内容，包括空格。而 scanf() 遇到空格就结束读取，也就是说，使用 scanf() 读取的字符串中永远不会包含空格。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;C语言在显示器上输出数据&quot;&gt;&lt;a href=&quot;#C语言在显示器上输出数据&quot; class=&quot;headerlink&quot; title=&quot;C语言在显示器上输出数据&quot;&gt;&lt;/a&gt;C语言在显示器上输出数据&lt;/h4&gt;&lt;p&gt;在C语言中，有三个函数可以用来在显示器上输出数据：&lt;br&gt;puts()：只能输出字符串，在《C语言在屏幕上显示内容》中已经进行了介绍。&lt;br&gt;putchar()：只能输出单个字符，本节将会介绍。&lt;br&gt;printf()：可以输出各种类型的数据，在《在屏幕上输出各种类型的数据》《C语言中的整数》中都进行了介绍，本节要进行更加深入的讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="http://yulongphp.github.io/categories/C/"/>
    
    
      <category term="C" scheme="http://yulongphp.github.io/tags/C/"/>
    
  </entry>
  
</feed>
